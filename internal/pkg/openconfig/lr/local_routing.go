/*
Package lr is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/sgk/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- public/release/models/local-routing/openconfig-local-routing.yang
Imported modules were sourced from:
	- public/release/models/acl/...
	- public/release/models/types/...
	- public/release/models/...
	- public/third_party/ietf/...
*/
package lr

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       nil,
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	AdminStatus  E_Interface_AdminStatus            `path:"state/admin-status" module:"openconfig-interfaces"`
	Counters     *Interface_Counters                `path:"state/counters" module:"openconfig-interfaces"`
	Description  *string                            `path:"config/description" module:"openconfig-interfaces"`
	Enabled      *bool                              `path:"config/enabled" module:"openconfig-interfaces"`
	HoldTime     *Interface_HoldTime                `path:"hold-time" module:"openconfig-interfaces"`
	Ifindex      *uint32                            `path:"state/ifindex" module:"openconfig-interfaces"`
	LastChange   *uint64                            `path:"state/last-change" module:"openconfig-interfaces"`
	Logical      *bool                              `path:"state/logical" module:"openconfig-interfaces"`
	LoopbackMode *bool                              `path:"config/loopback-mode" module:"openconfig-interfaces"`
	Mtu          *uint16                            `path:"config/mtu" module:"openconfig-interfaces"`
	Name         *string                            `path:"config/name|name" module:"openconfig-interfaces"`
	OperStatus   E_Interface_OperStatus             `path:"state/oper-status" module:"openconfig-interfaces"`
	Subinterface map[uint32]*Interface_Subinterface `path:"subinterfaces/subinterface" module:"openconfig-interfaces"`
	Type         E_IETFInterfaces_InterfaceType     `path:"config/type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) (*Interface_Subinterface){

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) (*Interface_Subinterface){

	if t == nil {
		return nil
	}

  key := Index

  if lm, ok := t.Subinterface[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	Down	*uint32	`path:"config/down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"config/up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	AdminStatus E_Interface_AdminStatus          `path:"state/admin-status" module:"openconfig-interfaces"`
	Counters    *Interface_Subinterface_Counters `path:"state/counters" module:"openconfig-interfaces"`
	Description *string                          `path:"config/description" module:"openconfig-interfaces"`
	Enabled     *bool                            `path:"config/enabled" module:"openconfig-interfaces"`
	Ifindex     *uint32                          `path:"state/ifindex" module:"openconfig-interfaces"`
	Index       *uint32                          `path:"config/index|index" module:"openconfig-interfaces"`
	LastChange  *uint64                          `path:"state/last-change" module:"openconfig-interfaces"`
	Logical     *bool                            `path:"state/logical" module:"openconfig-interfaces"`
	Name        *string                          `path:"state/name" module:"openconfig-interfaces"`
	OperStatus  E_Interface_OperStatus           `path:"state/oper-status" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateCounters() *Interface_Subinterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetCounters() *Interface_Subinterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface_Subinterface struct, which is a YANG list entry.
func (t *Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// LocalRoutes represents the /openconfig-local-routing/local-routes YANG schema element.
type LocalRoutes struct {
	Aggregate	map[string]*LocalRoutes_Aggregate `path:"local-aggregates/aggregate" module:"openconfig-local-routing"`
	Static	map[string]*LocalRoutes_Static       `path:"static-routes/static" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes) IsYANGGoStruct() {}

// NewAggregate creates a new entry in the Aggregate list of the
// LocalRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *LocalRoutes) NewAggregate(Prefix string) (*LocalRoutes_Aggregate, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*LocalRoutes_Aggregate)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aggregate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aggregate", key)
	}

	t.Aggregate[key] = &LocalRoutes_Aggregate{
		Prefix: &Prefix,
	}

	return t.Aggregate[key], nil
}

// GetOrCreateAggregate retrieves the value with the specified keys from
// the receiver LocalRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LocalRoutes) GetOrCreateAggregate(Prefix string) (*LocalRoutes_Aggregate){

	key := Prefix

	if v, ok := t.Aggregate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAggregate(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAggregate got unexpected error: %v", err))
	}
	return v
}

// GetAggregate retrieves the value with the specified key from
// the Aggregate map field of LocalRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LocalRoutes) GetAggregate(Prefix string) (*LocalRoutes_Aggregate){

	if t == nil {
		return nil
	}

  key := Prefix

  if lm, ok := t.Aggregate[key]; ok {
    return lm
  }
  return nil
}

// NewStatic creates a new entry in the Static list of the
// LocalRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *LocalRoutes) NewStatic(Prefix string) (*LocalRoutes_Static, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*LocalRoutes_Static)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Static[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Static", key)
	}

	t.Static[key] = &LocalRoutes_Static{
		Prefix: &Prefix,
	}

	return t.Static[key], nil
}

// GetOrCreateStatic retrieves the value with the specified keys from
// the receiver LocalRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LocalRoutes) GetOrCreateStatic(Prefix string) (*LocalRoutes_Static){

	key := Prefix

	if v, ok := t.Static[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatic(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatic got unexpected error: %v", err))
	}
	return v
}

// GetStatic retrieves the value with the specified key from
// the Static map field of LocalRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LocalRoutes) GetStatic(Prefix string) (*LocalRoutes_Static){

	if t == nil {
		return nil
	}

  key := Prefix

  if lm, ok := t.Static[key]; ok {
    return lm
  }
  return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// LocalRoutes_Aggregate represents the /openconfig-local-routing/local-routes/local-aggregates/aggregate YANG schema element.
type LocalRoutes_Aggregate struct {
	Description *string                            `path:"config/description" module:"openconfig-local-routing"`
	Discard     *bool                              `path:"config/discard" module:"openconfig-local-routing"`
	Prefix      *string                            `path:"config/prefix|prefix" module:"openconfig-local-routing"`
	SetTag      LocalRoutes_Aggregate_SetTag_Union `path:"config/set-tag" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Aggregate) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the LocalRoutes_Aggregate struct, which is a YANG list entry.
func (t *LocalRoutes_Aggregate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Aggregate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Aggregate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Aggregate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// LocalRoutes_Aggregate_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/local-aggregates/aggregate/config/set-tag within the YANG schema.
type LocalRoutes_Aggregate_SetTag_Union interface {
	Is_LocalRoutes_Aggregate_SetTag_Union()
}

// LocalRoutes_Aggregate_SetTag_Union_String is used when /openconfig-local-routing/local-routes/local-aggregates/aggregate/config/set-tag
// is to be set to a string value.
type LocalRoutes_Aggregate_SetTag_Union_String struct {
	String	string
}

// Is_LocalRoutes_Aggregate_SetTag_Union ensures that LocalRoutes_Aggregate_SetTag_Union_String
// implements the LocalRoutes_Aggregate_SetTag_Union interface.
func (*LocalRoutes_Aggregate_SetTag_Union_String) Is_LocalRoutes_Aggregate_SetTag_Union() {}

// LocalRoutes_Aggregate_SetTag_Union_Uint32 is used when /openconfig-local-routing/local-routes/local-aggregates/aggregate/config/set-tag
// is to be set to a uint32 value.
type LocalRoutes_Aggregate_SetTag_Union_Uint32 struct {
	Uint32	uint32
}

// Is_LocalRoutes_Aggregate_SetTag_Union ensures that LocalRoutes_Aggregate_SetTag_Union_Uint32
// implements the LocalRoutes_Aggregate_SetTag_Union interface.
func (*LocalRoutes_Aggregate_SetTag_Union_Uint32) Is_LocalRoutes_Aggregate_SetTag_Union() {}

// To_LocalRoutes_Aggregate_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Aggregate_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Aggregate) To_LocalRoutes_Aggregate_SetTag_Union(i interface{}) (LocalRoutes_Aggregate_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &LocalRoutes_Aggregate_SetTag_Union_String{v}, nil
	case uint32:
		return &LocalRoutes_Aggregate_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Aggregate_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}


// LocalRoutes_Static represents the /openconfig-local-routing/local-routes/static-routes/static YANG schema element.
type LocalRoutes_Static struct {
	Description *string                                `path:"config/description" module:"openconfig-local-routing"`
	NextHop     map[string]*LocalRoutes_Static_NextHop `path:"next-hops/next-hop" module:"openconfig-local-routing"`
	Prefix      *string                                `path:"config/prefix|prefix" module:"openconfig-local-routing"`
	SetTag      LocalRoutes_Static_SetTag_Union        `path:"config/set-tag" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Static) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// LocalRoutes_Static struct. The keys of the list are populated from the input
// arguments.
func (t *LocalRoutes_Static) NewNextHop(Index string) (*LocalRoutes_Static_NextHop, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*LocalRoutes_Static_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &LocalRoutes_Static_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver LocalRoutes_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LocalRoutes_Static) GetOrCreateNextHop(Index string) (*LocalRoutes_Static_NextHop){

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of LocalRoutes_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LocalRoutes_Static) GetNextHop(Index string) (*LocalRoutes_Static_NextHop){

	if t == nil {
		return nil
	}

  key := Index

  if lm, ok := t.NextHop[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the LocalRoutes_Static struct, which is a YANG list entry.
func (t *LocalRoutes_Static) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Static) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Static) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// LocalRoutes_Static_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/static-routes/static/config/set-tag within the YANG schema.
type LocalRoutes_Static_SetTag_Union interface {
	Is_LocalRoutes_Static_SetTag_Union()
}

// LocalRoutes_Static_SetTag_Union_String is used when /openconfig-local-routing/local-routes/static-routes/static/config/set-tag
// is to be set to a string value.
type LocalRoutes_Static_SetTag_Union_String struct {
	String	string
}

// Is_LocalRoutes_Static_SetTag_Union ensures that LocalRoutes_Static_SetTag_Union_String
// implements the LocalRoutes_Static_SetTag_Union interface.
func (*LocalRoutes_Static_SetTag_Union_String) Is_LocalRoutes_Static_SetTag_Union() {}

// LocalRoutes_Static_SetTag_Union_Uint32 is used when /openconfig-local-routing/local-routes/static-routes/static/config/set-tag
// is to be set to a uint32 value.
type LocalRoutes_Static_SetTag_Union_Uint32 struct {
	Uint32	uint32
}

// Is_LocalRoutes_Static_SetTag_Union ensures that LocalRoutes_Static_SetTag_Union_Uint32
// implements the LocalRoutes_Static_SetTag_Union interface.
func (*LocalRoutes_Static_SetTag_Union_Uint32) Is_LocalRoutes_Static_SetTag_Union() {}

// To_LocalRoutes_Static_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Static_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Static) To_LocalRoutes_Static_SetTag_Union(i interface{}) (LocalRoutes_Static_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &LocalRoutes_Static_SetTag_Union_String{v}, nil
	case uint32:
		return &LocalRoutes_Static_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Static_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}


// LocalRoutes_Static_NextHop represents the /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop YANG schema element.
type LocalRoutes_Static_NextHop struct {
	Index        *string                                  `path:"config/index|index" module:"openconfig-local-routing"`
	InterfaceRef *LocalRoutes_Static_NextHop_InterfaceRef `path:"interface-ref" module:"openconfig-local-routing"`
	Metric       *uint32                                  `path:"config/metric" module:"openconfig-local-routing"`
	NextHop      LocalRoutes_Static_NextHop_NextHop_Union `path:"config/next-hop" module:"openconfig-local-routing"`
	Recurse      *bool                                    `path:"config/recurse" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Static_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Static_NextHop) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *LocalRoutes_Static_NextHop) GetOrCreateInterfaceRef() *LocalRoutes_Static_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &LocalRoutes_Static_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from LocalRoutes_Static_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *LocalRoutes_Static_NextHop) GetInterfaceRef() *LocalRoutes_Static_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// ΛListKeyMap returns the keys of the LocalRoutes_Static_NextHop struct, which is a YANG list entry.
func (t *LocalRoutes_Static_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Static_NextHop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Static_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Static_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// LocalRoutes_Static_NextHop_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/config/next-hop within the YANG schema.
type LocalRoutes_Static_NextHop_NextHop_Union interface {
	Is_LocalRoutes_Static_NextHop_NextHop_Union()
}

// LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP is used when /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/config/next-hop
// is to be set to a E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP value.
type LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP struct {
	E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
}

// Is_LocalRoutes_Static_NextHop_NextHop_Union ensures that LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the LocalRoutes_Static_NextHop_NextHop_Union interface.
func (*LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) Is_LocalRoutes_Static_NextHop_NextHop_Union() {}

// LocalRoutes_Static_NextHop_NextHop_Union_String is used when /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/config/next-hop
// is to be set to a string value.
type LocalRoutes_Static_NextHop_NextHop_Union_String struct {
	String	string
}

// Is_LocalRoutes_Static_NextHop_NextHop_Union ensures that LocalRoutes_Static_NextHop_NextHop_Union_String
// implements the LocalRoutes_Static_NextHop_NextHop_Union interface.
func (*LocalRoutes_Static_NextHop_NextHop_Union_String) Is_LocalRoutes_Static_NextHop_NextHop_Union() {}

// To_LocalRoutes_Static_NextHop_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Static_NextHop_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Static_NextHop) To_LocalRoutes_Static_NextHop_NextHop_Union(i interface{}) (LocalRoutes_Static_NextHop_NextHop_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP:
		return &LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP{v}, nil
	case string:
		return &LocalRoutes_Static_NextHop_NextHop_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Static_NextHop_NextHop_Union, unknown union type, got: %T, want any of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
	}
}


// LocalRoutes_Static_NextHop_InterfaceRef represents the /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type LocalRoutes_Static_NextHop_InterfaceRef struct {
	Interface	*string	`path:"config/interface" module:"openconfig-local-routing"`
	Subinterface	*uint32	`path:"config/subinterface" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Static_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Static_NextHop_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Static_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Static_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Static_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node Interface_AdminStatus. An additional value named
// Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_AdminStatus int64

// IsYANGGoEnum ensures that Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_AdminStatus.
func (E_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_AdminStatus.
func (e E_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_AdminStatus")
}

const (
	// Interface_AdminStatus_UNSET corresponds to the value UNSET of Interface_AdminStatus
	Interface_AdminStatus_UNSET E_Interface_AdminStatus = 0
	// Interface_AdminStatus_UP corresponds to the value UP of Interface_AdminStatus
	Interface_AdminStatus_UP E_Interface_AdminStatus = 1
	// Interface_AdminStatus_DOWN corresponds to the value DOWN of Interface_AdminStatus
	Interface_AdminStatus_DOWN E_Interface_AdminStatus = 2
	// Interface_AdminStatus_TESTING corresponds to the value TESTING of Interface_AdminStatus
	Interface_AdminStatus_TESTING E_Interface_AdminStatus = 3
)


// E_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node Interface_OperStatus. An additional value named
// Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_OperStatus int64

// IsYANGGoEnum ensures that Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_OperStatus.
func (E_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_OperStatus.
func (e E_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_OperStatus")
}

const (
	// Interface_OperStatus_UNSET corresponds to the value UNSET of Interface_OperStatus
	Interface_OperStatus_UNSET E_Interface_OperStatus = 0
	// Interface_OperStatus_UP corresponds to the value UP of Interface_OperStatus
	Interface_OperStatus_UP E_Interface_OperStatus = 2
	// Interface_OperStatus_DOWN corresponds to the value DOWN of Interface_OperStatus
	Interface_OperStatus_DOWN E_Interface_OperStatus = 3
	// Interface_OperStatus_TESTING corresponds to the value TESTING of Interface_OperStatus
	Interface_OperStatus_TESTING E_Interface_OperStatus = 4
	// Interface_OperStatus_UNKNOWN corresponds to the value UNKNOWN of Interface_OperStatus
	Interface_OperStatus_UNKNOWN E_Interface_OperStatus = 5
	// Interface_OperStatus_DORMANT corresponds to the value DORMANT of Interface_OperStatus
	Interface_OperStatus_DORMANT E_Interface_OperStatus = 6
	// Interface_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of Interface_OperStatus
	Interface_OperStatus_NOT_PRESENT E_Interface_OperStatus = 7
	// Interface_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of Interface_OperStatus
	Interface_OperStatus_LOWER_LAYER_DOWN E_Interface_OperStatus = 8
)


// E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP is a derived int64 type which is used to represent
// the enumerated node OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP. An additional value named
// OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP int64

// IsYANGGoEnum ensures that OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP implements the yang.GoEnum
// interface. This ensures that OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP.
func (E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP.
func (e E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP")
}

const (
	// OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP_UNSET corresponds to the value UNSET of OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
	OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP_UNSET E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP = 0
	// OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP_DROP corresponds to the value DROP of OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
	OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP_DROP E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP = 1
	// OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP_LOCAL_LINK corresponds to the value LOCAL_LINK of OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
	OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP_LOCAL_LINK E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP = 2
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_Interface_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_Interface_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP": {
		1: {Name: "DROP", DefiningModule: "openconfig-local-routing"},
		2: {Name: "LOCAL_LINK", DefiningModule: "openconfig-local-routing"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0xd1, 0x6e, 0xdb, 0x48,
		0xb2, 0x7d, 0xd7, 0x57, 0x18, 0xc4, 0x3e, 0xc4, 0x0b, 0x33, 0xb2, 0x64, 0xd9, 0x8e, 0x0d, 0x5c,
		0x2c, 0x32, 0x63, 0x0f, 0x26, 0xd8, 0xcc, 0x24, 0xc8, 0xcc, 0x5e, 0x5c, 0xc0, 0xab, 0x6b, 0xd0,
		0x54, 0xcb, 0x26, 0x22, 0x91, 0x02, 0xd9, 0xdc, 0x71, 0x90, 0xf8, 0xdf, 0x17, 0x94, 0x28, 0x9a,
		0x94, 0x44, 0xa9, 0xab, 0xbb, 0x9a, 0x92, 0xec, 0xe3, 0x97, 0xd8, 0x0a, 0xbb, 0x48, 0x76, 0x57,
		0xd5, 0x39, 0x55, 0x5d, 0x5d, 0xfa, 0xde, 0x3a, 0x38, 0x38, 0x38, 0x70, 0x7e, 0xf7, 0xc6, 0xc2,
		0xb9, 0x3c, 0x70, 0x9c, 0xa3, 0xd9, 0xdf, 0xff, 0x0c, 0xc2, 0x81, 0x73, 0x79, 0x70, 0x9c, 0xff,
		0xf9, 0x73, 0x14, 0x0e, 0x83, 0xfb, 0xd2, 0x07, 0x57, 0x41, 0xec, 0x5c, 0x1e, 0xcc, 0x06, 0x4f,
		0x3f, 0x08, 0x42, 0x29, 0xe2, 0xa1, 0xe7, 0x8b, 0xa4, 0xf2, 0x79, 0x45, 0x78, 0xe9, 0x9a, 0xa3,
		0xea, 0x15, 0xf9, 0xed, 0x3a, 0x0b, 0x1f, 0x2f, 0xde, 0xb6, 0xf8, 0x8f, 0xcf, 0xb1, 0x18, 0x06,
		0x8f, 0x4b, 0x77, 0xaa, 0xdc, 0x2d, 0xf2, 0xdd, 0x60, 0xb8, 0x70, 0xa3, 0xe9, 0x05, 0x7f, 0x44,
		0x69, 0xec, 0x8b, 0x95, 0x83, 0x67, 0x0f, 0x23, 0xbe, 0xfd, 0x15, 0xc5, 0xd9, 0xf3, 0x38, 0x93,
		0xd9, 0x7d, 0x8e, 0x56, 0x5f, 0xf8, 0xab, 0x97, 0xbc, 0x8f, 0xef, 0xd3, 0xb1, 0x08, 0xa5, 0x73,
		0x79, 0x20, 0xe3, 0x54, 0xd4, 0x5c, 0x58, 0xba, 0x2a, 0x7f, 0xac, 0xa5, 0xeb, 0x9e, 0x2a, 0x9f,
		0x3c, 0x2d, 0xbc, 0xef, 0xe2, 0x74, 0x2f, 0x4f, 0x7b, 0xfd, 0xeb, 0x2c, 0xcd, 0x7e, 0xdd, 0xeb,
		0xac, 0x5e, 0x84, 0x8d, 0x8b, 0xa1, 0xb2, 0x28, 0xca, 0x8b, 0xa3, 0xba, 0x48, 0xe4, 0xc5, 0x22,
		0x2f, 0x1a, 0x65, 0xf1, 0x56, 0x2f, 0x62, 0xcd, 0x62, 0x6e, 0x5c, 0xd4, 0xe2, 0x02, 0x7f, 0x3e,
		0xe3, 0x1b, 0xe6, 0x60, 0x3e, 0xa9, 0xf9, 0xf5, 0x1b, 0xde, 0x67, 0xfd, 0x32, 0x2b, 0x2f, 0x37,
		0x65, 0xd9, 0xc9, 0xcb, 0x4f, 0x55, 0x03, 0x6d, 0x75, 0xd0, 0x56, 0x0b, 0x1d, 0xf5, 0x58, 0xaf,
		0x26, 0x1b, 0xd4, 0x45, 0x59, 0x6d, 0x8a, 0x0b, 0x07, 0x22, 0xf1, 0xe3, 0x60, 0x22, 0x83, 0x28,
		0x54, 0x9f, 0xc0, 0xf9, 0x0a, 0x95, 0x07, 0x2b, 0xce, 0x44, 0x15, 0x33, 0x36, 0x5e, 0xae, 0xaa,
		0x60, 0x3a, 0x8a, 0xa6, 0xad, 0x70, 0xba, 0x8a, 0x67, 0xac, 0x80, 0xc6, 0x8a, 0x68, 0xa2, 0x90,
		0x6a, 0x8a, 0xa9, 0xa8, 0xa0, 0xc5, 0x83, 0xfc, 0xf9, 0x6d, 0x22, 0xf4, 0x56, 0x2b, 0x91, 0x71,
		0x10, 0xde, 0x53, 0x96, 0x6b, 0xee, 0xd4, 0xde, 0xb5, 0x78, 0xde, 0x53, 0xe1, 0x1d, 0x1d, 0x11,
		0x7a, 0x77, 0x23, 0x31, 0xa0, 0xdb, 0xd6, 0x7c, 0xa0, 0xe2, 0x3c, 0x5e, 0x89, 0xa1, 0x97, 0x8e,
		0xa6, 0xeb, 0x99, 0xa9, 0x03, 0xcc, 0x11, 0xe6, 0xd8, 0xac, 0x39, 0xde, 0x45, 0xd1, 0x48, 0x78,
		0xa1, 0x8e, 0x3d, 0x76, 0x1a, 0xb4, 0xc7, 0x51, 0x14, 0x4d, 0xee, 0x3c, 0xff, 0xab, 0x3b, 0x8e,
		0x06, 0x82, 0x6e, 0x95, 0xd5, 0xe1, 0x74, 0xdb, 0x1c, 0x7a, 0xa3, 0x04, 0xc6, 0x09, 0xe3, 0x84,
		0x71, 0xae, 0xba, 0xe7, 0x58, 0xa6, 0x74, 0x93, 0xcc, 0x06, 0xc1, 0xa0, 0x60, 0x50, 0x8d, 0x1a,
		0x54, 0x1a, 0x84, 0xb2, 0x73, 0xa6, 0x61, 0x4f, 0x67, 0x84, 0x21, 0x5f, 0xbc, 0xf0, 0x3e, 0xbb,
		0xdb, 0x0d, 0x69, 0x7a, 0x69, 0xea, 0x30, 0xbd, 0xd1, 0x6f, 0x41, 0x48, 0xd6, 0x23, 0x4d, 0xa3,
		0x5a, 0x1a, 0xfe, 0xbf, 0xde, 0x28, 0x15, 0x06, 0xe3, 0x7f, 0x89, 0x3d, 0x3f, 0x0b, 0x40, 0xaf,
		0x82, 0xfb, 0x40, 0x26, 0x99, 0x20, 0xb2, 0x9c, 0xa7, 0x23, 0x8d, 0x29, 0xf3, 0x1e, 0xb7, 0x3e,
		0x65, 0x67, 0xa7, 0xa7, 0x27, 0xa7, 0x5b, 0x9c, 0xb6, 0x96, 0x9d, 0xab, 0xfb, 0x0d, 0x22, 0x4e,
		0x38, 0xb3, 0x67, 0x22, 0xe4, 0x4c, 0x47, 0x01, 0x73, 0x80, 0x39, 0x48, 0x78, 0x2c, 0xdd, 0x53,
		0x52, 0xde, 0xaf, 0x78, 0xb7, 0xe9, 0x28, 0x58, 0x14, 0x2c, 0xaa, 0x51, 0x8b, 0x0a, 0x06, 0x22,
		0x94, 0x81, 0xfc, 0x16, 0x8b, 0xa1, 0x8e, 0x59, 0x11, 0xb0, 0xd7, 0xf9, 0x90, 0xdf, 0xea, 0x27,
		0x2f, 0xd1, 0x58, 0xed, 0xa5, 0xed, 0x39, 0x77, 0x6a, 0x30, 0xdc, 0x13, 0x6e, 0x79, 0x53, 0xe2,
		0xfa, 0x71, 0xca, 0x34, 0x36, 0xd3, 0x59, 0xfa, 0x3e, 0x4e, 0xe4, 0xbb, 0xe2, 0x51, 0x5e, 0x4a,
		0x31, 0x12, 0x63, 0x21, 0xe3, 0x6f, 0x6e, 0x14, 0xba, 0xfe, 0xc3, 0x94, 0x3f, 0x6b, 0xed, 0xed,
		0x4c, 0xf3, 0x34, 0x1a, 0x9b, 0x3b, 0xa6, 0xfb, 0x3a, 0xfd, 0x4d, 0xfb, 0x8c, 0x61, 0x18, 0x49,
		0x4f, 0x79, 0xb7, 0xc6, 0x49, 0xfc, 0x07, 0x31, 0xf6, 0x26, 0x9e, 0x7c, 0xc8, 0x9e, 0xae, 0x1d,
		0x4d, 0x44, 0x38, 0xdb, 0x00, 0x74, 0x9f, 0xf7, 0xd9, 0xdb, 0xab, 0x7e, 0x6d, 0xe7, 0xfb, 0x84,
		0x2d, 0xbd, 0x77, 0x59, 0xa3, 0x0a, 0xce, 0x43, 0x34, 0x1a, 0xb8, 0x32, 0x50, 0x20, 0x5e, 0x85,
		0xde, 0x3f, 0x0f, 0xc1, 0xbe, 0x25, 0xf6, 0x2d, 0x09, 0xdb, 0xde, 0x4b, 0x8b, 0xa3, 0xb4, 0xfd,
		0x4d, 0x54, 0x27, 0x50, 0x8d, 0xd7, 0x42, 0x35, 0x54, 0xd5, 0xb3, 0x18, 0x30, 0x88, 0xfe, 0x0a,
		0xf5, 0xe1, 0x7e, 0x3a, 0x9a, 0x38, 0x57, 0xa5, 0xcd, 0x86, 0x63, 0xea, 0x58, 0xbd, 0xbc, 0x04,
		0x59, 0xed, 0x4d, 0xd4, 0xdf, 0xd8, 0x0c, 0x4c, 0xcd, 0x81, 0xcd, 0x2c, 0xd8, 0xcc, 0x83, 0xc3,
		0x4c, 0x34, 0x73, 0x3a, 0xc4, 0xf5, 0x26, 0x33, 0xf5, 0x95, 0x79, 0xd7, 0x93, 0xae, 0xce, 0x72,
		0xe7, 0xba, 0x7d, 0xae, 0x31, 0x54, 0x2f, 0x0f, 0xab, 0x9f, 0x8f, 0x65, 0xc9, 0xcb, 0x32, 0x25,
		0x1b, 0xb9, 0xf2, 0xb4, 0x9c, 0x89, 0x47, 0x83, 0xbc, 0x2d, 0x4b, 0xfe, 0xd6, 0xd6, 0xd4, 0xf6,
		0xba, 0x17, 0xbd, 0x8b, 0xb3, 0xf3, 0xee, 0xc5, 0xe9, 0x0e, 0xcd, 0x71, 0xab, 0x99, 0x51, 0x7d,
		0x4b, 0xc9, 0x64, 0x82, 0x8e, 0x38, 0xe9, 0x44, 0x1f, 0xaa, 0xd3, 0x09, 0x80, 0x1a, 0x40, 0x0d,
		0xa0, 0x06, 0x50, 0x03, 0xa8, 0x01, 0xd4, 0x00, 0x6a, 0x3a, 0x50, 0xb3, 0x06, 0xea, 0xca, 0xa9,
		0x66, 0x3d, 0xe3, 0x67, 0x4d, 0x3d, 0xd7, 0xe0, 0x0b, 0x21, 0x05, 0xbd, 0x12, 0x58, 0xb8, 0x73,
		0x24, 0x7d, 0xd5, 0x9c, 0x21, 0x2d, 0x45, 0x5d, 0x8c, 0xd3, 0x4f, 0x55, 0x17, 0xd9, 0x61, 0xa5,
		0xa4, 0xb5, 0xfa, 0x5b, 0xab, 0x6c, 0x77, 0x26, 0xd2, 0x93, 0x1a, 0xfb, 0x9d, 0xb3, 0x61, 0x96,
		0xb3, 0x90, 0x5d, 0x64, 0x21, 0x91, 0x85, 0x44, 0x16, 0x12, 0xc1, 0x0d, 0x82, 0x1b, 0x04, 0x37,
		0x08, 0x6e, 0x10, 0xdc, 0x20, 0xb8, 0x41, 0x16, 0x12, 0x40, 0x0d, 0xa0, 0x06, 0x50, 0x03, 0xa8,
		0x01, 0xd4, 0x00, 0x6a, 0x00, 0xb5, 0xdd, 0x40, 0x7d, 0x9b, 0xa9, 0xb0, 0x59, 0x86, 0x69, 0x27,
		0xea, 0x7e, 0x9b, 0x2b, 0x5a, 0x55, 0xad, 0x13, 0xcd, 0x53, 0x77, 0x71, 0xea, 0xcb, 0xfc, 0x04,
		0x90, 0xf3, 0x61, 0x2e, 0xe4, 0xf6, 0xd7, 0x68, 0x34, 0xf8, 0x33, 0x93, 0x61, 0xa1, 0xf6, 0x55,
		0xe9, 0xbc, 0x11, 0xe5, 0x9c, 0x91, 0xa2, 0x53, 0x41, 0xc5, 0xeb, 0xae, 0x56, 0xbc, 0x2a, 0x93,
		0x9c, 0xe7, 0x1e, 0x04, 0xc2, 0x1b, 0xaa, 0x9d, 0x58, 0x28, 0x32, 0xc7, 0x0a, 0x34, 0xc6, 0xf9,
		0x9c, 0xdb, 0xdb, 0xdb, 0xb7, 0x79, 0x1a, 0xbd, 0x3d, 0x55, 0x3f, 0x0b, 0x46, 0xa0, 0x96, 0x33,
		0x27, 0xe5, 0xca, 0xc9, 0x85, 0xdf, 0x5d, 0x98, 0xc1, 0x4e, 0x99, 0x81, 0x72, 0xe1, 0xb7, 0x37,
		0x18, 0x07, 0xa1, 0x9b, 0xe9, 0x44, 0x9a, 0xd0, 0xf7, 0x5d, 0x2a, 0xa3, 0x71, 0xde, 0xac, 0xb9,
		0xf0, 0x15, 0xe7, 0xcd, 0xa6, 0x3d, 0x9d, 0xd2, 0xb1, 0x88, 0x3d, 0x42, 0xbf, 0xb4, 0x8a, 0x6f,
		0xeb, 0x11, 0xc6, 0x5c, 0x87, 0xe9, 0x38, 0x7b, 0x48, 0x6c, 0xab, 0x6f, 0x6f, 0x5b, 0xfd, 0xa8,
		0xb9, 0x69, 0x8a, 0x26, 0xb9, 0x5e, 0x79, 0xa3, 0x17, 0x56, 0x75, 0xc0, 0xb2, 0x4b, 0xef, 0x47,
		0x69, 0x46, 0xef, 0x13, 0x9d, 0xf3, 0x42, 0xf9, 0x48, 0x9c, 0x18, 0x02, 0x58, 0x68, 0x78, 0x4c,
		0xf2, 0x5e, 0xbd, 0xef, 0xc5, 0x71, 0x20, 0x62, 0x57, 0xc6, 0x5e, 0x98, 0x04, 0x99, 0x49, 0x27,
		0xfa, 0xfb, 0x01, 0xab, 0x84, 0x21, 0xc9, 0xcf, 0xae, 0xf0, 0x6c, 0x8a, 0xcf, 0x66, 0x00, 0x1c,
		0x86, 0xa0, 0x97, 0x9d, 0x6b, 0x3e, 0xc9, 0x9f, 0xbb, 0xe8, 0xb3, 0x9e, 0x41, 0x9e, 0xff, 0x1d,
		0xf2, 0xfc, 0x66, 0xc9, 0x68, 0xe4, 0xf9, 0xad, 0x4d, 0x6d, 0xe7, 0x5d, 0xaf, 0x77, 0x76, 0xde,
		0xeb, 0x1d, 0x9f, 0x9f, 0x9c, 0x1f, 0x5f, 0x9c, 0x9e, 0x76, 0xce, 0x3a, 0xc8, 0xf8, 0x33, 0x7b,
		0x21, 0x72, 0x60, 0x63, 0x66, 0xc6, 0x56, 0x02, 0x1d, 0x3e, 0x46, 0x6f, 0xc8, 0xec, 0xf5, 0x16,
		0xb9, 0x6f, 0xa5, 0x9a, 0x22, 0x08, 0xdd, 0xbb, 0x38, 0xf2, 0x06, 0xbe, 0x97, 0x48, 0x77, 0xf2,
		0x55, 0x26, 0x26, 0xcd, 0x57, 0x16, 0x45, 0x81, 0x4a, 0x81, 0x4a, 0x81, 0x4a, 0x81, 0x4a, 0x81,
		0x4a, 0x81, 0x4a, 0xa1, 0x78, 0x82, 0x8a, 0xcb, 0x83, 0x20, 0xf1, 0xbd, 0x78, 0x60, 0x86, 0xc8,
		0x85, 0x10, 0x60, 0x31, 0xb0, 0x18, 0x58, 0x0c, 0x2c, 0x06, 0x16, 0x03, 0x8b, 0x81, 0xc5, 0x54,
		0x2c, 0x16, 0x71, 0x1c, 0xc5, 0x66, 0x48, 0x9c, 0x8b, 0x00, 0x0e, 0x03, 0x87, 0x81, 0xc3, 0xc0,
		0x61, 0xe0, 0x30, 0x70, 0x18, 0x38, 0x4c, 0xc5, 0xe1, 0xa1, 0x9f, 0x70, 0x60, 0x71, 0x49, 0x0c,
		0xf0, 0x18, 0x78, 0x0c, 0x3c, 0x06, 0x1e, 0x03, 0x8f, 0x81, 0xc7, 0xc0, 0x63, 0x2a, 0x1e, 0x8f,
		0xd3, 0x91, 0x0c, 0x78, 0xf6, 0x8e, 0x17, 0x44, 0x01, 0x97, 0x81, 0xcb, 0xc0, 0x65, 0xe0, 0x32,
		0x70, 0x19, 0xb8, 0x0c, 0x5c, 0xa6, 0xe2, 0x72, 0xe4, 0x4b, 0x61, 0x88, 0xc7, 0xb9, 0x08, 0xe0,
		0x30, 0x70, 0x18, 0x38, 0x0c, 0x1c, 0x06, 0x0e, 0x03, 0x87, 0x81, 0xc3, 0x54, 0x1c, 0x36, 0x8e,
		0x8a, 0x11, 0x0b, 0x03, 0x83, 0x81, 0xc1, 0xc0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0xac, 0x85,
		0xc1, 0x69, 0xc8, 0x94, 0xa1, 0xae, 0x08, 0x02, 0x26, 0x03, 0x93, 0x81, 0xc9, 0xc0, 0x64, 0x60,
		0x32, 0x30, 0x19, 0x98, 0x4c, 0xc7, 0xe4, 0xaf, 0x61, 0xf4, 0x57, 0xe8, 0x4e, 0xe2, 0x48, 0x46,
		0xa6, 0xa8, 0x5c, 0x11, 0x05, 0x5c, 0x06, 0x2e, 0x03, 0x97, 0x81, 0xcb, 0xc0, 0x65, 0xe0, 0x32,
		0x70, 0x99, 0x84, 0xcb, 0xa3, 0x2c, 0xb8, 0xf5, 0x47, 0xc2, 0x8b, 0xf5, 0x01, 0xb9, 0x24, 0x03,
		0x48, 0x0c, 0x24, 0x7e, 0x51, 0x48, 0x2c, 0x83, 0xb1, 0x90, 0x81, 0xff, 0x35, 0x69, 0x1c, 0x8b,
		0xff, 0x15, 0xce, 0xfc, 0x98, 0x13, 0x7a, 0x61, 0x94, 0x08, 0x3f, 0x0a, 0xc9, 0x27, 0xfa, 0x81,
		0xe9, 0xc0, 0x74, 0x60, 0xfa, 0x2e, 0x63, 0x3a, 0x5a, 0xb2, 0xa1, 0x25, 0x5b, 0xf6, 0x06, 0x51,
		0x2a, 0xd9, 0x7a, 0xb2, 0xad, 0x90, 0x05, 0x5a, 0x06, 0x5a, 0x86, 0x04, 0x09, 0x12, 0x24, 0x20,
		0x53, 0x20, 0x53, 0x48, 0x90, 0x90, 0x91, 0xd9, 0xbc, 0x2b, 0x5b, 0x45, 0x0a, 0xd0, 0x18, 0x68,
		0x0c, 0x34, 0x06, 0x1a, 0x03, 0x8d, 0x81, 0xc6, 0x40, 0x63, 0x32, 0x1a, 0x9b, 0xf6, 0x82, 0x29,
		0xc9, 0x00, 0x12, 0x03, 0x89, 0x81, 0xc4, 0x40, 0x62, 0x20, 0x31, 0x90, 0x18, 0x48, 0x4c, 0x46,
		0x62, 0xae, 0x4e, 0x30, 0x2b, 0x64, 0x01, 0x99, 0x81, 0xcc, 0x40, 0x66, 0x20, 0x33, 0x90, 0x19,
		0xc8, 0x0c, 0x64, 0x26, 0x23, 0xb3, 0x69, 0x2f, 0x98, 0x92, 0x0c, 0x20, 0x31, 0x90, 0x18, 0x48,
		0x0c, 0x24, 0x06, 0x12, 0x03, 0x89, 0x81, 0xc4, 0x64, 0x24, 0x36, 0x8f, 0x8c, 0x11, 0x0f, 0x03,
		0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0xac, 0x87, 0xc2, 0x3c, 0xfd, 0x60,
		0x96, 0x24, 0x01, 0x95, 0x81, 0xca, 0x40, 0x65, 0xa0, 0x32, 0x50, 0x19, 0xa8, 0x0c, 0x54, 0x56,
		0xbc, 0x52, 0x51, 0xa7, 0xe8, 0x87, 0xdd, 0x88, 0xa8, 0xbe, 0x7c, 0xb8, 0x2d, 0x9a, 0x88, 0xd8,
		0xcb, 0xd6, 0xd2, 0x1b, 0x51, 0xa1, 0xdd, 0xf8, 0x30, 0x9b, 0xe6, 0x21, 0x36, 0xb5, 0x29, 0xef,
		0x2b, 0x4e, 0xf9, 0xfb, 0x30, 0x8c, 0xe4, 0x74, 0x06, 0x48, 0x96, 0xeb, 0x24, 0xfe, 0x83, 0x18,
		0x7b, 0x13, 0x4f, 0x3e, 0x64, 0x4f, 0xdf, 0x8e, 0x26, 0x22, 0xf4, 0xa7, 0xa4, 0xc5, 0x0d, 0x32,
		0x38, 0x19, 0x7a, 0xbe, 0x48, 0xda, 0xab, 0x7e, 0x6d, 0x27, 0xd2, 0x93, 0xa2, 0x9d, 0xc3, 0x0e,
		0x85, 0x50, 0x39, 0x89, 0x8c, 0x53, 0x5f, 0x86, 0x39, 0x70, 0x7d, 0x98, 0x4b, 0xbc, 0xfd, 0x79,
		0x2e, 0xab, 0xc5, 0x33, 0x7f, 0x0a, 0xea, 0xea, 0x0c, 0x44, 0xe2, 0xc7, 0xc1, 0x84, 0x34, 0x71,
		0x05, 0xe6, 0x96, 0x07, 0x2b, 0xae, 0x13, 0xcd, 0x2b, 0x92, 0x09, 0xa4, 0x0e, 0x71, 0xd4, 0x26,
		0x8c, 0xba, 0x44, 0xd1, 0x98, 0x20, 0x1a, 0x13, 0x43, 0x13, 0x42, 0xc8, 0xeb, 0x2a, 0xc9, 0xc4,
		0xaf, 0x58, 0xad, 0x44, 0xc6, 0x41, 0x78, 0x4f, 0x59, 0xae, 0x5c, 0xf7, 0x3a, 0xef, 0x1a, 0xb4,
		0x2f, 0x11, 0x7a, 0x77, 0x23, 0x31, 0xa0, 0xdb, 0xd6, 0x7c, 0xa0, 0xe2, 0x3c, 0x5e, 0x89, 0xa1,
		0x97, 0x8e, 0xa6, 0xeb, 0x99, 0xa9, 0x03, 0xcc, 0x11, 0xe6, 0xd8, 0xac, 0x39, 0xde, 0x45, 0xd1,
		0x48, 0x78, 0xa1, 0x8e, 0x3d, 0x76, 0x1a, 0xb4, 0xc7, 0x60, 0x18, 0x84, 0x03, 0xf1, 0x48, 0xb7,
		0xc7, 0xf9, 0x40, 0x18, 0x16, 0x0c, 0xab, 0x51, 0xc3, 0x4a, 0x83, 0x50, 0x9e, 0x74, 0x35, 0xec,
		0xea, 0x9c, 0x30, 0x44, 0x2f, 0x8b, 0xa1, 0x91, 0xae, 0x31, 0xc9, 0x5a, 0x18, 0x86, 0xd4, 0xa6,
		0x59, 0x0a, 0x8e, 0x78, 0x59, 0x23, 0x2b, 0x61, 0x94, 0x8d, 0xe0, 0x9a, 0xb2, 0x5e, 0xf7, 0xa2,
		0x77, 0x71, 0x76, 0xde, 0xbd, 0x38, 0xdd, 0xe2, 0xdc, 0x59, 0x8a, 0xfd, 0xfb, 0x7b, 0x1e, 0xfb,
		0x9b, 0x37, 0xb6, 0xd9, 0x5e, 0x0e, 0xe0, 0x08, 0x29, 0x12, 0xf3, 0x14, 0x09, 0x0b, 0x31, 0x9a,
		0xb5, 0x42, 0x7c, 0xc8, 0x71, 0x80, 0x48, 0x8e, 0xca, 0x83, 0x41, 0x90, 0x40, 0x90, 0x1a, 0x25,
		0x48, 0x7a, 0x8d, 0x0e, 0x35, 0xf6, 0x7c, 0x4c, 0x1b, 0x1b, 0x82, 0x65, 0x81, 0x65, 0xad, 0x9d,
		0x32, 0xbe, 0x3d, 0x1e, 0xf0, 0x2d, 0xf0, 0x2d, 0xf0, 0xad, 0x9d, 0xe6, 0x5b, 0xd1, 0x7d, 0xe0,
		0x7b, 0x23, 0x0d, 0xae, 0x95, 0x0f, 0x04, 0xcf, 0x02, 0xcf, 0x7a, 0x61, 0x19, 0x5e, 0xb8, 0x7c,
		0xb8, 0xfc, 0x17, 0xed, 0xf2, 0xa3, 0xc9, 0x9d, 0xe7, 0x7f, 0x75, 0xc7, 0xd1, 0x40, 0x27, 0xc8,
		0xae, 0x0c, 0xa7, 0xef, 0x0b, 0x4e, 0x27, 0x15, 0xb0, 0x01, 0xd8, 0x78, 0x69, 0xb0, 0xc1, 0x62,
		0x9c, 0x63, 0x99, 0xd2, 0x4d, 0x32, 0x1b, 0x04, 0x83, 0x82, 0x41, 0x35, 0x6a, 0x50, 0x69, 0x10,
		0xca, 0xce, 0x99, 0x86, 0x3d, 0x9d, 0x21, 0x55, 0x85, 0x54, 0x15, 0xd3, 0x94, 0x9d, 0x9d, 0x9e,
		0x9e, 0xbc, 0xde, 0xdc, 0x14, 0x0b, 0xe2, 0xe4, 0x05, 0xa0, 0x44, 0xc8, 0x99, 0x8e, 0x02, 0xe6,
		0x00, 0x73, 0x1a, 0xc5, 0x9c, 0xfd, 0x28, 0xb6, 0xcc, 0xe2, 0x4f, 0x37, 0x91, 0x9e, 0x4c, 0x13,
		0xba, 0x61, 0x95, 0x07, 0xc3, 0xbe, 0x60, 0x5f, 0x8d, 0xda, 0x97, 0x08, 0xd3, 0x71, 0x9e, 0x3b,
		0xd1, 0x31, 0xb2, 0x1e, 0x61, 0xcc, 0x75, 0x98, 0x8e, 0xb3, 0x87, 0x7c, 0x42, 0x4e, 0x0e, 0x39,
		0xb9, 0x57, 0x9f, 0x93, 0x93, 0x14, 0x93, 0x7d, 0x2e, 0x39, 0xc8, 0x46, 0x01, 0x24, 0x00, 0x12,
		0x8d, 0x82, 0x44, 0x30, 0x10, 0xa1, 0x0c, 0xe4, 0xb7, 0x58, 0x0c, 0x75, 0x40, 0x82, 0x10, 0xae,
		0x39, 0x1f, 0xf2, 0x5b, 0xfd, 0xe4, 0x25, 0xc2, 0xe4, 0xfb, 0xee, 0xf3, 0xa3, 0x6d, 0xee, 0xd4,
		0x60, 0xb8, 0x27, 0xbc, 0x65, 0x76, 0xc5, 0x86, 0x05, 0xa3, 0x1e, 0x29, 0x34, 0x3d, 0x4a, 0xb8,
		0x7e, 0x7a, 0xea, 0x5f, 0x65, 0xcd, 0x6b, 0x38, 0x49, 0x7a, 0xf7, 0x7c, 0xc3, 0x8d, 0x6f, 0xf1,
		0xcc, 0xf6, 0x2b, 0xc3, 0x36, 0x4c, 0xd3, 0x5c, 0xbd, 0x36, 0x5c, 0xa6, 0xea, 0xd7, 0x28, 0xfe,
		0x8c, 0xec, 0xc7, 0xa8, 0xfe, 0x4b, 0xdb, 0x6f, 0x69, 0xfb, 0x2b, 0x1d, 0x3f, 0x65, 0xa6, 0xe6,
		0x57, 0x41, 0xac, 0xa8, 0xdf, 0x25, 0xad, 0xa0, 0x43, 0x66, 0x65, 0x34, 0x0d, 0x3a, 0x3b, 0x80,
		0x4e, 0x40, 0x27, 0x45, 0x55, 0x8b, 0x01, 0xfe, 0x5c, 0x23, 0x34, 0x01, 0x2c, 0x1f, 0xaf, 0xd7,
		0x2c, 0xa7, 0x83, 0x66, 0x39, 0x0d, 0xa8, 0x37, 0x9b, 0x9a, 0x73, 0xa8, 0xbb, 0x66, 0x7a, 0x9a,
		0xb8, 0xde, 0x54, 0x33, 0x28, 0x06, 0xea, 0x1c, 0xf6, 0xaf, 0xd5, 0x18, 0xfa, 0xe1, 0x7f, 0xc3,
		0xd0, 0x88, 0xcd, 0x60, 0x38, 0x0c, 0x87, 0xcd, 0x80, 0xb8, 0x0c, 0x89, 0xdd, 0xa0, 0xd8, 0x0d,
		0x8b, 0xd3, 0xc0, 0xf4, 0x0c, 0x4d, 0xd3, 0xe0, 0xf4, 0x43, 0xb7, 0x7a, 0x36, 0x44, 0xcd, 0xa7,
		0xd7, 0x82, 0xcc, 0xbb, 0x86, 0x3a, 0xef, 0xe8, 0x6c, 0x54, 0x52, 0x9b, 0x1f, 0xac, 0x49, 0x8f,
		0x52, 0x9a, 0x21, 0x2c, 0x3b, 0x4c, 0xad, 0xe6, 0x08, 0x70, 0x57, 0x70, 0x57, 0x70, 0x57, 0x9a,
		0x35, 0x5c, 0xb5, 0xfe, 0xaa, 0xb3, 0xc3, 0xfe, 0x8a, 0xd6, 0x1a, 0x62, 0x4d, 0xda, 0x4b, 0xbd,
		0x51, 0xc4, 0x3a, 0x5f, 0x75, 0x0c, 0x47, 0x05, 0x47, 0x05, 0x47, 0x45, 0xd1, 0x16, 0x72, 0xb3,
		0x8c, 0x3a, 0xdb, 0x39, 0x37, 0x10, 0x61, 0xd6, 0x12, 0x74, 0xfe, 0x63, 0xa6, 0xae, 0x07, 0x5c,
		0x2d, 0x42, 0x99, 0x9c, 0xca, 0x92, 0x38, 0xa6, 0x96, 0xa1, 0x85, 0x3c, 0xc6, 0x66, 0x96, 0x86,
		0xea, 0x5c, 0x5d, 0x02, 0x86, 0x56, 0xa2, 0xb6, 0x97, 0xc0, 0xb4, 0xb9, 0x47, 0x23, 0x6b, 0xd1,
		0xda, 0xce, 0xe8, 0x7e, 0x53, 0x74, 0xc5, 0x6a, 0xc6, 0x88, 0x5c, 0x9d, 0x61, 0xe6, 0x84, 0xac,
		0x54, 0x6b, 0xd4, 0xe0, 0xa6, 0x46, 0x59, 0xc2, 0x4a, 0xc0, 0xb4, 0x9d, 0xe4, 0xeb, 0x53, 0x93,
		0xee, 0x7a, 0x0d, 0x4d, 0x8b, 0xf1, 0x06, 0xbb, 0x91, 0xe5, 0xdd, 0xbf, 0xca, 0x5f, 0xed, 0x3c,
		0x1f, 0xbe, 0x03, 0xad, 0xf1, 0xf5, 0xa8, 0xba, 0x11, 0x45, 0x47, 0x13, 0xfc, 0x6d, 0xd0, 0x65,
		0x34, 0xc1, 0x27, 0xac, 0xf6, 0x48, 0x78, 0x43, 0x5a, 0x75, 0xc8, 0x52, 0x7c, 0xae, 0x41, 0x7c,
		0x9d, 0xcf, 0xb9, 0x97, 0x79, 0xfb, 0x36, 0xf7, 0x10, 0xed, 0x99, 0x7d, 0xed, 0x80, 0x9f, 0x98,
		0x95, 0x56, 0x68, 0xfb, 0x89, 0xd9, 0xf0, 0x86, 0xf7, 0xff, 0xba, 0xf0, 0x13, 0xf0, 0x13, 0xeb,
		0x52, 0x44, 0xba, 0xfb, 0x7f, 0xde, 0x60, 0x1c, 0x84, 0xd4, 0x02, 0xf9, 0x5a, 0x95, 0xa9, 0x48,
		0x43, 0xa6, 0x0a, 0x99, 0x2a, 0x64, 0xaa, 0x08, 0xda, 0xa2, 0x57, 0xf1, 0x5f, 0x8b, 0x35, 0x3d,
		0x03, 0x19, 0xb4, 0x13, 0x01, 0x5c, 0x53, 0xa9, 0x1d, 0x93, 0xf2, 0x24, 0xc8, 0xac, 0xc6, 0xa8,
		0xfc, 0xb1, 0x2a, 0x53, 0xcc, 0xca, 0x90, 0xda, 0x62, 0x9f, 0x76, 0xfd, 0x13, 0x0a, 0x98, 0x6e,
		0x4c, 0x37, 0x1f, 0x26, 0xf4, 0x1b, 0xd9, 0x63, 0x2c, 0xbe, 0x30, 0xc6, 0x98, 0x7f, 0x69, 0x7c,
		0xf5, 0x0c, 0x43, 0x98, 0x02, 0xee, 0x05, 0xee, 0xb5, 0x1d, 0xee, 0xa5, 0x1b, 0xf6, 0x3c, 0x9b,
		0x9e, 0x17, 0xc7, 0x81, 0x88, 0x5d, 0x19, 0x7b, 0x61, 0x12, 0x64, 0x2e, 0x30, 0x31, 0x5f, 0xf0,
		0xc2, 0x1a, 0x57, 0x08, 0x3f, 0xda, 0x89, 0x6f, 0x90, 0x33, 0x35, 0x54, 0x4e, 0x83, 0x65, 0x37,
		0x5c, 0x6e, 0x03, 0xb6, 0x66, 0xc8, 0xd6, 0x0c, 0xda, 0x86, 0x61, 0x9b, 0x19, 0x38, 0x03, 0xeb,
		0xe1, 0x09, 0xb6, 0xea, 0x20, 0x53, 0xeb, 0x4b, 0x42, 0xeb, 0xcc, 0xf3, 0x1d, 0x83, 0x28, 0x9e,
		0x8a, 0x01, 0x1e, 0xca, 0x58, 0x79, 0x30, 0xce, 0x0a, 0x02, 0x66, 0xbf, 0xb6, 0x24, 0x96, 0xb9,
		0xa2, 0xa0, 0x90, 0x6b, 0x61, 0x37, 0x9b, 0xc9, 0x42, 0xaa, 0x4b, 0xc5, 0x58, 0x69, 0xd0, 0xd4,
		0x52, 0xf1, 0x7f, 0xa9, 0x69, 0xa3, 0xab, 0xd7, 0xda, 0x0d, 0x29, 0xfd, 0xad, 0x7a, 0x69, 0xe3,
		0x3c, 0x0e, 0xaf, 0xdb, 0x6a, 0x24, 0xaf, 0x63, 0x2f, 0x02, 0x66, 0x8e, 0x84, 0x79, 0x94, 0xac,
		0xbf, 0x95, 0x6f, 0x61, 0x0e, 0x42, 0xf7, 0x2e, 0x8e, 0xbc, 0x81, 0xfe, 0xd7, 0xdf, 0xd7, 0xf2,
		0x80, 0x65, 0xd1, 0xa0, 0xea, 0xa0, 0xea, 0xa0, 0xea, 0xa0, 0xea, 0xa0, 0xea, 0xa0, 0xea, 0xa0,
		0xea, 0xa0, 0xea, 0xbb, 0x49, 0xd5, 0xb7, 0xc5, 0xc3, 0x06, 0x41, 0xe2, 0x7b, 0xf1, 0x80, 0x97,
		0x81, 0x15, 0x42, 0xc1, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xc0,
		0xbd, 0xc0, 0xbd, 0xc0, 0xbd, 0xca, 0xdc, 0x4b, 0xc4, 0x71, 0x14, 0xf3, 0x32, 0xaf, 0x5c, 0x24,
		0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17,
		0x78, 0x57, 0x99, 0x77, 0x0d, 0xfd, 0xc4, 0x06, 0xf7, 0x2a, 0x89, 0x05, 0xff, 0x02, 0xff, 0x02,
		0xff, 0x02, 0xff, 0x02, 0xff, 0x02, 0xff, 0x02, 0xff, 0x02, 0xff, 0x02, 0xff, 0x2a, 0xf3, 0xaf,
		0x71, 0x3a, 0x92, 0x81, 0x9d, 0xda, 0xaf, 0x05, 0xd1, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0,
		0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0x65, 0x1e, 0x16, 0xf9, 0x52,
		0x30, 0xf3, 0xaf, 0x5c, 0x24, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78,
		0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x57, 0x99, 0x77, 0xb1, 0x67, 0xbd, 0x90, 0xeb, 0x02, 0xe7,
		0x02, 0xe7, 0x02, 0xe7, 0x02, 0xe7, 0x02, 0xe7, 0x02, 0xe7, 0x02, 0xe7, 0x02, 0xe7, 0x5a, 0xe2,
		0x5c, 0x69, 0x68, 0x69, 0xc7, 0xb1, 0x22, 0x18, 0x1c, 0x0c, 0x1c, 0x0c, 0x1c, 0x0c, 0x1c, 0x0c,
		0x1c, 0x0c, 0x1c, 0x0c, 0x1c, 0x0c, 0x1c, 0x0c, 0x1c, 0xac, 0xca, 0xc1, 0xbe, 0x86, 0xd1, 0x5f,
		0xa1, 0x3b, 0x89, 0x23, 0x19, 0x71, 0xb3, 0xb0, 0x8a, 0x68, 0xf0, 0x30, 0xf0, 0x30, 0xf0, 0x30,
		0xf0, 0x30, 0xf0, 0x30, 0xf0, 0x30, 0xf0, 0x30, 0xf0, 0x30, 0xf0, 0xb0, 0x62, 0x59, 0x46, 0x5e,
		0x22, 0x5d, 0x7f, 0x24, 0xbc, 0x98, 0x8f, 0x80, 0x95, 0x64, 0x82, 0x79, 0x81, 0x79, 0x81, 0x79,
		0xed, 0x10, 0xf3, 0x92, 0xc1, 0x58, 0xc8, 0xc0, 0xff, 0x9a, 0xec, 0x1c, 0xf7, 0xfa, 0x57, 0x38,
		0xc3, 0x05, 0x27, 0xf4, 0xc2, 0x28, 0x11, 0x7e, 0x14, 0x1a, 0x77, 0x0c, 0x04, 0xa7, 0x03, 0xa7,
		0x03, 0xa7, 0x03, 0xa7, 0xdb, 0x1e, 0xa7, 0xc3, 0x57, 0x2e, 0x70, 0xd1, 0x04, 0x7c, 0xe5, 0x02,
		0x27, 0xed, 0x8f, 0x52, 0x69, 0xed, 0x3b, 0x17, 0x56, 0xc8, 0x46, 0x18, 0x80, 0x30, 0x00, 0x61,
		0xc0, 0x0e, 0x85, 0x01, 0x48, 0xc0, 0x82, 0xac, 0x83, 0xac, 0x83, 0xac, 0x83, 0xac, 0x73, 0xdc,
		0xdf, 0x94, 0x89, 0xf1, 0x7f, 0xeb, 0x42, 0x45, 0x2a, 0xd8, 0x17, 0xd8, 0x17, 0xd8, 0x17, 0xd8,
		0x17, 0xd8, 0x17, 0xd8, 0x17, 0xd8, 0x17, 0xd8, 0x17, 0xd8, 0x57, 0x85, 0x7d, 0x71, 0xf7, 0xfe,
		0x2d, 0xc9, 0x04, 0xf3, 0x02, 0xf3, 0x02, 0xf3, 0x02, 0xf3, 0x02, 0xf3, 0x02, 0xf3, 0x02, 0xf3,
		0x02, 0xf3, 0x02, 0xf3, 0xaa, 0x30, 0x2f, 0x5b, 0x9d, 0x7f, 0x57, 0xc8, 0x06, 0x13, 0x03, 0x13,
		0x03, 0x13, 0x03, 0x13, 0x03, 0x13, 0x03, 0x13, 0x03, 0x13, 0x03, 0x13, 0x03, 0x13, 0xab, 0x30,
		0x31, 0xee, 0xde, 0xbf, 0x25, 0x99, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e,
		0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x15, 0xe6, 0xc5, 0x9f, 0xf9, 0x42, 0xbe, 0x0b,
		0xac, 0x0b, 0xac, 0x0b, 0xac, 0x0b, 0xac, 0x0b, 0xac, 0x0b, 0xac, 0x0b, 0xac, 0x0b, 0xac, 0x6b,
		0x99, 0x75, 0xd9, 0xe9, 0xff, 0xbb, 0x24, 0x19, 0x2c, 0x0c, 0x2c, 0x0c, 0x2c, 0x0c, 0x2c, 0x0c,
		0x2c, 0x0c, 0x2c, 0x0c, 0x2c, 0x0c, 0x2c, 0xec, 0xa5, 0xb1, 0xb0, 0x56, 0x83, 0x3a, 0x6f, 0xde,
		0x0c, 0xc5, 0x90, 0xe5, 0x2d, 0x37, 0x3f, 0x89, 0x26, 0x22, 0xf6, 0x32, 0xdd, 0xf2, 0x46, 0xa6,
		0x54, 0x8f, 0xbd, 0xd9, 0x09, 0x53, 0x93, 0x13, 0x03, 0x07, 0x85, 0xe9, 0x6e, 0xca, 0xa2, 0xfa,
		0x9a, 0x16, 0xf5, 0x3e, 0x0c, 0x23, 0x39, 0x9d, 0x51, 0x23, 0xe0, 0x70, 0x12, 0xff, 0x41, 0x8c,
		0xbd, 0x89, 0x27, 0x1f, 0xb2, 0xb7, 0x6f, 0x47, 0x13, 0x11, 0xfa, 0xd3, 0x98, 0xc3, 0x0d, 0x32,
		0xb6, 0x35, 0xf4, 0x7c, 0x91, 0xb4, 0x57, 0xfd, 0xda, 0x4e, 0xd2, 0xbb, 0xd2, 0xe7, 0xe5, 0xbf,
		0xda, 0x89, 0xf4, 0xa4, 0x68, 0xe7, 0x84, 0xcd, 0x24, 0x94, 0x72, 0x12, 0x19, 0xa7, 0xbe, 0x0c,
		0x73, 0x0a, 0xf8, 0x61, 0x7e, 0x87, 0xdb, 0x3f, 0x4a, 0xb7, 0xbb, 0xfd, 0x79, 0x7e, 0xa3, 0x56,
		0x33, 0xeb, 0xa6, 0x61, 0x58, 0xce, 0x40, 0x24, 0x7e, 0x1c, 0x4c, 0x8c, 0x16, 0xac, 0xa0, 0xc2,
		0x65, 0x61, 0x9a, 0xfa, 0x63, 0x46, 0x0e, 0x8c, 0xe3, 0x52, 0x8e, 0x78, 0x94, 0x2d, 0x0e, 0xe5,
		0x8a, 0x3f, 0xd9, 0xe3, 0x4e, 0xf6, 0x78, 0x93, 0x33, 0xce, 0x6c, 0x96, 0x41, 0x18, 0xc7, 0x93,
		0x85, 0xb6, 0x24, 0x32, 0x0e, 0xc2, 0x7b, 0x13, 0x75, 0xc9, 0x6d, 0xa7, 0xf3, 0x6e, 0x87, 0xfd,
		0x8d, 0x08, 0xbd, 0xbb, 0x91, 0x18, 0x98, 0xfb, 0x9a, 0xb9, 0x20, 0xcd, 0x75, 0xbb, 0x12, 0x43,
		0x2f, 0x1d, 0x4d, 0xf5, 0x2d, 0x53, 0x5f, 0xb8, 0x2b, 0xb8, 0x2b, 0xb8, 0x2b, 0x8a, 0xb6, 0xdc,
		0x45, 0xd1, 0x48, 0x78, 0x21, 0x87, 0xbf, 0xea, 0xec, 0xb0, 0xbf, 0x0a, 0x86, 0x41, 0x38, 0x10,
		0x8f, 0xe6, 0xfe, 0x6a, 0x2e, 0x08, 0x8e, 0x06, 0x8e, 0x06, 0x8e, 0x86, 0xa0, 0x2d, 0x69, 0x10,
		0xca, 0x93, 0x2e, 0x83, 0x9f, 0x39, 0x37, 0x10, 0xc1, 0x93, 0x4c, 0x67, 0xd8, 0x75, 0xe0, 0x4c,
		0x9e, 0x33, 0x67, 0x62, 0xb9, 0x93, 0xe5, 0x36, 0xd2, 0xac, 0x0c, 0xc9, 0x71, 0xd6, 0xa4, 0xb8,
		0xad, 0x25, 0xe8, 0x75, 0x2f, 0x7a, 0x17, 0x67, 0xe7, 0xdd, 0x8b, 0xd3, 0x1d, 0x5e, 0x8b, 0x2d,
		0xa5, 0x98, 0xfb, 0xaf, 0x3c, 0xc5, 0xcc, 0xdf, 0x5f, 0x1b, 0xa9, 0x66, 0x85, 0x69, 0x47, 0x66,
		0x1f, 0xd3, 0xcd, 0x3c, 0xdd, 0xad, 0x66, 0xdc, 0x9f, 0x56, 0xdc, 0xc4, 0x14, 0x35, 0x99, 0xc4,
		0x4c, 0xa5, 0x1c, 0xcf, 0x31, 0xe2, 0x2e, 0xc4, 0x5d, 0x88, 0xbb, 0x10, 0x77, 0x21, 0xee, 0x42,
		0xdc, 0x85, 0xb8, 0x6b, 0x9f, 0xe2, 0xae, 0x46, 0xe8, 0xca, 0xec, 0xfb, 0x25, 0x1f, 0x72, 0x6f,
		0x63, 0x48, 0x5a, 0xca, 0xc2, 0x40, 0x3b, 0x40, 0x3b, 0x40, 0x3b, 0x08, 0xda, 0xc2, 0xf3, 0x6d,
		0x92, 0x0c, 0x85, 0xd4, 0xdc, 0xdf, 0x1e, 0x09, 0x2e, 0x03, 0x2e, 0xb3, 0x57, 0x5c, 0xc6, 0x5e,
		0x21, 0x35, 0x58, 0x0d, 0xb2, 0xc9, 0xfb, 0x98, 0x6f, 0x43, 0x7a, 0x13, 0xd3, 0x8d, 0x6c, 0xb2,
		0xa1, 0xfb, 0xd3, 0x0a, 0xcf, 0xa2, 0xfb, 0xc0, 0xf7, 0x46, 0x0c, 0xa1, 0x59, 0x2e, 0x08, 0x61,
		0x19, 0xc2, 0x32, 0x84, 0x65, 0x04, 0x6d, 0xd9, 0x7e, 0xb9, 0x1f, 0x18, 0x13, 0x20, 0x1c, 0x10,
		0x8e, 0xe9, 0x06, 0x63, 0x52, 0x79, 0xc3, 0xfc, 0x68, 0x9a, 0x21, 0x5d, 0x9a, 0x4a, 0x01, 0x57,
		0x02, 0x57, 0x02, 0x57, 0x22, 0x68, 0xcb, 0xd6, 0x4f, 0x72, 0x81, 0x2a, 0x01, 0xbb, 0x81, 0xdd,
		0x7b, 0x8b, 0xdd, 0xd9, 0xf4, 0xbb, 0x89, 0xf4, 0x64, 0x9a, 0x98, 0x43, 0x78, 0x59, 0x18, 0x90,
		0x1c, 0x48, 0x0e, 0x24, 0x27, 0x68, 0x8b, 0x08, 0xd3, 0x71, 0xee, 0x0a, 0x39, 0xe0, 0xbc, 0x67,
		0x20, 0xe3, 0x3a, 0x4c, 0xc7, 0xd9, 0x4b, 0x3d, 0x81, 0x12, 0x80, 0x12, 0x80, 0x12, 0x60, 0xba,
		0xc1, 0xc0, 0x6c, 0xdc, 0x87, 0xa8, 0x04, 0xa6, 0xfd, 0x8e, 0x2c, 0xf6, 0x39, 0xa2, 0xad, 0x8c,
		0xfa, 0x2c, 0xa9, 0x5d, 0xa9, 0x38, 0x8f, 0x99, 0xea, 0x53, 0xcf, 0x79, 0x38, 0x1f, 0x83, 0x44,
		0xbe, 0x97, 0x32, 0x26, 0xcd, 0xb8, 0xf3, 0x5b, 0x10, 0x5e, 0x67, 0xd0, 0x11, 0x4e, 0x11, 0x2d,
		0x4c, 0x47, 0xa3, 0x23, 0xc2, 0x60, 0xef, 0x51, 0x7f, 0xf0, 0xa7, 0x78, 0x20, 0x62, 0x31, 0xf8,
		0xe9, 0x5b, 0x3e, 0x94, 0x75, 0x02, 0x35, 0x15, 0xd0, 0x8a, 0xe2, 0x11, 0x5c, 0x95, 0x52, 0x07,
		0x2d, 0x35, 0x15, 0xde, 0xac, 0x90, 0xeb, 0xaf, 0xd8, 0x30, 0xd3, 0xd4, 0x19, 0xe6, 0x9a, 0xd9,
		0xf5, 0x2f, 0x5f, 0xff, 0x4a, 0xab, 0xff, 0xa7, 0xe6, 0x25, 0xe7, 0xf6, 0xb7, 0x26, 0xd1, 0xab,
		0x66, 0x6e, 0x24, 0xf3, 0x22, 0x99, 0x93, 0x9a, 0xf9, 0xd4, 0xbd, 0x9f, 0xe2, 0xe2, 0xe9, 0x2f,
		0xda, 0x1a, 0x9d, 0xaf, 0xd3, 0xf1, 0xd5, 0x2b, 0xbb, 0xbc, 0x6e, 0xd5, 0x4f, 0x16, 0xde, 0x70,
		0xd3, 0x9b, 0x51, 0xdf, 0xa8, 0xfa, 0x50, 0xcf, 0xb7, 0x2e, 0xdd, 0xd6, 0x19, 0x45, 0xbe, 0x37,
		0x72, 0xe3, 0x28, 0x95, 0x62, 0x39, 0x33, 0x51, 0xaa, 0xb1, 0x28, 0x5d, 0xb5, 0xf0, 0xd0, 0xf3,
		0x48, 0x68, 0xe1, 0xe3, 0xba, 0x14, 0xc1, 0xba, 0xd0, 0xbf, 0x1c, 0xd2, 0x8f, 0x22, 0xdf, 0x8d,
		0xe5, 0x8a, 0xa5, 0xd8, 0x14, 0xae, 0x2b, 0x87, 0xe1, 0xca, 0xe1, 0xf5, 0x62, 0xd8, 0x9c, 0x3f,
		0x1a, 0x71, 0x71, 0xaf, 0x82, 0xd5, 0xe6, 0xe6, 0xf8, 0xf3, 0x99, 0xaa, 0x79, 0x9f, 0xe7, 0xae,
		0xd4, 0xd3, 0xeb, 0xea, 0xac, 0x7e, 0xe5, 0x32, 0x28, 0x67, 0x6c, 0x54, 0x32, 0x32, 0x4a, 0xcb,
		0x43, 0xcd, 0xaa, 0x90, 0xb3, 0x26, 0xe4, 0xac, 0x88, 0xea, 0xf2, 0xe9, 0x79, 0x5b, 0x73, 0x6f,
		0xf4, 0x6c, 0x5c, 0x41, 0x78, 0xdf, 0x2e, 0x9b, 0x5a, 0x3b, 0x5f, 0x72, 0x55, 0xe7, 0xb2, 0xc2,
		0x58, 0x66, 0xe2, 0xbc, 0xfb, 0xfb, 0x58, 0xdc, 0x7b, 0xab, 0x6c, 0xbc, 0xc6, 0xd6, 0x4b, 0x23,
		0xa0, 0x70, 0x3b, 0xa5, 0x70, 0x75, 0x7e, 0xa4, 0xb8, 0xa0, 0x58, 0xba, 0xcd, 0x53, 0x31, 0x9f,
		0xdf, 0xe7, 0x21, 0x1b, 0xde, 0x6c, 0xfd, 0xa2, 0x93, 0xf3, 0xc3, 0x94, 0x3c, 0x30, 0x49, 0x19,
		0x74, 0x73, 0xbb, 0xda, 0x39, 0x5c, 0xed, 0x5c, 0x2d, 0x55, 0x59, 0x78, 0x08, 0xf0, 0x26, 0x25,
		0x52, 0x05, 0x27, 0x3d, 0xb0, 0xd2, 0x54, 0x2b, 0xed, 0xed, 0x07, 0x9d, 0xed, 0x06, 0x2d, 0x75,
		0x33, 0xdd, 0x52, 0x30, 0xde, 0x42, 0x30, 0xde, 0x32, 0xd0, 0x55, 0x47, 0x3b, 0xa9, 0x04, 0x55,
		0x35, 0x2d, 0x06, 0x98, 0xf4, 0x3e, 0x66, 0xe8, 0x79, 0xac, 0xb9, 0xaf, 0xa6, 0xbd, 0x9f, 0x66,
		0xb2, 0x8f, 0x66, 0xa4, 0xe0, 0xa6, 0x8a, 0xce, 0xa6, 0xf0, 0x6c, 0x8a, 0xcf, 0x65, 0x00, 0xcd,
		0xe4, 0x28, 0xb5, 0xf7, 0xc3, 0xcc, 0x2b, 0x5a, 0x34, 0x2b, 0x59, 0x08, 0xd9, 0x48, 0x82, 0x9f,
		0x1d, 0x04, 0x89, 0xef, 0xc5, 0x03, 0x03, 0x5b, 0xcf, 0x05, 0x10, 0xe7, 0xbf, 0xd4, 0x87, 0x66,
		0x9a, 0x7e, 0x87, 0x9f, 0x80, 0x9f, 0x78, 0x99, 0x7e, 0x42, 0xff, 0x94, 0x80, 0xe6, 0xe9, 0x00,
		0x3b, 0x8e, 0x62, 0xa2, 0x67, 0x00, 0xc5, 0x34, 0xe8, 0xb1, 0x31, 0x98, 0x39, 0xcc, 0x7c, 0x3f,
		0xcc, 0x3c, 0x98, 0xb8, 0xda, 0x13, 0x5e, 0x18, 0xfa, 0x85, 0xc6, 0xd8, 0xfc, 0xd1, 0xf5, 0xca,
		0x51, 0x18, 0xea, 0x81, 0x82, 0xc9, 0x7f, 0x7a, 0xae, 0x71, 0xb9, 0xd6, 0x33, 0x29, 0x32, 0x90,
		0xf1, 0xd9, 0x93, 0x52, 0xc4, 0xa1, 0x71, 0x3f, 0x09, 0xe7, 0xff, 0xdf, 0xbc, 0xb9, 0x39, 0x76,
		0x2f, 0xfa, 0x3f, 0x6e, 0x3a, 0xee, 0x45, 0x7f, 0xf6, 0x6b, 0x67, 0xfa, 0xcf, 0xec, 0xf7, 0xee,
		0xcd, 0xb1, 0xdb, 0x9b, 0xff, 0x7e, 0x7a, 0x73, 0xec, 0x9e, 0xf6, 0x0f, 0xff, 0xfd, 0xef, 0xb7,
		0x87, 0xdf, 0x4f, 0x9e, 0xe8, 0x03, 0xdb, 0xf9, 0xcd, 0x0e, 0x7f, 0xbc, 0xb9, 0xe9, 0xb8, 0xdd,
		0xfe, 0xfc, 0x8f, 0x93, 0x9b, 0x63, 0xb7, 0xdb, 0x3f, 0x3c, 0xfc, 0x9b, 0xb3, 0x1f, 0x07, 0xf1,
		0x79, 0x74, 0xe9, 0xec, 0x85, 0xea, 0x92, 0xe7, 0x0e, 0xdf, 0xbb, 0xbf, 0xf4, 0xbf, 0x77, 0x8e,
		0x7a, 0x4f, 0x97, 0x87, 0xdf, 0xcf, 0x9f, 0x16, 0x3f, 0xfc, 0xb1, 0xea, 0xb2, 0xce, 0xd1, 0xf9,
		0xd3, 0x65, 0xcd, 0xff, 0x9c, 0x3d, 0x5d, 0x2a, 0xca, 0x38, 0x7d, 0x7a, 0xb3, 0x74, 0x69, 0xf6,
		0x79, 0xb7, 0x6e, 0x40, 0xaf, 0x66, 0xc0, 0x49, 0xdd, 0x80, 0x93, 0x9a, 0x01, 0xb5, 0x8f, 0xd4,
		0xad, 0x19, 0x70, 0xfa, 0xf4, 0x63, 0xe9, 0xfa, 0x37, 0xab, 0x2f, 0x3d, 0x7b, 0x3a, 0xfc, 0x51,
		0xf7, 0x7f, 0xe7, 0x4f, 0x3f, 0x2e, 0x0f, 0x0f, 0xdb, 0x6f, 0x3a, 0x99, 0xc1, 0xbd, 0x9b, 0xd9,
		0x60, 0xa7, 0xbf, 0x64, 0x9a, 0x33, 0x53, 0x6b, 0xde, 0xc0, 0x5a, 0x76, 0xef, 0x63, 0x87, 0x01,
		0x26, 0x42, 0xba, 0xd2, 0xbb, 0xd7, 0xa7, 0x80, 0x73, 0x01, 0xe0, 0x80, 0xe0, 0x80, 0x2f, 0x92,
		0x03, 0x4a, 0xef, 0xde, 0x95, 0x99, 0x94, 0x57, 0x46, 0x01, 0xd1, 0x16, 0xb5, 0xfc, 0x20, 0x68,
		0x25, 0x66, 0xf4, 0x83, 0xb6, 0xa8, 0x3b, 0xb4, 0x16, 0xaf, 0xa1, 0x81, 0x18, 0x83, 0x03, 0x7c,
		0x10, 0x8f, 0x2e, 0xe3, 0x09, 0xd7, 0x5d, 0x08, 0x5b, 0x2a, 0xb4, 0x7d, 0x91, 0xad, 0x77, 0x9f,
		0x0e, 0xff, 0x7e, 0xf8, 0x8f, 0x57, 0x4c, 0x9b, 0x77, 0xbc, 0x5c, 0x79, 0x4d, 0x45, 0xd4, 0x62,
		0x75, 0x52, 0xbb, 0xf8, 0x75, 0x6d, 0xb1, 0x14, 0x7d, 0x06, 0x14, 0xde, 0x9e, 0x9a, 0x54, 0xd6,
		0x4b, 0x26, 0x13, 0x1d, 0x38, 0x8a, 0x23, 0xec, 0x05, 0x04, 0xbb, 0x55, 0x1c, 0x41, 0x26, 0xfc,
		0xcf, 0x25, 0x7e, 0xc2, 0x1b, 0xc6, 0x82, 0x72, 0x66, 0xb6, 0x70, 0xee, 0x04, 0x8a, 0x9b, 0x39,
		0xf3, 0xa9, 0x69, 0xbf, 0x7d, 0x9b, 0xdb, 0x66, 0x3b, 0x5f, 0xb6, 0x06, 0x4d, 0x74, 0x76, 0x6e,
		0x86, 0x6c, 0xa1, 0xb3, 0x61, 0x96, 0xab, 0x97, 0xba, 0x30, 0xd0, 0x17, 0x6d, 0xa0, 0xa8, 0x5e,
		0x42, 0xaa, 0x0a, 0xa9, 0x2a, 0x2b, 0xa9, 0x2a, 0x54, 0x2f, 0xa1, 0x7a, 0x09, 0x7e, 0x02, 0x7e,
		0x62, 0xd3, 0xaa, 0xa3, 0x7a, 0x09, 0xd5, 0x4b, 0x30, 0x73, 0x54, 0x2f, 0xa9, 0x18, 0x3a, 0xaa,
		0x97, 0x50, 0xbd, 0x84, 0xea, 0x25, 0x54, 0x2f, 0xa1, 0x7a, 0x09, 0xd5, 0x4b, 0x06, 0xf7, 0x41,
		0xf5, 0x12, 0x38, 0x20, 0x38, 0x20, 0xaa, 0x97, 0x9a, 0x82, 0x6d, 0x54, 0x2f, 0x95, 0x1f, 0x04,
		0xd5, 0x4b, 0x46, 0x3f, 0xa8, 0x5e, 0xda, 0xa1, 0xb5, 0x40, 0xf5, 0x92, 0x92, 0x03, 0x44, 0xf5,
		0xd2, 0x2b, 0xa3, 0xcd, 0x2f, 0xb2, 0x7a, 0x89, 0xd0, 0xe0, 0xd3, 0x76, 0x77, 0xc4, 0xbc, 0x81,
		0xa0, 0x5a, 0x73, 0x24, 0x52, 0xe7, 0x4e, 0xad, 0x8e, 0x9d, 0x5a, 0x9d, 0x3a, 0x69, 0x1d, 0x3a,
		0x9b, 0xeb, 0x17, 0xa9, 0xa5, 0x1c, 0x8e, 0x52, 0xa1, 0x4b, 0xb9, 0x31, 0xe1, 0xc7, 0x4c, 0xd6,
		0x97, 0xa9, 0xdc, 0xdb, 0xf7, 0x85, 0x98, 0x46, 0xda, 0x4f, 0x5a, 0x6d, 0x88, 0xb6, 0xd4, 0x9c,
		0xcc, 0xa0, 0x35, 0xda, 0xfa, 0xd2, 0x20, 0xa5, 0x52, 0x20, 0xe5, 0x26, 0x68, 0x5d, 0x34, 0x41,
		0xdb, 0x9f, 0xae, 0x7b, 0x6b, 0x5c, 0xb1, 0xba, 0x66, 0x05, 0x7e, 0x5d, 0x57, 0xcd, 0x95, 0x1a,
		0xf6, 0x7c, 0x39, 0xda, 0xed, 0xed, 0x57, 0xbb, 0xbd, 0xd9, 0xea, 0xa9, 0xf7, 0xda, 0xcb, 0xaf,
		0x47, 0xa3, 0x3d, 0x34, 0xda, 0x2b, 0x5f, 0x88, 0x46, 0x7b, 0x28, 0x55, 0x45, 0xa9, 0xaa, 0xe5,
		0xbc, 0x10, 0xf6, 0x25, 0xb0, 0x2f, 0x81, 0x52, 0x55, 0x8d, 0xb9, 0x40, 0x05, 0x1a, 0xac, 0x1c,
		0x56, 0xbe, 0x66, 0xd5, 0x51, 0x81, 0x86, 0x0a, 0x34, 0x54, 0xa0, 0x99, 0xeb, 0x12, 0x2a, 0xd0,
		0x50, 0x81, 0x86, 0x0a, 0x34, 0xb3, 0xfb, 0xa0, 0x02, 0x0d, 0x1c, 0x10, 0x1c, 0x10, 0x15, 0x68,
		0x4d, 0xc1, 0x36, 0x2a, 0xd0, 0xca, 0x0f, 0x82, 0x0a, 0x34, 0xa3, 0x1f, 0x54, 0xa0, 0xed, 0xd0,
		0x5a, 0xa0, 0x02, 0x4d, 0xc9, 0x01, 0xa2, 0x02, 0xed, 0x95, 0xd1, 0xe6, 0xfd, 0xad, 0x40, 0xab,
		0xd4, 0x1a, 0xe4, 0x7f, 0x6d, 0xa1, 0x73, 0x56, 0x28, 0x1e, 0xa5, 0xfb, 0x10, 0x4d, 0x12, 0xfa,
		0x86, 0xe7, 0xf3, 0x50, 0xec, 0x79, 0x62, 0xcf, 0xd3, 0xc0, 0xee, 0xc8, 0x7b, 0x9e, 0x73, 0xcd,
		0xd3, 0x0f, 0x81, 0x0b, 0x09, 0x7a, 0x31, 0x70, 0x07, 0x31, 0x30, 0x62, 0x60, 0x9b, 0x31, 0x30,
		0xd5, 0x24, 0x8a, 0x81, 0xc4, 0xea, 0x95, 0x5a, 0xa5, 0x21, 0x55, 0xb3, 0x30, 0x99, 0x89, 0xb1,
		0xb9, 0x70, 0x98, 0x0d, 0xab, 0xf9, 0x70, 0x99, 0x11, 0xbb, 0x39, 0xb1, 0x9b, 0x15, 0xb7, 0x79,
		0x99, 0xc5, 0x2e, 0x9a, 0x11, 0x88, 0xb6, 0xd9, 0x15, 0x02, 0x82, 0x70, 0x20, 0xcc, 0x43, 0xde,
		0xe7, 0x7d, 0x98, 0xa9, 0x38, 0xc3, 0x15, 0xe1, 0x89, 0x9b, 0x8d, 0x8d, 0x92, 0xd3, 0x38, 0xad,
		0x18, 0x29, 0xb7, 0xb1, 0x5a, 0x33, 0x5a, 0x6b, 0xc6, 0x6b, 0xcb, 0x88, 0x99, 0xd2, 0x18, 0x86,
		0x7a, 0xa7, 0x9d, 0x57, 0xae, 0xd5, 0x3a, 0xe3, 0x54, 0xc3, 0x72, 0xca, 0x61, 0x4b, 0x89, 0x1e,
		0x83, 0xb9, 0x75, 0xc6, 0x42, 0xc6, 0x0a, 0x75, 0xd7, 0xca, 0xb3, 0x9a, 0xcb, 0x83, 0xd7, 0x83,
		0xd7, 0x83, 0xd7, 0xdb, 0x41, 0xaf, 0x67, 0xbc, 0xcb, 0xb4, 0x68, 0xa3, 0xe7, 0x0c, 0xa2, 0x78,
		0x76, 0x9d, 0xe6, 0x3f, 0x3c, 0x26, 0x70, 0xc0, 0xbd, 0x0b, 0xc5, 0xec, 0xdc, 0x96, 0xc4, 0x32,
		0xef, 0x4a, 0x15, 0x72, 0x2d, 0xec, 0x88, 0x30, 0x99, 0x47, 0x75, 0xa9, 0x18, 0x77, 0xab, 0x9a,
		0x5a, 0x2a, 0xee, 0xdd, 0xab, 0x46, 0xd6, 0xac, 0xb5, 0x1b, 0x52, 0xfa, 0x7b, 0x48, 0xb6, 0xb4,
		0x53, 0x9f, 0xb5, 0xee, 0x5c, 0x33, 0x15, 0x0a, 0xc2, 0x05, 0xc2, 0x05, 0xc2, 0xd5, 0x0c, 0xe1,
		0x0a, 0xe9, 0xe7, 0xb2, 0xd6, 0x46, 0x99, 0x17, 0x0c, 0xb2, 0x8c, 0x6a, 0x9d, 0x2c, 0xf2, 0xad,
		0xd2, 0x39, 0x00, 0x6f, 0x30, 0x88, 0x45, 0x92, 0x38, 0x8c, 0x14, 0x81, 0x71, 0x06, 0xed, 0xcc,
		0x24, 0xff, 0x8c, 0xae, 0x98, 0xd9, 0xff, 0xf4, 0x2c, 0xcc, 0xed, 0x72, 0x2e, 0xc4, 0x82, 0x6c,
		0xae, 0xb2, 0x8c, 0xda, 0x1b, 0x34, 0x7a, 0x62, 0xe1, 0x6f, 0x0e, 0xfb, 0x4b, 0xf4, 0x59, 0x25,
		0x3e, 0x1d, 0xed, 0x91, 0x52, 0x9f, 0x41, 0xa9, 0xd7, 0x2b, 0x35, 0x8e, 0x4e, 0x34, 0x7f, 0x74,
		0x62, 0xf7, 0x4d, 0xbc, 0xb5, 0x5b, 0xcf, 0xc5, 0xe4, 0x72, 0x2c, 0x30, 0x92, 0x59, 0xf9, 0xd7,
		0x40, 0x0c, 0x83, 0x50, 0x0c, 0x5c, 0xa6, 0xb0, 0x6b, 0xa5, 0x93, 0x61, 0xcc, 0x05, 0x38, 0x1f,
		0x06, 0x22, 0x94, 0x81, 0xfc, 0xf6, 0x93, 0x97, 0x08, 0xfe, 0xec, 0xc8, 0x7c, 0x6e, 0x3e, 0x7e,
		0xfa, 0xf9, 0xfd, 0xc7, 0xdb, 0xab, 0xeb, 0x5f, 0x3e, 0xfc, 0x7e, 0x7d, 0x75, 0xfb, 0xfb, 0xf5,
		0xff, 0xfd, 0x79, 0xfb, 0xeb, 0xa7, 0xcf, 0x8e, 0x8d, 0xa4, 0x49, 0x62, 0xc5, 0x4f, 0x7e, 0xb7,
		0xe3, 0x79, 0xe7, 0xf3, 0x73, 0xf5, 0xe5, 0xd3, 0x67, 0x7e, 0x4f, 0xf0, 0x74, 0xb4, 0x6f, 0xf3,
		0x30, 0xd3, 0x93, 0x8f, 0x1f, 0x7e, 0xff, 0xa7, 0x85, 0xd9, 0x68, 0xed, 0xa6, 0x97, 0x45, 0xba,
		0x4c, 0x3f, 0x5d, 0x16, 0x0b, 0x3f, 0x8d, 0x19, 0x1c, 0x57, 0xa1, 0x80, 0x73, 0x81, 0x86, 0x49,
		0x02, 0xc3, 0x2f, 0xfe, 0x42, 0xf2, 0x0d, 0xc9, 0x37, 0x24, 0xdf, 0x1a, 0x49, 0xbe, 0xe9, 0x7f,
		0x71, 0x59, 0x2d, 0x3d, 0xeb, 0x6c, 0xcb, 0x91, 0x36, 0x5a, 0x4b, 0xa7, 0x79, 0x9a, 0x62, 0x49,
		0x0e, 0xdf, 0xe9, 0x8a, 0xe2, 0xc0, 0x42, 0xf1, 0x1b, 0xe9, 0xc0, 0x85, 0xf9, 0x74, 0x6a, 0x4c,
		0xa5, 0x61, 0x45, 0x21, 0x4b, 0x25, 0xa1, 0x21, 0xba, 0xa0, 0x9c, 0xb7, 0x31, 0xd4, 0x40, 0x39,
		0x2f, 0x2f, 0x1a, 0x18, 0x7c, 0x51, 0x7b, 0xad, 0xf7, 0x3f, 0x37, 0x3b, 0x55, 0xb8, 0xf0, 0x45,
		0xee, 0x33, 0xbb, 0xde, 0x69, 0xff, 0x25, 0x45, 0x3c, 0xf4, 0x7c, 0xe1, 0x66, 0xf3, 0xc7, 0xe0,
		0xc7, 0xca, 0xe2, 0x70, 0x3c, 0x21, 0x33, 0xca, 0x60, 0x08, 0x5f, 0xa6, 0xe1, 0xcb, 0x82, 0xe1,
		0xab, 0x39, 0x96, 0x60, 0x78, 0x2a, 0x68, 0x49, 0xe9, 0x8c, 0x4e, 0x07, 0x31, 0x99, 0xe1, 0xde,
		0x04, 0xad, 0x46, 0xe6, 0x89, 0x80, 0xd5, 0x86, 0xf9, 0xee, 0x46, 0xb0, 0x6a, 0x6a, 0xd6, 0xcb,
		0x18, 0xcb, 0xa7, 0x1e, 0x4b, 0x78, 0xcb, 0xa5, 0x1e, 0xcc, 0x5d, 0x3c, 0xb8, 0x8c, 0xdf, 0x86,
		0x13, 0xb0, 0xe6, 0x0c, 0x6c, 0x39, 0x05, 0xeb, 0xce, 0xc1, 0xba, 0x93, 0xb0, 0xe9, 0x2c, 0x78,
		0x9c, 0x06, 0x93, 0xf3, 0xe0, 0xcf, 0x78, 0x59, 0x88, 0x79, 0x6c, 0xc4, 0x40, 0xb5, 0x31, 0x51,
		0x7b, 0xba, 0xcc, 0x97, 0x85, 0xc3, 0x4a, 0x16, 0x3f, 0xc8, 0xff, 0x9e, 0x7e, 0x33, 0xcf, 0x8e,
		0x6c, 0xa9, 0x70, 0xf4, 0x58, 0x4a, 0xd2, 0x3b, 0x8b, 0xfe, 0xbf, 0x22, 0x1d, 0x10, 0x00, 0x08,
		0x00, 0x04, 0x00, 0x02, 0xf6, 0x16, 0x02, 0x6e, 0x9e, 0x21, 0xe0, 0x7f, 0xfc, 0x34, 0x8e, 0x45,
		0x28, 0xdf, 0x1c, 0xb6, 0xdf, 0xbe, 0x6d, 0x17, 0x57, 0xf4, 0xf3, 0x21, 0x65, 0xbf, 0x97, 0xac,
		0xf8, 0xac, 0x90, 0xac, 0x9d, 0x7e, 0xb3, 0x80, 0x26, 0x5b, 0x8d, 0x66, 0xae, 0x1f, 0x25, 0x4f,
		0x69, 0x0d, 0x7f, 0x80, 0x1b, 0xf9, 0xae, 0x78, 0x94, 0x97, 0x52, 0x8c, 0xc4, 0x58, 0xc8, 0xf8,
		0x9b, 0x1b, 0x85, 0xae, 0xff, 0x30, 0x3d, 0x31, 0x68, 0x25, 0xe8, 0x9d, 0x6e, 0xe9, 0x5b, 0x88,
		0x7a, 0xb7, 0x1d, 0xf0, 0xf6, 0x4d, 0x13, 0x70, 0x3c, 0x5b, 0x82, 0xcf, 0xd4, 0xc7, 0xe6, 0xd6,
		0x60, 0x25, 0xd3, 0x6c, 0xb4, 0x51, 0x68, 0x3e, 0xf9, 0x26, 0x25, 0x30, 0xeb, 0xbf, 0x5d, 0x91,
		0x4e, 0x08, 0xa5, 0xda, 0xf7, 0x60, 0x36, 0x9a, 0xf9, 0xeb, 0x22, 0xf3, 0x87, 0xcc, 0x1f, 0x32,
		0x7f, 0xc8, 0xfc, 0x21, 0xec, 0x43, 0xd8, 0x87, 0xb0, 0x0f, 0x61, 0x1f, 0x32, 0x7f, 0xc8, 0xfc,
		0x01, 0x02, 0x00, 0x01, 0x80, 0x00, 0x40, 0x00, 0x32, 0x7f, 0x96, 0xa3, 0x99, 0x3d, 0x4e, 0xeb,
		0xcc, 0xb2, 0x19, 0xa8, 0xc7, 0xdf, 0xc9, 0xd5, 0x71, 0x8c, 0xb2, 0x5e, 0x71, 0xea, 0xcb, 0x70,
		0x7e, 0x6c, 0x30, 0x7b, 0x96, 0x2f, 0xd3, 0x9b, 0xdf, 0xfe, 0x31, 0xbd, 0xf9, 0xed, 0xef, 0xe2,
		0x51, 0xfe, 0x1a, 0x4d, 0x6e, 0x3f, 0xcc, 0xef, 0xf8, 0x45, 0x0c, 0x77, 0xb9, 0x8e, 0xd6, 0x2c,
		0x8d, 0xc7, 0x92, 0xbe, 0x63, 0xab, 0x9b, 0xed, 0xe2, 0x1c, 0x80, 0x5d, 0xca, 0x85, 0x73, 0x00,
		0xac, 0xe9, 0x36, 0xb4, 0xf5, 0x6e, 0x36, 0x76, 0xc2, 0x91, 0x4f, 0x1c, 0xf9, 0x6c, 0x3e, 0x06,
		0x42, 0x5b, 0xef, 0xca, 0xb3, 0xa3, 0xad, 0x37, 0xbc, 0x1e, 0xbc, 0xde, 0xeb, 0xf1, 0x7a, 0x68,
		0xeb, 0x4d, 0x79, 0x30, 0xb4, 0xf5, 0x46, 0x5b, 0x6f, 0xb4, 0xf5, 0x66, 0x4e, 0x63, 0x1e, 0xa0,
		0xad, 0x37, 0xda, 0x7a, 0x83, 0x70, 0x81, 0x70, 0xbd, 0x0e, 0xc2, 0x85, 0xb6, 0xde, 0x1a, 0xa9,
		0x33, 0xb4, 0xf5, 0xe6, 0xfd, 0x41, 0x5b, 0x6f, 0x95, 0x1b, 0xa0, 0xad, 0xb7, 0x25, 0x76, 0x7e,
		0x80, 0xb6, 0xde, 0xdb, 0x56, 0x6a, 0xb4, 0xf5, 0x46, 0x5b, 0x6f, 0x4b, 0xc1, 0xdc, 0x01, 0xda,
		0x7a, 0x33, 0x3a, 0x19, 0xb4, 0xf5, 0x5e, 0x93, 0x34, 0x41, 0x5b, 0x6f, 0x5b, 0xf0, 0x7c, 0x80,
		0xb6, 0xde, 0x36, 0xbc, 0x2c, 0xd2, 0x65, 0x68, 0xeb, 0x8d, 0xe4, 0x1b, 0x92, 0x6f, 0x48, 0xbe,
		0x6d, 0x23, 0xf9, 0x86, 0xb6, 0xde, 0x2f, 0xb9, 0x8c, 0xd8, 0xa0, 0xac, 0x5b, 0xa3, 0x9a, 0xb7,
		0x65, 0x71, 0xde, 0x33, 0x0f, 0xa4, 0x5b, 0x32, 0xe8, 0x7c, 0x0c, 0x12, 0xf9, 0x5e, 0x4a, 0xbd,
		0xe2, 0x47, 0xe7, 0xb7, 0x20, 0xbc, 0x1e, 0x89, 0xcc, 0x97, 0x64, 0xdc, 0x3a, 0x4c, 0x47, 0x23,
		0x8d, 0xb2, 0xe5, 0xdf, 0xbc, 0x47, 0x73, 0x21, 0x9f, 0xe2, 0x81, 0x88, 0xc5, 0xe0, 0xa7, 0x6f,
		0xb9, 0x08, 0xab, 0x13, 0x6e, 0xa8, 0xe0, 0x56, 0x15, 0xdb, 0xd1, 0x2a, 0x1c, 0x57, 0xab, 0x84,
		0xa7, 0x99, 0x8b, 0xba, 0xd2, 0xab, 0x5d, 0xa9, 0xb8, 0x4a, 0xba, 0xab, 0x63, 0x63, 0x55, 0xd4,
		0x26, 0x6c, 0xf3, 0xeb, 0x2b, 0xbc, 0xfa, 0x9c, 0x7c, 0xa8, 0xbe, 0x72, 0x01, 0x73, 0x24, 0xd2,
		0x42, 0xa4, 0x9b, 0x64, 0x5a, 0xa9, 0x43, 0x1f, 0x8d, 0x68, 0xa2, 0x2e, 0x1d, 0x34, 0xa6, 0x7d,
		0xc6, 0xf4, 0xce, 0x94, 0xc6, 0xf1, 0x1a, 0x1d, 0x99, 0x7e, 0x19, 0x1c, 0x23, 0xd4, 0x39, 0x26,
		0xb8, 0xa2, 0x2f, 0x7e, 0xbe, 0x6c, 0x0d, 0x9a, 0x28, 0xed, 0x80, 0x8e, 0xd6, 0x81, 0x1c, 0xe2,
		0x01, 0x1c, 0xf2, 0x81, 0x1b, 0x18, 0xe8, 0x9e, 0x1a, 0x28, 0xf5, 0x80, 0x8b, 0x33, 0x10, 0x89,
		0x1f, 0x07, 0x13, 0x2d, 0x96, 0x53, 0xac, 0x78, 0x59, 0x08, 0x95, 0xd5, 0x6a, 0x25, 0x36, 0xb4,
		0x13, 0x19, 0x26, 0x89, 0x0b, 0x96, 0x44, 0x85, 0x69, 0x62, 0x82, 0x2d, 0x11, 0xc1, 0x96, 0x78,
		0xe0, 0x4a, 0x34, 0xd8, 0x8d, 0x9e, 0xb4, 0x13, 0x07, 0xe6, 0x87, 0x41, 0x34, 0x0f, 0x7f, 0x10,
		0x88, 0x35, 0xc1, 0xcf, 0x4e, 0xf4, 0xf4, 0x5f, 0x8f, 0x47, 0xc2, 0xca, 0x61, 0xe5, 0x7b, 0x66,
		0xe5, 0xc1, 0xc4, 0xd5, 0x9e, 0x70, 0x93, 0xea, 0x31, 0xb3, 0x2a, 0x31, 0x86, 0x63, 0xd0, 0xd3,
		0xaa, 0x2f, 0xe3, 0xd4, 0x36, 0x47, 0x1d, 0x0c, 0x5b, 0xbd, 0x4b, 0xb3, 0xc5, 0x5a, 0xed, 0xfc,
		0x66, 0x87, 0x3f, 0xde, 0xdc, 0x74, 0xdc, 0x6e, 0x7f, 0xfe, 0xc7, 0xc9, 0xcd, 0xb1, 0xdb, 0xed,
		0x1b, 0x55, 0x7a, 0xf4, 0x9b, 0x4c, 0xec, 0xf2, 0xe8, 0xd2, 0xd9, 0x0b, 0xd5, 0x25, 0xd4, 0x48,
		0x35, 0x5f, 0x23, 0xd5, 0x7e, 0xd3, 0xc9, 0x0c, 0xee, 0xdd, 0xcc, 0x06, 0x3b, 0xfd, 0x25, 0xd3,
		0x9c, 0x99, 0x5a, 0xf3, 0x06, 0xd6, 0xb2, 0x7b, 0x1f, 0x3b, 0x0c, 0x30, 0x11, 0xd2, 0x95, 0xde,
		0xbd, 0x3e, 0x05, 0x9c, 0x0b, 0x00, 0x07, 0x04, 0x07, 0x7c, 0x91, 0x1c, 0x50, 0x7a, 0xf7, 0xae,
		0xcc, 0xa4, 0xbc, 0x32, 0x0a, 0x68, 0x7c, 0xf0, 0x97, 0xe1, 0xc0, 0x2f, 0xd3, 0x41, 0x5f, 0x86,
		0x02, 0x01, 0xce, 0x83, 0xbd, 0xdc, 0xfd, 0x2e, 0x99, 0x0f, 0xf2, 0xda, 0x38, 0x0c, 0xca, 0xd1,
		0xd7, 0x94, 0xf3, 0xc0, 0xae, 0xad, 0x25, 0xe0, 0x3e, 0xa0, 0x6b, 0x65, 0x2d, 0xb6, 0x54, 0x90,
		0xb2, 0x6f, 0x71, 0xcb, 0x83, 0x78, 0x74, 0x8d, 0x7b, 0xbe, 0xec, 0x56, 0xd8, 0x52, 0xa1, 0xed,
		0x8b, 0x6c, 0xbd, 0xfb, 0x74, 0xf8, 0xf7, 0xc3, 0x7f, 0xbc, 0x62, 0xda, 0xfc, 0xc2, 0x2a, 0x12,
		0x08, 0xd5, 0x4e, 0x0a, 0x5b, 0x9d, 0x2d, 0x83, 0x49, 0x99, 0x57, 0x2b, 0x29, 0x11, 0x57, 0x5a,
		0x79, 0x92, 0x56, 0x39, 0x92, 0x56, 0xf9, 0x11, 0xad, 0xdc, 0x68, 0xd3, 0x8c, 0x10, 0xd5, 0x83,
		0x4f, 0x2d, 0x1c, 0xa5, 0x3d, 0xeb, 0xf5, 0xb5, 0x41, 0xeb, 0x95, 0xaa, 0x5e, 0x55, 0x56, 0xff,
		0x4f, 0xcd, 0x54, 0xa9, 0x4e, 0x11, 0xc3, 0xd4, 0xac, 0x7e, 0x9f, 0xe5, 0xa7, 0xad, 0x7e, 0xb2,
		0xf0, 0xdc, 0x9b, 0x9e, 0x57, 0xeb, 0x39, 0x57, 0xac, 0x56, 0xfd, 0xea, 0x54, 0x5f, 0xe3, 0xf9,
		0x61, 0x67, 0xbf, 0xe5, 0x8f, 0x5b, 0xf7, 0x98, 0x4e, 0x90, 0xfc, 0x1c, 0x8d, 0x27, 0xb1, 0x48,
		0x12, 0x31, 0xf8, 0x63, 0xfa, 0xa8, 0x4b, 0xe1, 0xa1, 0x13, 0x24, 0xbf, 0x78, 0x5f, 0xc5, 0x97,
		0x28, 0x9a, 0x87, 0x8e, 0x33, 0xc9, 0xad, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00,
		0x00, 0xff, 0xff, 0x0e, 0x00, 0xcc, 0xac, 0xa5, 0x7e, 0x03, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/interfaces/interface/config/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/local-routes/static-routes/static/next-hops/next-hop/config/next-hop": []reflect.Type{
		reflect.TypeOf((E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP)(0)),
	},
}

