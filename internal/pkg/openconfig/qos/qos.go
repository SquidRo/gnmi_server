/*
Package qos is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/sgk/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- public/release/models/qos/openconfig-qos-elements.yang
	- public/release/models/qos/openconfig-qos-interfaces.yang
	- public/release/models/qos/openconfig-qos-types.yang
	- public/release/models/qos/openconfig-qos.yang
Imported modules were sourced from:
	- public/release/models/acl/...
	- public/release/models/types/...
	- public/release/models/...
	- public/third_party/ietf/...
*/
package qos

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       nil,
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Component represents the /openconfig-platform/components/component YANG schema element.
type Component struct {
	AllocatedPower    *uint32                                         `path:"state/allocated-power" module:"openconfig-platform"`
	Backplane         *Component_Backplane                            `path:"backplane" module:"openconfig-platform"`
	Chassis           *Component_Chassis                              `path:"chassis" module:"openconfig-platform"`
	Cpu               *Component_Cpu                                  `path:"cpu" module:"openconfig-platform"`
	Description       *string                                         `path:"state/description" module:"openconfig-platform"`
	Empty             *bool                                           `path:"state/empty" module:"openconfig-platform"`
	Fabric            *Component_Fabric                               `path:"fabric" module:"openconfig-platform"`
	Fan               *Component_Fan                                  `path:"fan" module:"openconfig-platform"`
	FirmwareVersion   *string                                         `path:"state/firmware-version" module:"openconfig-platform"`
	HardwareVersion   *string                                         `path:"state/hardware-version" module:"openconfig-platform"`
	Id                *string                                         `path:"state/id" module:"openconfig-platform"`
	IntegratedCircuit *Component_IntegratedCircuit                    `path:"integrated-circuit" module:"openconfig-platform"`
	Location          *string                                         `path:"state/location" module:"openconfig-platform"`
	Memory            *Component_Memory                               `path:"state/memory" module:"openconfig-platform"`
	MfgDate           *string                                         `path:"state/mfg-date" module:"openconfig-platform"`
	MfgName           *string                                         `path:"state/mfg-name" module:"openconfig-platform"`
	Name              *string                                         `path:"config/name|name" module:"openconfig-platform"`
	OperStatus        E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS `path:"state/oper-status" module:"openconfig-platform"`
	Parent            *string                                         `path:"state/parent" module:"openconfig-platform"`
	PartNo            *string                                         `path:"state/part-no" module:"openconfig-platform"`
	Port              *Component_Port                                 `path:"port" module:"openconfig-platform"`
	PowerSupply       *Component_PowerSupply                          `path:"power-supply" module:"openconfig-platform"`
	Property          map[string]*Component_Property                  `path:"properties/property" module:"openconfig-platform"`
	Removable         *bool                                           `path:"state/removable" module:"openconfig-platform"`
	SerialNo          *string                                         `path:"state/serial-no" module:"openconfig-platform"`
	SoftwareVersion   *string                                         `path:"state/software-version" module:"openconfig-platform"`
	Storage           *Component_Storage                              `path:"storage" module:"openconfig-platform"`
	Subcomponent      map[string]*Component_Subcomponent              `path:"subcomponents/subcomponent" module:"openconfig-platform"`
	Temperature       *Component_Temperature                          `path:"state/temperature" module:"openconfig-platform"`
	Type              Component_Type_Union                            `path:"state/type" module:"openconfig-platform"`
	UsedPower         *uint32                                         `path:"state/used-power" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewProperty(Name string) (*Component_Property, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &Component_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// GetOrCreateProperty retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateProperty(Name string) (*Component_Property){

	key := Name

	if v, ok := t.Property[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProperty(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProperty got unexpected error: %v", err))
	}
	return v
}

// GetProperty retrieves the value with the specified key from
// the Property map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetProperty(Name string) (*Component_Property){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Property[key]; ok {
    return lm
  }
  return nil
}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewSubcomponent(Name string) (*Component_Subcomponent, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &Component_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateSubcomponent(Name string) (*Component_Subcomponent){

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetSubcomponent(Name string) (*Component_Subcomponent){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Subcomponent[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateBackplane() *Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateChassis() *Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &Component_Chassis{}
	return t.Chassis
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateCpu() *Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFabric() *Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFan() *Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateIntegratedCircuit() *Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateMemory() *Component_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &Component_Memory{}
	return t.Memory
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePort() *Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePowerSupply() *Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateStorage() *Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &Component_Storage{}
	return t.Storage
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateTemperature() *Component_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &Component_Temperature{}
	return t.Temperature
}

// GetBackplane returns the value of the Backplane struct pointer
// from Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetBackplane() *Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetChassis() *Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetCpu() *Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFabric() *Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFan() *Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetIntegratedCircuit() *Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from Component. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetMemory() *Component_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPort() *Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPowerSupply() *Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetStorage() *Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from Component. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetTemperature() *Component_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// ΛListKeyMap returns the keys of the Component struct, which is a YANG list entry.
func (t *Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
type Component_Type_Union interface {
	Is_Component_Type_Union()
}

// Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT value.
type Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
}

// Is_Component_Type_Union ensures that Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the Component_Type_Union interface.
func (*Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Is_Component_Type_Union() {}

// Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT value.
type Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
}

// Is_Component_Type_Union ensures that Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the Component_Type_Union interface.
func (*Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Is_Component_Type_Union() {}

// To_Component_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Component_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Component) To_Component_Type_Union(i interface{}) (Component_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT:
		return &Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT{v}, nil
	case E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT:
		return &Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Component_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
	}
}


// Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_Backplane struct {
}

// IsYANGGoStruct ensures that Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Backplane) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_Chassis struct {
}

// IsYANGGoStruct ensures that Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_Cpu struct {
}

// IsYANGGoStruct ensures that Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Cpu) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_Fabric struct {
}

// IsYANGGoStruct ensures that Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fabric) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_Fan struct {
}

// IsYANGGoStruct ensures that Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fan) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuit struct {
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_Memory struct {
	Available	*uint64	`path:"available" module:"openconfig-platform"`
	Utilized	*uint64	`path:"utilized" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type Component_Port struct {
}

// IsYANGGoStruct ensures that Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupply struct {
}

// IsYANGGoStruct ensures that Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_PowerSupply) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_Property struct {
	Configurable *bool                          `path:"state/configurable" module:"openconfig-platform"`
	Name         *string                        `path:"config/name|name" module:"openconfig-platform"`
	Value        Component_Property_Value_Union `path:"config/value" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Property) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Component_Property struct, which is a YANG list entry.
func (t *Component_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Property) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Property) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Property_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
type Component_Property_Value_Union interface {
	Is_Component_Property_Value_Union()
}

// Component_Property_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a bool value.
type Component_Property_Value_Union_Bool struct {
	Bool	bool
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Bool
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Bool) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a float64 value.
type Component_Property_Value_Union_Float64 struct {
	Float64	float64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Float64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Float64) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a int64 value.
type Component_Property_Value_Union_Int64 struct {
	Int64	int64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Int64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Int64) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_String is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a string value.
type Component_Property_Value_Union_String struct {
	String	string
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_String
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_String) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a uint64 value.
type Component_Property_Value_Union_Uint64 struct {
	Uint64	uint64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Uint64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Uint64) Is_Component_Property_Value_Union() {}

// To_Component_Property_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Component_Property_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Component_Property) To_Component_Property_Value_Union(i interface{}) (Component_Property_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &Component_Property_Value_Union_Bool{v}, nil
	case float64:
		return &Component_Property_Value_Union_Float64{v}, nil
	case int64:
		return &Component_Property_Value_Union_Int64{v}, nil
	case string:
		return &Component_Property_Value_Union_String{v}, nil
	case uint64:
		return &Component_Property_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Component_Property_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}


// Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_Storage struct {
}

// IsYANGGoStruct ensures that Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Storage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_Subcomponent struct {
	Name	*string	`path:"config/name|name" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Subcomponent) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Component_Subcomponent struct, which is a YANG list entry.
func (t *Component_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Component_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_Temperature struct {
	AlarmSeverity  E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	AlarmStatus    *bool                                            `path:"alarm-status" module:"openconfig-platform"`
	AlarmThreshold *uint32                                          `path:"alarm-threshold" module:"openconfig-platform"`
	Avg            *float64                                         `path:"avg" module:"openconfig-platform"`
	Instant        *float64                                         `path:"instant" module:"openconfig-platform"`
	Interval       *uint64                                          `path:"interval" module:"openconfig-platform"`
	Max            *float64                                         `path:"max" module:"openconfig-platform"`
	MaxTime        *uint64                                          `path:"max-time" module:"openconfig-platform"`
	Min            *float64                                         `path:"min" module:"openconfig-platform"`
	MinTime        *uint64                                          `path:"min-time" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that Component_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Temperature) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	AdminStatus  E_Interface_AdminStatus            `path:"state/admin-status" module:"openconfig-interfaces"`
	Counters     *Interface_Counters                `path:"state/counters" module:"openconfig-interfaces"`
	Description  *string                            `path:"config/description" module:"openconfig-interfaces"`
	Enabled      *bool                              `path:"config/enabled" module:"openconfig-interfaces"`
	HoldTime     *Interface_HoldTime                `path:"hold-time" module:"openconfig-interfaces"`
	Ifindex      *uint32                            `path:"state/ifindex" module:"openconfig-interfaces"`
	LastChange   *uint64                            `path:"state/last-change" module:"openconfig-interfaces"`
	Logical      *bool                              `path:"state/logical" module:"openconfig-interfaces"`
	LoopbackMode *bool                              `path:"config/loopback-mode" module:"openconfig-interfaces"`
	Mtu          *uint16                            `path:"config/mtu" module:"openconfig-interfaces"`
	Name         *string                            `path:"config/name|name" module:"openconfig-interfaces"`
	OperStatus   E_Interface_OperStatus             `path:"state/oper-status" module:"openconfig-interfaces"`
	Subinterface map[uint32]*Interface_Subinterface `path:"subinterfaces/subinterface" module:"openconfig-interfaces"`
	Type         E_IETFInterfaces_InterfaceType     `path:"config/type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) (*Interface_Subinterface){

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) (*Interface_Subinterface){

	if t == nil {
		return nil
	}

  key := Index

  if lm, ok := t.Subinterface[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	Down	*uint32	`path:"config/down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"config/up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	AdminStatus E_Interface_AdminStatus          `path:"state/admin-status" module:"openconfig-interfaces"`
	Counters    *Interface_Subinterface_Counters `path:"state/counters" module:"openconfig-interfaces"`
	Description *string                          `path:"config/description" module:"openconfig-interfaces"`
	Enabled     *bool                            `path:"config/enabled" module:"openconfig-interfaces"`
	Ifindex     *uint32                          `path:"state/ifindex" module:"openconfig-interfaces"`
	Index       *uint32                          `path:"config/index|index" module:"openconfig-interfaces"`
	LastChange  *uint64                          `path:"state/last-change" module:"openconfig-interfaces"`
	Logical     *bool                            `path:"state/logical" module:"openconfig-interfaces"`
	Name        *string                          `path:"state/name" module:"openconfig-interfaces"`
	OperStatus  E_Interface_OperStatus           `path:"state/oper-status" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateCounters() *Interface_Subinterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetCounters() *Interface_Subinterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface_Subinterface struct, which is a YANG list entry.
func (t *Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos represents the /openconfig-qos/qos YANG schema element.
type Qos struct {
	Classifier	map[string]*Qos_Classifier           `path:"classifiers/classifier" module:"openconfig-qos"`
	ForwardingGroup	map[string]*Qos_ForwardingGroup `path:"forwarding-groups/forwarding-group" module:"openconfig-qos"`
	Interface	map[string]*Qos_Interface             `path:"interfaces/interface" module:"openconfig-qos"`
	Queue	map[string]*Qos_Queue                     `path:"queues/queue" module:"openconfig-qos"`
	SchedulerPolicy	map[string]*Qos_SchedulerPolicy `path:"scheduler-policies/scheduler-policy" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewClassifier(Name string) (*Qos_Classifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Classifier{
		Name: &Name,
	}

	return t.Classifier[key], nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateClassifier(Name string) (*Qos_Classifier){

	key := Name

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetClassifier(Name string) (*Qos_Classifier){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Classifier[key]; ok {
    return lm
  }
  return nil
}

// NewForwardingGroup creates a new entry in the ForwardingGroup list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewForwardingGroup(Name string) (*Qos_ForwardingGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroup", key)
	}

	t.ForwardingGroup[key] = &Qos_ForwardingGroup{
		Name: &Name,
	}

	return t.ForwardingGroup[key], nil
}

// GetOrCreateForwardingGroup retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateForwardingGroup(Name string) (*Qos_ForwardingGroup){

	key := Name

	if v, ok := t.ForwardingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroup got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroup retrieves the value with the specified key from
// the ForwardingGroup map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetForwardingGroup(Name string) (*Qos_ForwardingGroup){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.ForwardingGroup[key]; ok {
    return lm
  }
  return nil
}

// NewInterface creates a new entry in the Interface list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewInterface(InterfaceId string) (*Qos_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Qos_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateInterface(InterfaceId string) (*Qos_Interface){

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetInterface(InterfaceId string) (*Qos_Interface){

	if t == nil {
		return nil
	}

  key := InterfaceId

  if lm, ok := t.Interface[key]; ok {
    return lm
  }
  return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewQueue(Name string) (*Qos_Queue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateQueue(Name string) (*Qos_Queue){

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetQueue(Name string) (*Qos_Queue){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Queue[key]; ok {
    return lm
  }
  return nil
}

// NewSchedulerPolicy creates a new entry in the SchedulerPolicy list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewSchedulerPolicy(Name string) (*Qos_SchedulerPolicy, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulerPolicy", key)
	}

	t.SchedulerPolicy[key] = &Qos_SchedulerPolicy{
		Name: &Name,
	}

	return t.SchedulerPolicy[key], nil
}

// GetOrCreateSchedulerPolicy retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateSchedulerPolicy(Name string) (*Qos_SchedulerPolicy){

	key := Name

	if v, ok := t.SchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSchedulerPolicy retrieves the value with the specified key from
// the SchedulerPolicy map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetSchedulerPolicy(Name string) (*Qos_SchedulerPolicy){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.SchedulerPolicy[key]; ok {
    return lm
  }
  return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Classifier represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_Classifier struct {
	Name *string                         `path:"config/name|name" module:"openconfig-qos"`
	Term map[string]*Qos_Classifier_Term `path:"terms/term" module:"openconfig-qos"`
	Type E_Qos_Classifier_Type           `path:"config/type" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Classifier) NewTerm(Id string) (*Qos_Classifier_Term, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Classifier) GetOrCreateTerm(Id string) (*Qos_Classifier_Term){

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Classifier) GetTerm(Id string) (*Qos_Classifier_Term){

	if t == nil {
		return nil
	}

  key := Id

  if lm, ok := t.Term[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Qos_Classifier struct, which is a YANG list entry.
func (t *Qos_Classifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Classifier_Term represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_Term struct {
	Actions	*Qos_Classifier_Term_Actions       `path:"actions" module:"openconfig-qos"`
	Conditions	*Qos_Classifier_Term_Conditions `path:"conditions" module:"openconfig-qos"`
	Id	*string                                 `path:"config/id|id" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateActions() *Qos_Classifier_Term_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &Qos_Classifier_Term_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateConditions() *Qos_Classifier_Term_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &Qos_Classifier_Term_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetActions() *Qos_Classifier_Term_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetConditions() *Qos_Classifier_Term_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// ΛListKeyMap returns the keys of the Qos_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Classifier_Term_Actions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_Actions struct {
	Remark	*Qos_Classifier_Term_Actions_Remark `path:"remark" module:"openconfig-qos"`
	TargetGroup	*string                        `path:"config/target-group" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions) IsYANGGoStruct() {}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Actions) GetOrCreateRemark() *Qos_Classifier_Term_Actions_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &Qos_Classifier_Term_Actions_Remark{}
	return t.Remark
}

// GetRemark returns the value of the Remark struct pointer
// from Qos_Classifier_Term_Actions. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Actions) GetRemark() *Qos_Classifier_Term_Actions_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Classifier_Term_Actions_Remark represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_Remark struct {
	SetDot1P	*uint8	`path:"config/set-dot1p" module:"openconfig-qos"`
	SetDscp	*uint8	`path:"config/set-dscp" module:"openconfig-qos"`
	SetMplsTc	*uint8	`path:"config/set-mpls-tc" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions_Remark) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions_Remark) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions_Remark) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Classifier_Term_Conditions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_Conditions struct {
	Ipv4	*Qos_Classifier_Term_Conditions_Ipv4           `path:"ipv4" module:"openconfig-qos"`
	Ipv6	*Qos_Classifier_Term_Conditions_Ipv6           `path:"ipv6" module:"openconfig-qos"`
	L2	*Qos_Classifier_Term_Conditions_L2               `path:"l2" module:"openconfig-qos"`
	Mpls	*Qos_Classifier_Term_Conditions_Mpls           `path:"mpls" module:"openconfig-qos"`
	Transport	*Qos_Classifier_Term_Conditions_Transport `path:"transport" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Qos_Classifier_Term_Conditions_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Qos_Classifier_Term_Conditions_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateL2() *Qos_Classifier_Term_Conditions_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &Qos_Classifier_Term_Conditions_L2{}
	return t.L2
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &Qos_Classifier_Term_Conditions_Mpls{}
	return t.Mpls
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Qos_Classifier_Term_Conditions_Transport{}
	return t.Transport
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetL2() *Qos_Classifier_Term_Conditions_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Classifier_Term_Conditions_Ipv4 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4 struct {
	DestinationAddress *string                                            `path:"config/destination-address" module:"openconfig-qos"`
	Dscp               *uint8                                             `path:"config/dscp" module:"openconfig-qos"`
	HopLimit           *uint8                                             `path:"config/hop-limit" module:"openconfig-qos"`
	Protocol           Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union `path:"config/protocol" module:"openconfig-qos"`
	SourceAddress      *string                                            `path:"config/source-address" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv4) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}

// Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol within the YANG schema.
type Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union interface {
	Is_Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union()
}

// Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union ensures that Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union interface.
func (*Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union() {}

// Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_Uint8 is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol
// is to be set to a uint8 value.
type Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union ensures that Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_Uint8
// implements the Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union interface.
func (*Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_Uint8) Is_Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union() {}

// To_Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Qos_Classifier_Term_Conditions_Ipv4) To_Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union(i interface{}) (Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// Qos_Classifier_Term_Conditions_Ipv6 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6 struct {
	DestinationAddress   *string                                            `path:"config/destination-address" module:"openconfig-qos"`
	DestinationFlowLabel *uint32                                            `path:"config/destination-flow-label" module:"openconfig-qos"`
	Dscp                 *uint8                                             `path:"config/dscp" module:"openconfig-qos"`
	HopLimit             *uint8                                             `path:"config/hop-limit" module:"openconfig-qos"`
	Protocol             Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union `path:"config/protocol" module:"openconfig-qos"`
	SourceAddress        *string                                            `path:"config/source-address" module:"openconfig-qos"`
	SourceFlowLabel      *uint32                                            `path:"config/source-flow-label" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv6) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}

// Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol within the YANG schema.
type Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union interface {
	Is_Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union()
}

// Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union ensures that Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union interface.
func (*Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union() {}

// Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_Uint8 is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol
// is to be set to a uint8 value.
type Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union ensures that Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_Uint8
// implements the Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union interface.
func (*Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_Uint8) Is_Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union() {}

// To_Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Qos_Classifier_Term_Conditions_Ipv6) To_Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union(i interface{}) (Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// Qos_Classifier_Term_Conditions_L2 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2 struct {
	DestinationMac     *string                                           `path:"config/destination-mac" module:"openconfig-qos"`
	DestinationMacMask *string                                           `path:"config/destination-mac-mask" module:"openconfig-qos"`
	Ethertype          Qos_Classifier_Term_Conditions_L2_Ethertype_Union `path:"config/ethertype" module:"openconfig-qos"`
	SourceMac          *string                                           `path:"config/source-mac" module:"openconfig-qos"`
	SourceMacMask      *string                                           `path:"config/source-mac-mask" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_L2) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_L2) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_L2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}

// Qos_Classifier_Term_Conditions_L2_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype within the YANG schema.
type Qos_Classifier_Term_Conditions_L2_Ethertype_Union interface {
	Is_Qos_Classifier_Term_Conditions_L2_Ethertype_Union()
}

// Qos_Classifier_Term_Conditions_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype
// is to be set to a E_OpenconfigPacketMatchTypes_ETHERTYPE value.
type Qos_Classifier_Term_Conditions_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE struct {
	E_OpenconfigPacketMatchTypes_ETHERTYPE E_OpenconfigPacketMatchTypes_ETHERTYPE
}

// Is_Qos_Classifier_Term_Conditions_L2_Ethertype_Union ensures that Qos_Classifier_Term_Conditions_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the Qos_Classifier_Term_Conditions_L2_Ethertype_Union interface.
func (*Qos_Classifier_Term_Conditions_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE) Is_Qos_Classifier_Term_Conditions_L2_Ethertype_Union() {}

// Qos_Classifier_Term_Conditions_L2_Ethertype_Union_Uint16 is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype
// is to be set to a uint16 value.
type Qos_Classifier_Term_Conditions_L2_Ethertype_Union_Uint16 struct {
	Uint16	uint16
}

// Is_Qos_Classifier_Term_Conditions_L2_Ethertype_Union ensures that Qos_Classifier_Term_Conditions_L2_Ethertype_Union_Uint16
// implements the Qos_Classifier_Term_Conditions_L2_Ethertype_Union interface.
func (*Qos_Classifier_Term_Conditions_L2_Ethertype_Union_Uint16) Is_Qos_Classifier_Term_Conditions_L2_Ethertype_Union() {}

// To_Qos_Classifier_Term_Conditions_L2_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Qos_Classifier_Term_Conditions_L2_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Qos_Classifier_Term_Conditions_L2) To_Qos_Classifier_Term_Conditions_L2_Ethertype_Union(i interface{}) (Qos_Classifier_Term_Conditions_L2_Ethertype_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_ETHERTYPE:
		return &Qos_Classifier_Term_Conditions_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE{v}, nil
	case uint16:
		return &Qos_Classifier_Term_Conditions_L2_Ethertype_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Qos_Classifier_Term_Conditions_L2_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
	}
}


// Qos_Classifier_Term_Conditions_Mpls represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls struct {
	TrafficClass	*uint8	`path:"config/traffic-class" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Mpls) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Mpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Classifier_Term_Conditions_Transport represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_Transport struct {
	DestinationPort Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union `path:"config/destination-port" module:"openconfig-qos"`
	SourcePort      Qos_Classifier_Term_Conditions_Transport_SourcePort_Union      `path:"config/source-port" module:"openconfig-qos"`
	TcpFlags        []E_OpenconfigPacketMatchTypes_TCP_FLAGS                       `path:"config/tcp-flags" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Transport) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port within the YANG schema.
type Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union interface {
	Is_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union()
}

// Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_E_Transport_DestinationPort is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port
// is to be set to a E_Transport_DestinationPort value.
type Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_E_Transport_DestinationPort struct {
	E_Transport_DestinationPort E_Transport_DestinationPort
}

// Is_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union ensures that Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_E_Transport_DestinationPort
// implements the Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union interface.
func (*Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_E_Transport_DestinationPort) Is_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union() {}

// Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_String is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port
// is to be set to a string value.
type Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_String struct {
	String	string
}

// Is_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union ensures that Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_String
// implements the Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union interface.
func (*Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_String) Is_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union() {}

// Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_Uint16 is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port
// is to be set to a uint16 value.
type Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union ensures that Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_Uint16
// implements the Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union interface.
func (*Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_Uint16) Is_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union() {}

// To_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Qos_Classifier_Term_Conditions_Transport) To_Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union(i interface{}) (Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, error) {
	switch v := i.(type) {
	case E_Transport_DestinationPort:
		return &Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_E_Transport_DestinationPort{v}, nil
	case string:
		return &Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_String{v}, nil
	case uint16:
		return &Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union, unknown union type, got: %T, want any of [E_Transport_DestinationPort, string, uint16]", i, i)
	}
}

// Qos_Classifier_Term_Conditions_Transport_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port within the YANG schema.
type Qos_Classifier_Term_Conditions_Transport_SourcePort_Union interface {
	Is_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union()
}

// Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_E_Transport_SourcePort is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port
// is to be set to a E_Transport_SourcePort value.
type Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_E_Transport_SourcePort struct {
	E_Transport_SourcePort E_Transport_SourcePort
}

// Is_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union ensures that Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_E_Transport_SourcePort
// implements the Qos_Classifier_Term_Conditions_Transport_SourcePort_Union interface.
func (*Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_E_Transport_SourcePort) Is_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union() {}

// Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_String is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port
// is to be set to a string value.
type Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_String struct {
	String	string
}

// Is_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union ensures that Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_String
// implements the Qos_Classifier_Term_Conditions_Transport_SourcePort_Union interface.
func (*Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_String) Is_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union() {}

// Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_Uint16 is used when /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port
// is to be set to a uint16 value.
type Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union ensures that Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_Uint16
// implements the Qos_Classifier_Term_Conditions_Transport_SourcePort_Union interface.
func (*Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_Uint16) Is_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union() {}

// To_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Qos_Classifier_Term_Conditions_Transport_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Qos_Classifier_Term_Conditions_Transport) To_Qos_Classifier_Term_Conditions_Transport_SourcePort_Union(i interface{}) (Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, error) {
	switch v := i.(type) {
	case E_Transport_SourcePort:
		return &Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_E_Transport_SourcePort{v}, nil
	case string:
		return &Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_String{v}, nil
	case uint16:
		return &Qos_Classifier_Term_Conditions_Transport_SourcePort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Qos_Classifier_Term_Conditions_Transport_SourcePort_Union, unknown union type, got: %T, want any of [E_Transport_SourcePort, string, uint16]", i, i)
	}
}


// Qos_ForwardingGroup represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroup struct {
	FabricPriority	*uint8	`path:"config/fabric-priority" module:"openconfig-qos"`
	Name	*string	`path:"config/name|name" module:"openconfig-qos"`
	OutputQueue	*string	`path:"config/output-queue" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_ForwardingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_ForwardingGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_ForwardingGroup struct, which is a YANG list entry.
func (t *Qos_ForwardingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_ForwardingGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_ForwardingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_ForwardingGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_Interface struct {
	Input	*Qos_Interface_Input               `path:"input" module:"openconfig-qos"`
	InterfaceId	*string                      `path:"config/interface-id|interface-id" module:"openconfig-qos"`
	InterfaceRef	*Qos_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-qos"`
	Output	*Qos_Interface_Output             `path:"output" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface) IsYANGGoStruct() {}

// GetOrCreateInput retrieves the value of the Input field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInput() *Qos_Interface_Input {
	if t.Input != nil {
		return t.Input
	}
	t.Input = &Qos_Interface_Input{}
	return t.Input
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInterfaceRef() *Qos_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Qos_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateOutput() *Qos_Interface_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_Interface_Output{}
	return t.Output
}

// GetInput returns the value of the Input struct pointer
// from Qos_Interface. If the receiver or the field Input is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInput() *Qos_Interface_Input {
	if t != nil && t.Input != nil {
		return t.Input
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Qos_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInterfaceRef() *Qos_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_Interface. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetOutput() *Qos_Interface_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// ΛListKeyMap returns the keys of the Qos_Interface struct, which is a YANG list entry.
func (t *Qos_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Input represents the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_Input struct {
	Classifier	map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier `path:"classifiers/classifier" module:"openconfig-qos"`
	Queue	map[string]*Qos_Interface_Input_Queue                            `path:"queues/queue" module:"openconfig-qos"`
	SchedulerPolicy	*Qos_Interface_Input_SchedulerPolicy                   `path:"scheduler-policy" module:"openconfig-qos"`
	VoqInterface	map[string]*Qos_Interface_Input_VoqInterface              `path:"virtual-output-queues/voq-interface" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Input_Classifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Input_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Input_Classifier){

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Input_Classifier){

	if t == nil {
		return nil
	}

  key := Type

  if lm, ok := t.Classifier[key]; ok {
    return lm
  }
  return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewQueue(Name string) (*Qos_Interface_Input_Queue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateQueue(Name string) (*Qos_Interface_Input_Queue){

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetQueue(Name string) (*Qos_Interface_Input_Queue){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Queue[key]; ok {
    return lm
  }
  return nil
}

// NewVoqInterface creates a new entry in the VoqInterface list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewVoqInterface(Name string) (*Qos_Interface_Input_VoqInterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VoqInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VoqInterface", key)
	}

	t.VoqInterface[key] = &Qos_Interface_Input_VoqInterface{
		Name: &Name,
	}

	return t.VoqInterface[key], nil
}

// GetOrCreateVoqInterface retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateVoqInterface(Name string) (*Qos_Interface_Input_VoqInterface){

	key := Name

	if v, ok := t.VoqInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVoqInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVoqInterface got unexpected error: %v", err))
	}
	return v
}

// GetVoqInterface retrieves the value with the specified key from
// the VoqInterface map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetVoqInterface(Name string) (*Qos_Interface_Input_VoqInterface){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.VoqInterface[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Input) GetOrCreateSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Input_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Input. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Input) GetSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Input_Classifier represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_Classifier struct {
	Name *string                                         `path:"config/name" module:"openconfig-qos"`
	Term map[string]*Qos_Interface_Input_Classifier_Term `path:"terms/term" module:"openconfig-qos"`
	Type E_Input_Classifier_Type                         `path:"config/type|type" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Input_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_Classifier) NewTerm(Id string) (*Qos_Interface_Input_Classifier_Term, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Input_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_Classifier) GetOrCreateTerm(Id string) (*Qos_Interface_Input_Classifier_Term){

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Input_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_Classifier) GetTerm(Id string) (*Qos_Interface_Input_Classifier_Term){

	if t == nil {
		return nil
	}

  key := Id

  if lm, ok := t.Term[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Input_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_Term struct {
	Id	*string	`path:"config/id|id" module:"openconfig-qos"`
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-qos"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier_Term) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Interface_Input_Queue represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_Queue struct {
	AvgQueueLen	*uint64	`path:"state/avg-queue-len" module:"openconfig-qos"`
	DroppedPkts	*uint64	`path:"state/dropped-pkts" module:"openconfig-qos"`
	MaxQueueLen	*uint64	`path:"state/max-queue-len" module:"openconfig-qos"`
	Name	*string	`path:"config/name|name" module:"openconfig-qos"`
	TransmitOctets	*uint64	`path:"state/transmit-octets" module:"openconfig-qos"`
	TransmitPkts	*uint64	`path:"state/transmit-pkts" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Queue) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Queue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Input_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy YANG schema element.
type Qos_Interface_Input_SchedulerPolicy struct {
	Name	*string                                                        `path:"config/name" module:"openconfig-qos"`
	Scheduler	map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Input_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Input_SchedulerPolicy_Scheduler, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Input_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) (*Qos_Interface_Input_SchedulerPolicy_Scheduler){

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Input_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_SchedulerPolicy) GetScheduler(Sequence uint32) (*Qos_Interface_Input_SchedulerPolicy_Scheduler){

	if t == nil {
		return nil
	}

  key := Sequence

  if lm, ok := t.Scheduler[key]; ok {
    return lm
  }
  return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Interface_Input_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler struct {
	ConformingOctets	*uint64	`path:"state/conforming-octets" module:"openconfig-qos"`
	ConformingPkts	*uint64	`path:"state/conforming-pkts" module:"openconfig-qos"`
	ExceedingOctets	*uint64	`path:"state/exceeding-octets" module:"openconfig-qos"`
	ExceedingPkts	*uint64	`path:"state/exceeding-pkts" module:"openconfig-qos"`
	Sequence	*uint32	`path:"state/sequence|sequence" module:"openconfig-qos"`
	ViolatingOctets	*uint64	`path:"state/violating-octets" module:"openconfig-qos"`
	ViolatingPkts	*uint64	`path:"state/violating-pkts" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Interface_Input_VoqInterface represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterface struct {
	Name	*string                                             `path:"config/name|name" module:"openconfig-qos"`
	Queue	map[string]*Qos_Interface_Input_VoqInterface_Queue `path:"queues/queue" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input_VoqInterface struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_VoqInterface) NewQueue(Name string) (*Qos_Interface_Input_VoqInterface_Queue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_VoqInterface_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_VoqInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_VoqInterface) GetOrCreateQueue(Name string) (*Qos_Interface_Input_VoqInterface_Queue){

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input_VoqInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_VoqInterface) GetQueue(Name string) (*Qos_Interface_Input_VoqInterface_Queue){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Queue[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Input_VoqInterface_Queue represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue struct {
	AvgQueueLen	*uint64	`path:"state/avg-queue-len" module:"openconfig-qos"`
	DroppedPkts	*uint64	`path:"state/dropped-pkts" module:"openconfig-qos"`
	MaxQueueLen	*uint64	`path:"state/max-queue-len" module:"openconfig-qos"`
	Name	*string	`path:"config/name|name" module:"openconfig-qos"`
	TransmitOctets	*uint64	`path:"state/transmit-octets" module:"openconfig-qos"`
	TransmitPkts	*uint64	`path:"state/transmit-pkts" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface_Queue) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface_Queue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Interface_InterfaceRef represents the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRef struct {
	Interface	*string	`path:"config/interface" module:"openconfig-qos"`
	Subinterface	*uint32	`path:"config/subinterface" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Output represents the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_Output struct {
	Classifier	map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier `path:"classifiers/classifier" module:"openconfig-qos"`
	InterfaceRef	*Qos_Interface_Output_InterfaceRef                         `path:"interface-ref" module:"openconfig-qos"`
	Queue	map[string]*Qos_Interface_Output_Queue                            `path:"queues/queue" module:"openconfig-qos"`
	SchedulerPolicy	*Qos_Interface_Output_SchedulerPolicy                   `path:"scheduler-policy" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Output_Classifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Output_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Output_Classifier){

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Output_Classifier){

	if t == nil {
		return nil
	}

  key := Type

  if lm, ok := t.Classifier[key]; ok {
    return lm
  }
  return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewQueue(Name string) (*Qos_Interface_Output_Queue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Output_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateQueue(Name string) (*Qos_Interface_Output_Queue){

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetQueue(Name string) (*Qos_Interface_Output_Queue){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Queue[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Output) GetOrCreateInterfaceRef() *Qos_Interface_Output_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Qos_Interface_Output_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Output) GetOrCreateSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Output_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Qos_Interface_Output. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Output) GetInterfaceRef() *Qos_Interface_Output_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Output. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Output) GetSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Output_Classifier represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_Classifier struct {
	Name *string                                          `path:"config/name" module:"openconfig-qos"`
	Term map[string]*Qos_Interface_Output_Classifier_Term `path:"terms/term" module:"openconfig-qos"`
	Type E_Input_Classifier_Type                          `path:"config/type|type" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Output_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_Classifier) NewTerm(Id string) (*Qos_Interface_Output_Classifier_Term, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Output_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_Classifier) GetOrCreateTerm(Id string) (*Qos_Interface_Output_Classifier_Term){

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Output_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_Classifier) GetTerm(Id string) (*Qos_Interface_Output_Classifier_Term){

	if t == nil {
		return nil
	}

  key := Id

  if lm, ok := t.Term[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Output_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_Term struct {
	Id	*string	`path:"config/id|id" module:"openconfig-qos"`
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-qos"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier_Term) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Interface_Output_InterfaceRef represents the /openconfig-qos/qos/interfaces/interface/output/interface-ref YANG schema element.
type Qos_Interface_Output_InterfaceRef struct {
	Interface	*string	`path:"config/interface" module:"openconfig-qos"`
	Subinterface	*uint32	`path:"config/subinterface" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Interface_Output_Queue represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_Queue struct {
	AvgQueueLen	*uint64	`path:"state/avg-queue-len" module:"openconfig-qos"`
	DroppedPkts	*uint64	`path:"state/dropped-pkts" module:"openconfig-qos"`
	MaxQueueLen	*uint64	`path:"state/max-queue-len" module:"openconfig-qos"`
	Name	*string	`path:"config/name|name" module:"openconfig-qos"`
	TransmitOctets	*uint64	`path:"state/transmit-octets" module:"openconfig-qos"`
	TransmitPkts	*uint64	`path:"state/transmit-pkts" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Queue) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Queue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Interface_Output_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicy struct {
	Name	*string                                                         `path:"config/name" module:"openconfig-qos"`
	Scheduler	map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Output_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Output_SchedulerPolicy_Scheduler, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Output_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) (*Qos_Interface_Output_SchedulerPolicy_Scheduler){

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Output_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_SchedulerPolicy) GetScheduler(Sequence uint32) (*Qos_Interface_Output_SchedulerPolicy_Scheduler){

	if t == nil {
		return nil
	}

  key := Sequence

  if lm, ok := t.Scheduler[key]; ok {
    return lm
  }
  return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Interface_Output_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler struct {
	ConformingOctets	*uint64	`path:"state/conforming-octets" module:"openconfig-qos"`
	ConformingPkts	*uint64	`path:"state/conforming-pkts" module:"openconfig-qos"`
	ExceedingOctets	*uint64	`path:"state/exceeding-octets" module:"openconfig-qos"`
	ExceedingPkts	*uint64	`path:"state/exceeding-pkts" module:"openconfig-qos"`
	Sequence	*uint32	`path:"state/sequence|sequence" module:"openconfig-qos"`
	ViolatingOctets	*uint64	`path:"state/violating-octets" module:"openconfig-qos"`
	ViolatingPkts	*uint64	`path:"state/violating-pkts" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_Queue represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_Queue struct {
	Name      *string                             `path:"config/name|name" module:"openconfig-qos"`
	QueueType E_OpenconfigQosTypes_QOS_QUEUE_TYPE `path:"config/queue-type" module:"openconfig-qos"`
	Red       *Qos_Queue_Red                      `path:"red" module:"openconfig-qos"`
	Wred      *Qos_Queue_Wred                     `path:"wred" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Queue) IsYANGGoStruct() {}

// GetOrCreateRed retrieves the value of the Red field
// or returns the existing field if it already exists.
func (t *Qos_Queue) GetOrCreateRed() *Qos_Queue_Red {
	if t.Red != nil {
		return t.Red
	}
	t.Red = &Qos_Queue_Red{}
	return t.Red
}

// GetOrCreateWred retrieves the value of the Wred field
// or returns the existing field if it already exists.
func (t *Qos_Queue) GetOrCreateWred() *Qos_Queue_Wred {
	if t.Wred != nil {
		return t.Wred
	}
	t.Wred = &Qos_Queue_Wred{}
	return t.Wred
}

// GetRed returns the value of the Red struct pointer
// from Qos_Queue. If the receiver or the field Red is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Queue) GetRed() *Qos_Queue_Red {
	if t != nil && t.Red != nil {
		return t.Red
	}
	return nil
}

// GetWred returns the value of the Wred struct pointer
// from Qos_Queue. If the receiver or the field Wred is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Queue) GetWred() *Qos_Queue_Wred {
	if t != nil && t.Wred != nil {
		return t.Wred
	}
	return nil
}

// ΛListKeyMap returns the keys of the Qos_Queue struct, which is a YANG list entry.
func (t *Qos_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Queue_Red represents the /openconfig-qos/qos/queues/queue/red YANG schema element.
type Qos_Queue_Red struct {
	Maxth	*uint64	`path:"config/maxth" module:"openconfig-qos"`
	Minth	*uint64	`path:"config/minth" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Queue_Red implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Queue_Red) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue_Red) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Queue_Red"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Queue_Red) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Queue_Wred represents the /openconfig-qos/qos/queues/queue/wred YANG schema element.
type Qos_Queue_Wred struct {
}

// IsYANGGoStruct ensures that Qos_Queue_Wred implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Queue_Wred) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue_Wred) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Queue_Wred"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Queue_Wred) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_SchedulerPolicy represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicy struct {
	Name	*string                                        `path:"config/name|name" module:"openconfig-qos"`
	Scheduler	map[uint32]*Qos_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_SchedulerPolicy_Scheduler, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) (*Qos_SchedulerPolicy_Scheduler){

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy) GetScheduler(Sequence uint32) (*Qos_SchedulerPolicy_Scheduler){

	if t == nil {
		return nil
	}

  key := Sequence

  if lm, ok := t.Scheduler[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler struct {
	Input             map[string]*Qos_SchedulerPolicy_Scheduler_Input  `path:"inputs/input" module:"openconfig-qos"`
	OneRateTwoColor   *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor   `path:"one-rate-two-color" module:"openconfig-qos"`
	Output            *Qos_SchedulerPolicy_Scheduler_Output            `path:"output" module:"openconfig-qos"`
	Priority          E_Scheduler_Priority                             `path:"config/priority" module:"openconfig-qos"`
	Sequence          *uint32                                          `path:"config/sequence|sequence" module:"openconfig-qos"`
	TwoRateThreeColor *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor `path:"two-rate-three-color" module:"openconfig-qos"`
	Type              E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE          `path:"config/type" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// NewInput creates a new entry in the Input list of the
// Qos_SchedulerPolicy_Scheduler struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy_Scheduler) NewInput(Id string) (*Qos_SchedulerPolicy_Scheduler_Input, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Input[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Input", key)
	}

	t.Input[key] = &Qos_SchedulerPolicy_Scheduler_Input{
		Id: &Id,
	}

	return t.Input[key], nil
}

// GetOrCreateInput retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy_Scheduler. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateInput(Id string) (*Qos_SchedulerPolicy_Scheduler_Input){

	key := Id

	if v, ok := t.Input[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInput(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInput got unexpected error: %v", err))
	}
	return v
}

// GetInput retrieves the value with the specified key from
// the Input map field of Qos_SchedulerPolicy_Scheduler. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetInput(Id string) (*Qos_SchedulerPolicy_Scheduler_Input){

	if t == nil {
		return nil
	}

  key := Id

  if lm, ok := t.Input[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateOneRateTwoColor retrieves the value of the OneRateTwoColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	t.OneRateTwoColor = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor{}
	return t.OneRateTwoColor
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_SchedulerPolicy_Scheduler_Output{}
	return t.Output
}

// GetOrCreateTwoRateThreeColor retrieves the value of the TwoRateThreeColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	t.TwoRateThreeColor = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor{}
	return t.TwoRateThreeColor
}

// GetOneRateTwoColor returns the value of the OneRateTwoColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field OneRateTwoColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t != nil && t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetTwoRateThreeColor returns the value of the TwoRateThreeColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field TwoRateThreeColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t != nil && t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	return nil
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_SchedulerPolicy_Scheduler_Input represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input struct {
	Id        *string           `path:"config/id|id" module:"openconfig-qos"`
	InputType E_Input_InputType `path:"config/input-type" module:"openconfig-qos"`
	Queue     *string           `path:"config/queue" module:"openconfig-qos"`
	Weight    *uint64           `path:"config/weight" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Input) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler_Input struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Input) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor struct {
	Bc                   *uint32                                                      `path:"config/bc" module:"openconfig-qos"`
	Cir                  *uint64                                                      `path:"config/cir" module:"openconfig-qos"`
	CirPct               *uint8                                                       `path:"config/cir-pct" module:"openconfig-qos"`
	CirPctRemaining      *uint8                                                       `path:"config/cir-pct-remaining" module:"openconfig-qos"`
	ConformAction        *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ExceedAction         *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	MaxQueueDepthBytes   *uint32                                                      `path:"config/max-queue-depth-bytes" module:"openconfig-qos"`
	MaxQueueDepthPackets *uint32                                                      `path:"config/max-queue-depth-packets" module:"openconfig-qos"`
	MaxQueueDepthPercent *uint8                                                       `path:"config/max-queue-depth-percent" module:"openconfig-qos"`
	QueuingBehavior      E_OpenconfigQos_QueueBehavior                                `path:"config/queuing-behavior" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction{}
	return t.ExceedAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction struct {
	SetDot1P	*uint8	`path:"config/set-dot1p" module:"openconfig-qos"`
	SetDscp	*uint8	`path:"config/set-dscp" module:"openconfig-qos"`
	SetMplsTc	*uint8	`path:"config/set-mpls-tc" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction struct {
	Drop	*bool	`path:"config/drop" module:"openconfig-qos"`
	SetDot1P	*uint8	`path:"config/set-dot1p" module:"openconfig-qos"`
	SetDscp	*uint8	`path:"config/set-dscp" module:"openconfig-qos"`
	SetMplsTc	*uint8	`path:"config/set-mpls-tc" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_Output represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output struct {
	ChildScheduler *string             `path:"config/child-scheduler" module:"openconfig-qos"`
	OutputFwdGroup *string             `path:"config/output-fwd-group" module:"openconfig-qos"`
	OutputType     E_Output_OutputType `path:"config/output-type" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Output) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Output) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor struct {
	Bc	*uint32                                                                   `path:"config/bc" module:"openconfig-qos"`
	Be	*uint32                                                                   `path:"config/be" module:"openconfig-qos"`
	Cir	*uint64                                                                  `path:"config/cir" module:"openconfig-qos"`
	CirPct	*uint8                                                                `path:"config/cir-pct" module:"openconfig-qos"`
	CirPctRemaining	*uint8                                                       `path:"config/cir-pct-remaining" module:"openconfig-qos"`
	ConformAction	*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ExceedAction	*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction   `path:"exceed-action" module:"openconfig-qos"`
	Pir	*uint64                                                                  `path:"config/pir" module:"openconfig-qos"`
	PirPct	*uint8                                                                `path:"config/pir-pct" module:"openconfig-qos"`
	PirPctRemaining	*uint8                                                       `path:"config/pir-pct-remaining" module:"openconfig-qos"`
	ViolateAction	*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction `path:"violate-action" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateViolateAction retrieves the value of the ViolateAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t.ViolateAction != nil {
		return t.ViolateAction
	}
	t.ViolateAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction{}
	return t.ViolateAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetViolateAction returns the value of the ViolateAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ViolateAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t != nil && t.ViolateAction != nil {
		return t.ViolateAction
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction struct {
	SetDot1P	*uint8	`path:"config/set-dot1p" module:"openconfig-qos"`
	SetDscp	*uint8	`path:"config/set-dscp" module:"openconfig-qos"`
	SetMplsTc	*uint8	`path:"config/set-mpls-tc" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction struct {
	Drop	*bool	`path:"config/drop" module:"openconfig-qos"`
	SetDot1P	*uint8	`path:"config/set-dot1p" module:"openconfig-qos"`
	SetDscp	*uint8	`path:"config/set-dscp" module:"openconfig-qos"`
	SetMplsTc	*uint8	`path:"config/set-mpls-tc" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction struct {
	Drop	*bool	`path:"config/drop" module:"openconfig-qos"`
	SetDot1P	*uint8	`path:"config/set-dot1p" module:"openconfig-qos"`
	SetDscp	*uint8	`path:"config/set-dscp" module:"openconfig-qos"`
	SetMplsTc	*uint8	`path:"config/set-mpls-tc" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes
}


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_Input_Classifier_Type is a derived int64 type which is used to represent
// the enumerated node Input_Classifier_Type. An additional value named
// Input_Classifier_Type_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Input_Classifier_Type int64

// IsYANGGoEnum ensures that Input_Classifier_Type implements the yang.GoEnum
// interface. This ensures that Input_Classifier_Type can be identified as a
// mapped type for a YANG enumeration.
func (E_Input_Classifier_Type) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Input_Classifier_Type.
func (E_Input_Classifier_Type) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Input_Classifier_Type.
func (e E_Input_Classifier_Type) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Input_Classifier_Type")
}

const (
	// Input_Classifier_Type_UNSET corresponds to the value UNSET of Input_Classifier_Type
	Input_Classifier_Type_UNSET E_Input_Classifier_Type = 0
	// Input_Classifier_Type_IPV4 corresponds to the value IPV4 of Input_Classifier_Type
	Input_Classifier_Type_IPV4 E_Input_Classifier_Type = 5
	// Input_Classifier_Type_IPV6 corresponds to the value IPV6 of Input_Classifier_Type
	Input_Classifier_Type_IPV6 E_Input_Classifier_Type = 7
	// Input_Classifier_Type_MPLS corresponds to the value MPLS of Input_Classifier_Type
	Input_Classifier_Type_MPLS E_Input_Classifier_Type = 8
)


// E_Input_InputType is a derived int64 type which is used to represent
// the enumerated node Input_InputType. An additional value named
// Input_InputType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Input_InputType int64

// IsYANGGoEnum ensures that Input_InputType implements the yang.GoEnum
// interface. This ensures that Input_InputType can be identified as a
// mapped type for a YANG enumeration.
func (E_Input_InputType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Input_InputType.
func (E_Input_InputType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Input_InputType.
func (e E_Input_InputType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Input_InputType")
}

const (
	// Input_InputType_UNSET corresponds to the value UNSET of Input_InputType
	Input_InputType_UNSET E_Input_InputType = 0
	// Input_InputType_QUEUE corresponds to the value QUEUE of Input_InputType
	Input_InputType_QUEUE E_Input_InputType = 1
	// Input_InputType_IN_PROFILE corresponds to the value IN_PROFILE of Input_InputType
	Input_InputType_IN_PROFILE E_Input_InputType = 2
	// Input_InputType_OUT_PROFILE corresponds to the value OUT_PROFILE of Input_InputType
	Input_InputType_OUT_PROFILE E_Input_InputType = 3
)


// E_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node Interface_AdminStatus. An additional value named
// Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_AdminStatus int64

// IsYANGGoEnum ensures that Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_AdminStatus.
func (E_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_AdminStatus.
func (e E_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_AdminStatus")
}

const (
	// Interface_AdminStatus_UNSET corresponds to the value UNSET of Interface_AdminStatus
	Interface_AdminStatus_UNSET E_Interface_AdminStatus = 0
	// Interface_AdminStatus_UP corresponds to the value UP of Interface_AdminStatus
	Interface_AdminStatus_UP E_Interface_AdminStatus = 1
	// Interface_AdminStatus_DOWN corresponds to the value DOWN of Interface_AdminStatus
	Interface_AdminStatus_DOWN E_Interface_AdminStatus = 2
	// Interface_AdminStatus_TESTING corresponds to the value TESTING of Interface_AdminStatus
	Interface_AdminStatus_TESTING E_Interface_AdminStatus = 3
)


// E_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node Interface_OperStatus. An additional value named
// Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_OperStatus int64

// IsYANGGoEnum ensures that Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_OperStatus.
func (E_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_OperStatus.
func (e E_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_OperStatus")
}

const (
	// Interface_OperStatus_UNSET corresponds to the value UNSET of Interface_OperStatus
	Interface_OperStatus_UNSET E_Interface_OperStatus = 0
	// Interface_OperStatus_UP corresponds to the value UP of Interface_OperStatus
	Interface_OperStatus_UP E_Interface_OperStatus = 2
	// Interface_OperStatus_DOWN corresponds to the value DOWN of Interface_OperStatus
	Interface_OperStatus_DOWN E_Interface_OperStatus = 3
	// Interface_OperStatus_TESTING corresponds to the value TESTING of Interface_OperStatus
	Interface_OperStatus_TESTING E_Interface_OperStatus = 4
	// Interface_OperStatus_UNKNOWN corresponds to the value UNKNOWN of Interface_OperStatus
	Interface_OperStatus_UNKNOWN E_Interface_OperStatus = 5
	// Interface_OperStatus_DORMANT corresponds to the value DORMANT of Interface_OperStatus
	Interface_OperStatus_DORMANT E_Interface_OperStatus = 6
	// Interface_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of Interface_OperStatus
	Interface_OperStatus_NOT_PRESENT E_Interface_OperStatus = 7
	// Interface_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of Interface_OperStatus
	Interface_OperStatus_LOWER_LAYER_DOWN E_Interface_OperStatus = 8
)


// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (e E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY")
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL corresponds to the value CRITICAL of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR corresponds to the value MAJOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR corresponds to the value MINOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN corresponds to the value UNKNOWN of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 4
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING corresponds to the value WARNING of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 5
)


// E_OpenconfigPacketMatchTypes_ETHERTYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_ETHERTYPE. An additional value named
// OpenconfigPacketMatchTypes_ETHERTYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_ETHERTYPE int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_ETHERTYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_ETHERTYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_ETHERTYPE.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPacketMatchTypes_ETHERTYPE.
func (e E_OpenconfigPacketMatchTypes_ETHERTYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPacketMatchTypes_ETHERTYPE")
}

const (
	// OpenconfigPacketMatchTypes_ETHERTYPE_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_UNSET E_OpenconfigPacketMatchTypes_ETHERTYPE = 0
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ARP corresponds to the value ETHERTYPE_ARP of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ARP E_OpenconfigPacketMatchTypes_ETHERTYPE = 1
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV4 corresponds to the value ETHERTYPE_IPV4 of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV4 E_OpenconfigPacketMatchTypes_ETHERTYPE = 2
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV6 corresponds to the value ETHERTYPE_IPV6 of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV6 E_OpenconfigPacketMatchTypes_ETHERTYPE = 3
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_LLDP corresponds to the value ETHERTYPE_LLDP of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_LLDP E_OpenconfigPacketMatchTypes_ETHERTYPE = 4
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_MPLS corresponds to the value ETHERTYPE_MPLS of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_MPLS E_OpenconfigPacketMatchTypes_ETHERTYPE = 5
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ROCE corresponds to the value ETHERTYPE_ROCE of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ROCE E_OpenconfigPacketMatchTypes_ETHERTYPE = 6
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_VLAN corresponds to the value ETHERTYPE_VLAN of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_VLAN E_OpenconfigPacketMatchTypes_ETHERTYPE = 7
)


// E_OpenconfigPacketMatchTypes_IP_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_IP_PROTOCOL. An additional value named
// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_IP_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_IP_PROTOCOL.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPacketMatchTypes_IP_PROTOCOL.
func (e E_OpenconfigPacketMatchTypes_IP_PROTOCOL) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPacketMatchTypes_IP_PROTOCOL")
}

const (
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 0
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH corresponds to the value IP_AUTH of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 1
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE corresponds to the value IP_GRE of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 2
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP corresponds to the value IP_ICMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 3
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP corresponds to the value IP_IGMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 4
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP corresponds to the value IP_L2TP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 5
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM corresponds to the value IP_PIM of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 6
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP corresponds to the value IP_RSVP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 7
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP corresponds to the value IP_TCP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 8
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP corresponds to the value IP_UDP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 9
)


// E_OpenconfigPacketMatchTypes_TCP_FLAGS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_TCP_FLAGS. An additional value named
// OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_TCP_FLAGS int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_TCP_FLAGS implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_TCP_FLAGS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_TCP_FLAGS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_TCP_FLAGS.
func (E_OpenconfigPacketMatchTypes_TCP_FLAGS) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPacketMatchTypes_TCP_FLAGS.
func (e E_OpenconfigPacketMatchTypes_TCP_FLAGS) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPacketMatchTypes_TCP_FLAGS")
}

const (
	// OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET E_OpenconfigPacketMatchTypes_TCP_FLAGS = 0
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ACK corresponds to the value TCP_ACK of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ACK E_OpenconfigPacketMatchTypes_TCP_FLAGS = 1
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_CWR corresponds to the value TCP_CWR of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_CWR E_OpenconfigPacketMatchTypes_TCP_FLAGS = 2
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ECE corresponds to the value TCP_ECE of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ECE E_OpenconfigPacketMatchTypes_TCP_FLAGS = 3
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_FIN corresponds to the value TCP_FIN of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_FIN E_OpenconfigPacketMatchTypes_TCP_FLAGS = 4
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_PSH corresponds to the value TCP_PSH of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_PSH E_OpenconfigPacketMatchTypes_TCP_FLAGS = 5
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_RST corresponds to the value TCP_RST of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_RST E_OpenconfigPacketMatchTypes_TCP_FLAGS = 6
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_SYN corresponds to the value TCP_SYN of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_SYN E_OpenconfigPacketMatchTypes_TCP_FLAGS = 7
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_URG corresponds to the value TCP_URG of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_URG E_OpenconfigPacketMatchTypes_TCP_FLAGS = 8
)


// E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_COMPONENT_OPER_STATUS. An additional value named
// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (e E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS")
}

const (
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 0
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE corresponds to the value ACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 1
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED corresponds to the value DISABLED of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 2
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE corresponds to the value INACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 3
)


// E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (e E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT")
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE corresponds to the value BACKPLANE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS corresponds to the value CHASSIS of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 2
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD corresponds to the value CONTROLLER_CARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 3
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU corresponds to the value CPU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 4
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC corresponds to the value FABRIC of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 5
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN corresponds to the value FAN of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 6
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU corresponds to the value FRU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 7
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT corresponds to the value INTEGRATED_CIRCUIT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 8
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD corresponds to the value LINECARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 9
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT corresponds to the value PORT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 10
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY corresponds to the value POWER_SUPPLY of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 11
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR corresponds to the value SENSOR of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 12
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE corresponds to the value STORAGE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 13
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER corresponds to the value TRANSCEIVER of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 14
)


// E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (e E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT")
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM corresponds to the value OPERATING_SYSTEM of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE corresponds to the value OPERATING_SYSTEM_UPDATE of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 2
)


// E_OpenconfigQosTypes_QOS_QUEUE_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigQosTypes_QOS_QUEUE_TYPE. An additional value named
// OpenconfigQosTypes_QOS_QUEUE_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigQosTypes_QOS_QUEUE_TYPE int64

// IsYANGGoEnum ensures that OpenconfigQosTypes_QOS_QUEUE_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigQosTypes_QOS_QUEUE_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigQosTypes_QOS_QUEUE_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigQosTypes_QOS_QUEUE_TYPE.
func (E_OpenconfigQosTypes_QOS_QUEUE_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigQosTypes_QOS_QUEUE_TYPE.
func (e E_OpenconfigQosTypes_QOS_QUEUE_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigQosTypes_QOS_QUEUE_TYPE")
}

const (
	// OpenconfigQosTypes_QOS_QUEUE_TYPE_UNSET corresponds to the value UNSET of OpenconfigQosTypes_QOS_QUEUE_TYPE
	OpenconfigQosTypes_QOS_QUEUE_TYPE_UNSET E_OpenconfigQosTypes_QOS_QUEUE_TYPE = 0
	// OpenconfigQosTypes_QOS_QUEUE_TYPE_DROP_TAIL corresponds to the value DROP_TAIL of OpenconfigQosTypes_QOS_QUEUE_TYPE
	OpenconfigQosTypes_QOS_QUEUE_TYPE_DROP_TAIL E_OpenconfigQosTypes_QOS_QUEUE_TYPE = 1
	// OpenconfigQosTypes_QOS_QUEUE_TYPE_RED corresponds to the value RED of OpenconfigQosTypes_QOS_QUEUE_TYPE
	OpenconfigQosTypes_QOS_QUEUE_TYPE_RED E_OpenconfigQosTypes_QOS_QUEUE_TYPE = 2
	// OpenconfigQosTypes_QOS_QUEUE_TYPE_WRED corresponds to the value WRED of OpenconfigQosTypes_QOS_QUEUE_TYPE
	OpenconfigQosTypes_QOS_QUEUE_TYPE_WRED E_OpenconfigQosTypes_QOS_QUEUE_TYPE = 3
)


// E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigQosTypes_QOS_SCHEDULER_TYPE. An additional value named
// OpenconfigQosTypes_QOS_SCHEDULER_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE int64

// IsYANGGoEnum ensures that OpenconfigQosTypes_QOS_SCHEDULER_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigQosTypes_QOS_SCHEDULER_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigQosTypes_QOS_SCHEDULER_TYPE.
func (E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE.
func (e E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE")
}

const (
	// OpenconfigQosTypes_QOS_SCHEDULER_TYPE_UNSET corresponds to the value UNSET of OpenconfigQosTypes_QOS_SCHEDULER_TYPE
	OpenconfigQosTypes_QOS_SCHEDULER_TYPE_UNSET E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE = 0
	// OpenconfigQosTypes_QOS_SCHEDULER_TYPE_ONE_RATE_TWO_COLOR corresponds to the value ONE_RATE_TWO_COLOR of OpenconfigQosTypes_QOS_SCHEDULER_TYPE
	OpenconfigQosTypes_QOS_SCHEDULER_TYPE_ONE_RATE_TWO_COLOR E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE = 1
	// OpenconfigQosTypes_QOS_SCHEDULER_TYPE_TWO_RATE_THREE_COLOR corresponds to the value TWO_RATE_THREE_COLOR of OpenconfigQosTypes_QOS_SCHEDULER_TYPE
	OpenconfigQosTypes_QOS_SCHEDULER_TYPE_TWO_RATE_THREE_COLOR E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE = 2
)


// E_OpenconfigQos_QueueBehavior is a derived int64 type which is used to represent
// the enumerated node OpenconfigQos_QueueBehavior. An additional value named
// OpenconfigQos_QueueBehavior_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigQos_QueueBehavior int64

// IsYANGGoEnum ensures that OpenconfigQos_QueueBehavior implements the yang.GoEnum
// interface. This ensures that OpenconfigQos_QueueBehavior can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigQos_QueueBehavior) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigQos_QueueBehavior.
func (E_OpenconfigQos_QueueBehavior) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigQos_QueueBehavior.
func (e E_OpenconfigQos_QueueBehavior) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigQos_QueueBehavior")
}

const (
	// OpenconfigQos_QueueBehavior_UNSET corresponds to the value UNSET of OpenconfigQos_QueueBehavior
	OpenconfigQos_QueueBehavior_UNSET E_OpenconfigQos_QueueBehavior = 0
	// OpenconfigQos_QueueBehavior_SHAPE corresponds to the value SHAPE of OpenconfigQos_QueueBehavior
	OpenconfigQos_QueueBehavior_SHAPE E_OpenconfigQos_QueueBehavior = 1
	// OpenconfigQos_QueueBehavior_POLICE corresponds to the value POLICE of OpenconfigQos_QueueBehavior
	OpenconfigQos_QueueBehavior_POLICE E_OpenconfigQos_QueueBehavior = 2
)


// E_Output_OutputType is a derived int64 type which is used to represent
// the enumerated node Output_OutputType. An additional value named
// Output_OutputType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Output_OutputType int64

// IsYANGGoEnum ensures that Output_OutputType implements the yang.GoEnum
// interface. This ensures that Output_OutputType can be identified as a
// mapped type for a YANG enumeration.
func (E_Output_OutputType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Output_OutputType.
func (E_Output_OutputType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Output_OutputType.
func (e E_Output_OutputType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Output_OutputType")
}

const (
	// Output_OutputType_UNSET corresponds to the value UNSET of Output_OutputType
	Output_OutputType_UNSET E_Output_OutputType = 0
	// Output_OutputType_SCHEDULER corresponds to the value SCHEDULER of Output_OutputType
	Output_OutputType_SCHEDULER E_Output_OutputType = 1
	// Output_OutputType_FWD_GROUP corresponds to the value FWD_GROUP of Output_OutputType
	Output_OutputType_FWD_GROUP E_Output_OutputType = 2
	// Output_OutputType_INTERFACE corresponds to the value INTERFACE of Output_OutputType
	Output_OutputType_INTERFACE E_Output_OutputType = 3
)


// E_Qos_Classifier_Type is a derived int64 type which is used to represent
// the enumerated node Qos_Classifier_Type. An additional value named
// Qos_Classifier_Type_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Qos_Classifier_Type int64

// IsYANGGoEnum ensures that Qos_Classifier_Type implements the yang.GoEnum
// interface. This ensures that Qos_Classifier_Type can be identified as a
// mapped type for a YANG enumeration.
func (E_Qos_Classifier_Type) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Qos_Classifier_Type.
func (E_Qos_Classifier_Type) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Qos_Classifier_Type.
func (e E_Qos_Classifier_Type) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Qos_Classifier_Type")
}

const (
	// Qos_Classifier_Type_UNSET corresponds to the value UNSET of Qos_Classifier_Type
	Qos_Classifier_Type_UNSET E_Qos_Classifier_Type = 0
	// Qos_Classifier_Type_IPV4 corresponds to the value IPV4 of Qos_Classifier_Type
	Qos_Classifier_Type_IPV4 E_Qos_Classifier_Type = 1
	// Qos_Classifier_Type_IPV6 corresponds to the value IPV6 of Qos_Classifier_Type
	Qos_Classifier_Type_IPV6 E_Qos_Classifier_Type = 2
	// Qos_Classifier_Type_MPLS corresponds to the value MPLS of Qos_Classifier_Type
	Qos_Classifier_Type_MPLS E_Qos_Classifier_Type = 3
	// Qos_Classifier_Type_ETHERNET corresponds to the value ETHERNET of Qos_Classifier_Type
	Qos_Classifier_Type_ETHERNET E_Qos_Classifier_Type = 4
)


// E_Scheduler_Priority is a derived int64 type which is used to represent
// the enumerated node Scheduler_Priority. An additional value named
// Scheduler_Priority_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Scheduler_Priority int64

// IsYANGGoEnum ensures that Scheduler_Priority implements the yang.GoEnum
// interface. This ensures that Scheduler_Priority can be identified as a
// mapped type for a YANG enumeration.
func (E_Scheduler_Priority) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Scheduler_Priority.
func (E_Scheduler_Priority) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Scheduler_Priority.
func (e E_Scheduler_Priority) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Scheduler_Priority")
}

const (
	// Scheduler_Priority_UNSET corresponds to the value UNSET of Scheduler_Priority
	Scheduler_Priority_UNSET E_Scheduler_Priority = 0
	// Scheduler_Priority_STRICT corresponds to the value STRICT of Scheduler_Priority
	Scheduler_Priority_STRICT E_Scheduler_Priority = 1
)


// E_Transport_DestinationPort is a derived int64 type which is used to represent
// the enumerated node Transport_DestinationPort. An additional value named
// Transport_DestinationPort_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Transport_DestinationPort int64

// IsYANGGoEnum ensures that Transport_DestinationPort implements the yang.GoEnum
// interface. This ensures that Transport_DestinationPort can be identified as a
// mapped type for a YANG enumeration.
func (E_Transport_DestinationPort) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Transport_DestinationPort.
func (E_Transport_DestinationPort) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Transport_DestinationPort.
func (e E_Transport_DestinationPort) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Transport_DestinationPort")
}

const (
	// Transport_DestinationPort_UNSET corresponds to the value UNSET of Transport_DestinationPort
	Transport_DestinationPort_UNSET E_Transport_DestinationPort = 0
	// Transport_DestinationPort_ANY corresponds to the value ANY of Transport_DestinationPort
	Transport_DestinationPort_ANY E_Transport_DestinationPort = 1
)


// E_Transport_SourcePort is a derived int64 type which is used to represent
// the enumerated node Transport_SourcePort. An additional value named
// Transport_SourcePort_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Transport_SourcePort int64

// IsYANGGoEnum ensures that Transport_SourcePort implements the yang.GoEnum
// interface. This ensures that Transport_SourcePort can be identified as a
// mapped type for a YANG enumeration.
func (E_Transport_SourcePort) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Transport_SourcePort.
func (E_Transport_SourcePort) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Transport_SourcePort.
func (e E_Transport_SourcePort) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Transport_SourcePort")
}

const (
	// Transport_SourcePort_UNSET corresponds to the value UNSET of Transport_SourcePort
	Transport_SourcePort_UNSET E_Transport_SourcePort = 0
	// Transport_SourcePort_ANY corresponds to the value ANY of Transport_SourcePort
	Transport_SourcePort_ANY E_Transport_SourcePort = 1
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_Input_Classifier_Type": {
		5: {Name: "IPV4"},
		7: {Name: "IPV6"},
		8: {Name: "MPLS"},
	},
	"E_Input_InputType": {
		1: {Name: "QUEUE"},
		2: {Name: "IN_PROFILE"},
		3: {Name: "OUT_PROFILE"},
	},
	"E_Interface_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_Interface_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY": {
		1: {Name: "CRITICAL", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "MAJOR", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "MINOR", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "UNKNOWN", DefiningModule: "openconfig-alarm-types"},
		5: {Name: "WARNING", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigPacketMatchTypes_ETHERTYPE": {
		1: {Name: "ETHERTYPE_ARP", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "ETHERTYPE_IPV4", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "ETHERTYPE_IPV6", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "ETHERTYPE_LLDP", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "ETHERTYPE_MPLS", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "ETHERTYPE_ROCE", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "ETHERTYPE_VLAN", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPacketMatchTypes_IP_PROTOCOL": {
		1: {Name: "IP_AUTH", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "IP_GRE", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "IP_ICMP", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "IP_IGMP", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "IP_L2TP", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "IP_PIM", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "IP_RSVP", DefiningModule: "openconfig-packet-match-types"},
		8: {Name: "IP_TCP", DefiningModule: "openconfig-packet-match-types"},
		9: {Name: "IP_UDP", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPacketMatchTypes_TCP_FLAGS": {
		1: {Name: "TCP_ACK", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "TCP_CWR", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "TCP_ECE", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "TCP_FIN", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "TCP_PSH", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "TCP_RST", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "TCP_SYN", DefiningModule: "openconfig-packet-match-types"},
		8: {Name: "TCP_URG", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS": {
		1: {Name: "ACTIVE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "INACTIVE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT": {
		1: {Name: "BACKPLANE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "CHASSIS", DefiningModule: "openconfig-platform-types"},
		3: {Name: "CONTROLLER_CARD", DefiningModule: "openconfig-platform-types"},
		4: {Name: "CPU", DefiningModule: "openconfig-platform-types"},
		5: {Name: "FABRIC", DefiningModule: "openconfig-platform-types"},
		6: {Name: "FAN", DefiningModule: "openconfig-platform-types"},
		7: {Name: "FRU", DefiningModule: "openconfig-platform-types"},
		8: {Name: "INTEGRATED_CIRCUIT", DefiningModule: "openconfig-platform-types"},
		9: {Name: "LINECARD", DefiningModule: "openconfig-platform-types"},
		10: {Name: "PORT", DefiningModule: "openconfig-platform-types"},
		11: {Name: "POWER_SUPPLY", DefiningModule: "openconfig-platform-types"},
		12: {Name: "SENSOR", DefiningModule: "openconfig-platform-types"},
		13: {Name: "STORAGE", DefiningModule: "openconfig-platform-types"},
		14: {Name: "TRANSCEIVER", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT": {
		1: {Name: "OPERATING_SYSTEM", DefiningModule: "openconfig-platform-types"},
		2: {Name: "OPERATING_SYSTEM_UPDATE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigQosTypes_QOS_QUEUE_TYPE": {
		1: {Name: "DROP_TAIL", DefiningModule: "openconfig-qos-types"},
		2: {Name: "RED", DefiningModule: "openconfig-qos-types"},
		3: {Name: "WRED", DefiningModule: "openconfig-qos-types"},
	},
	"E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE": {
		1: {Name: "ONE_RATE_TWO_COLOR", DefiningModule: "openconfig-qos-types"},
		2: {Name: "TWO_RATE_THREE_COLOR", DefiningModule: "openconfig-qos-types"},
	},
	"E_OpenconfigQos_QueueBehavior": {
		1: {Name: "SHAPE"},
		2: {Name: "POLICE"},
	},
	"E_Output_OutputType": {
		1: {Name: "SCHEDULER"},
		2: {Name: "FWD_GROUP"},
		3: {Name: "INTERFACE"},
	},
	"E_Qos_Classifier_Type": {
		1: {Name: "IPV4"},
		2: {Name: "IPV6"},
		3: {Name: "MPLS"},
		4: {Name: "ETHERNET"},
	},
	"E_Scheduler_Priority": {
		1: {Name: "STRICT"},
	},
	"E_Transport_DestinationPort": {
		1: {Name: "ANY"},
	},
	"E_Transport_SourcePort": {
		1: {Name: "ANY"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x7d, 0x6f, 0xdb, 0xc6,
		0xd2, 0xc0, 0xfb, 0xbf, 0x3f, 0x45, 0x20, 0x3c, 0x7f, 0xb4, 0x40, 0x14, 0xdb, 0x8a, 0xdf, 0x52,
		0xe0, 0xc1, 0x85, 0xe3, 0xb8, 0xad, 0x6f, 0x93, 0xd8, 0xb5, 0xdd, 0x16, 0x07, 0x3d, 0x7e, 0x04,
		0x5a, 0xa2, 0x1d, 0x22, 0x12, 0xa9, 0x92, 0x54, 0x12, 0xdf, 0x73, 0xf2, 0xdd, 0x2f, 0xf4, 0x2e,
		0x59, 0x6f, 0xdc, 0xdd, 0xd9, 0x25, 0x29, 0xfd, 0x82, 0x9e, 0xd3, 0x24, 0x35, 0x97, 0xd2, 0xee,
		0xce, 0xcc, 0x6f, 0x66, 0x67, 0x67, 0xfe, 0xb3, 0xf3, 0xe2, 0xc5, 0x8b, 0x17, 0x95, 0x8f, 0x5e,
		0xdb, 0xaf, 0xfc, 0xf4, 0xa2, 0x52, 0x79, 0x39, 0xf8, 0xf3, 0x6f, 0x41, 0xd8, 0xac, 0xfc, 0xf4,
		0x62, 0x6f, 0xf8, 0xc7, 0xb3, 0x28, 0x7c, 0x08, 0x1e, 0xa7, 0xfe, 0xe2, 0x5d, 0x10, 0x57, 0x7e,
		0x7a, 0x31, 0x78, 0xb8, 0xff, 0x17, 0x8d, 0xa8, 0xdd, 0x89, 0x42, 0x3f, 0x4c, 0x93, 0x99, 0xbf,
		0x9f, 0x19, 0x7c, 0xea, 0x67, 0x5e, 0xce, 0xfe, 0xc4, 0xf0, 0x75, 0xfb, 0xcf, 0xfe, 0xfa, 0xf9,
		0x6b, 0xc7, 0xff, 0xe1, 0x2a, 0xf6, 0x1f, 0x82, 0x6f, 0x73, 0x6f, 0x9a, 0x79, 0x5b, 0xd4, 0xa8,
		0x76, 0x5a, 0x5e, 0xfa, 0x10, 0xc5, 0xed, 0x67, 0xaf, 0xeb, 0xff, 0xd8, 0x4d, 0xd4, 0x8d, 0x1b,
		0xfe, 0xc2, 0x21, 0x06, 0x1f, 0xc9, 0x7f, 0xfa, 0x1a, 0xc5, 0xbd, 0x4f, 0x55, 0xe9, 0x0c, 0xde,
		0xf6, 0x72, 0xf1, 0x0f, 0xfe, 0xea, 0x25, 0xa7, 0xf1, 0x63, 0xb7, 0xed, 0x87, 0x69, 0xe5, 0xa7,
		0x17, 0x69, 0xdc, 0xf5, 0x97, 0xfc, 0xe0, 0xd4, 0x4f, 0xcd, 0x7c, 0xb8, 0xb9, 0x9f, 0xfe, 0x3e,
		0xf3, 0x37, 0xdf, 0x9f, 0x7d, 0xf7, 0xe7, 0x53, 0x3f, 0xbf, 0x04, 0xcb, 0xbf, 0xd4, 0xdc, 0x4a,
		0x2c, 0xfb, 0x52, 0x8b, 0x17, 0x64, 0xed, 0xc2, 0x64, 0x59, 0x20, 0xc5, 0x85, 0xca, 0xba, 0x60,
		0xca, 0x0b, 0xa7, 0xbc, 0x80, 0xea, 0x0b, 0xb9, 0x78, 0x41, 0x97, 0x2c, 0xec, 0xda, 0x05, 0x1e,
		0xff, 0xc0, 0xbd, 0xd7, 0xf8, 0xdc, 0x69, 0x79, 0x61, 0x86, 0xc9, 0x18, 0xcd, 0xf1, 0xe4, 0x91,
		0x35, 0xdf, 0x6d, 0xf5, 0xc2, 0x67, 0xde, 0x00, 0x2a, 0x1b, 0x41, 0x73, 0x43, 0xa8, 0x6e, 0x0c,
		0xed, 0x0d, 0xa2, 0xbd, 0x51, 0xf4, 0x37, 0xcc, 0xea, 0x8d, 0xb3, 0x66, 0x03, 0x65, 0xde, 0x48,
		0x53, 0x9a, 0x63, 0xb8, 0x9a, 0x19, 0x67, 0x70, 0xa2, 0x46, 0xfa, 0xcf, 0x65, 0x9c, 0x85, 0x6c,
		0x5b, 0x4b, 0x79, 0x8b, 0xe9, 0x6c, 0x35, 0xc3, 0x2d, 0xa7, 0xbb, 0xf5, 0x8c, 0xb7, 0xa0, 0xf1,
		0x56, 0x34, 0xdf, 0x92, 0xd9, 0xb6, 0x66, 0xc6, 0x2d, 0x3a, 0xf9, 0x38, 0x61, 0x18, 0xa5, 0x5e,
		0x1a, 0x44, 0xa1, 0xda, 0xfa, 0x25, 0x8d, 0x4f, 0x7e, 0xdb, 0xeb, 0x78, 0xe9, 0xa7, 0xde, 0x17,
		0xd9, 0x8d, 0x3a, 0x7e, 0x38, 0xd8, 0x94, 0xe3, 0x6f, 0xb4, 0x3b, 0xa1, 0x8e, 0xc9, 0x6f, 0x77,
		0xc7, 0xfa, 0x70, 0x77, 0xb8, 0x87, 0x77, 0x64, 0xbe, 0x73, 0x86, 0xef, 0x5b, 0x49, 0x52, 0x2f,
		0xf5, 0xd5, 0x85, 0x6d, 0xf0, 0x98, 0x65, 0x59, 0xab, 0x21, 0x6b, 0xc8, 0x9a, 0x35, 0x59, 0x1b,
		0x6c, 0x61, 0x29, 0x51, 0x33, 0xb2, 0x8d, 0x8a, 0x93, 0x60, 0xfe, 0xe5, 0x2b, 0x99, 0x34, 0x43,
		0xdc, 0x6d, 0xa4, 0xe1, 0x50, 0x4e, 0xce, 0x46, 0x83, 0xd4, 0xdf, 0x8e, 0x07, 0xd9, 0xd1, 0x9b,
		0x91, 0x15, 0xb3, 0x51, 0x69, 0x7c, 0xf2, 0x92, 0x24, 0x48, 0xb2, 0xb3, 0xe4, 0xe8, 0x01, 0x48,
		0x12, 0x92, 0x84, 0x24, 0xb1, 0x6e, 0xdb, 0x6d, 0xdd, 0x86, 0xda, 0x10, 0x8e, 0x84, 0x23, 0x91,
		0x34, 0x27, 0x92, 0xb6, 0x85, 0x14, 0x99, 0x0d, 0xb9, 0x56, 0x32, 0xe4, 0xd9, 0x70, 0x08, 0x1b,
		0x04, 0x99, 0xcd, 0xe8, 0xab, 0x19, 0x7b, 0xf8, 0x71, 0x1b, 0xf9, 0x71, 0xb8, 0x6f, 0x15, 0x4d,
		0x5a, 0xff, 0x29, 0x35, 0x8b, 0xb6, 0x07, 0x3b, 0x62, 0xd1, 0x9e, 0x7f, 0x9c, 0xdb, 0xa7, 0x8e,
		0xaf, 0xb7, 0x72, 0x49, 0x1a, 0x07, 0xe1, 0xa3, 0xca, 0xa2, 0x8d, 0xd4, 0xdb, 0xc9, 0x76, 0x19,
		0xb2, 0x0c, 0x94, 0xac, 0x69, 0x84, 0x3a, 0x5d, 0x05, 0x0b, 0xd4, 0xe9, 0x62, 0x7e, 0x30, 0x3f,
		0x84, 0x2f, 0x30, 0x41, 0xdb, 0xee, 0x54, 0x75, 0xba, 0x84, 0x2e, 0x08, 0x5d, 0x20, 0x65, 0xd6,
		0xa5, 0x6c, 0x1b, 0xc3, 0x16, 0x6b, 0x31, 0x6b, 0x75, 0xc8, 0xa2, 0xd3, 0xb5, 0x41, 0x8a, 0x0f,
		0xde, 0x7d, 0x1c, 0x34, 0xb2, 0xc3, 0xe2, 0xf0, 0xe7, 0xe1, 0x45, 0x78, 0x11, 0x5e, 0xc4, 0x92,
		0x6d, 0xb7, 0x25, 0x1b, 0x28, 0x43, 0x90, 0x11, 0x64, 0x44, 0xd0, 0x5c, 0x08, 0xda, 0x16, 0x52,
		0x63, 0x26, 0xde, 0x5a, 0x09, 0x8e, 0x3f, 0x0f, 0x46, 0xb0, 0xc2, 0x8e, 0xa1, 0x0a, 0x38, 0x86,
		0x50, 0x23, 0xd4, 0x08, 0x35, 0x62, 0xcc, 0xb6, 0xde, 0x98, 0x85, 0x20, 0x23, 0xc8, 0x88, 0x94,
		0x59, 0x97, 0xb2, 0xad, 0xe4, 0xc5, 0xd0, 0x0c, 0x16, 0x43, 0x1b, 0xa4, 0x18, 0x84, 0xa9, 0xff,
		0x18, 0x7b, 0xa9, 0xdf, 0xac, 0x36, 0x82, 0xb8, 0xd1, 0x0d, 0xd2, 0xec, 0xe0, 0xb8, 0xe0, 0x59,
		0x38, 0x12, 0x8e, 0x84, 0x23, 0xb1, 0x70, 0xdb, 0x6d, 0xe1, 0xe6, 0x15, 0x23, 0x58, 0x09, 0x56,
		0x22, 0x74, 0xae, 0x85, 0x6e, 0x0b, 0x29, 0x53, 0x99, 0xc9, 0x56, 0x42, 0xe7, 0xc5, 0x78, 0xb4,
		0xb3, 0xe1, 0x60, 0x16, 0x10, 0x34, 0x53, 0x32, 0xb5, 0x4a, 0x12, 0x75, 0xc6, 0xe4, 0x69, 0x30,
		0xb3, 0x0c, 0x98, 0x99, 0x39, 0xd9, 0x79, 0x3c, 0xf3, 0x2d, 0xdf, 0x7b, 0x88, 0xfd, 0x87, 0x2c,
		0xb3, 0x3e, 0xb2, 0x5f, 0xc7, 0x19, 0x7e, 0xf6, 0x6a, 0x28, 0x8b, 0xaf, 0x5e, 0x0d, 0x8d, 0xf9,
		0x6e, 0x7f, 0x2b, 0x5a, 0x10, 0x88, 0x4e, 0x14, 0x2b, 0x78, 0x61, 0xfd, 0x9f, 0xc6, 0xef, 0xc2,
		0xef, 0xc2, 0xef, 0x02, 0x01, 0xb7, 0x1b, 0x01, 0x7b, 0xaa, 0x10, 0x4f, 0x0b, 0x4f, 0x0b, 0x31,
		0xb3, 0x2f, 0x66, 0x5b, 0xe8, 0x5b, 0x65, 0x20, 0xad, 0x95, 0xde, 0xd4, 0x55, 0xef, 0x79, 0x2b,
		0xbc, 0xf8, 0xd5, 0x8f, 0xab, 0x49, 0xb7, 0xd3, 0x69, 0x3d, 0xa9, 0x70, 0xe3, 0xd4, 0x53, 0xf0,
		0x23, 0xfc, 0x08, 0x3f, 0x62, 0xd8, 0xb6, 0xdd, 0xb0, 0x4d, 0x54, 0x22, 0x1c, 0x09, 0x47, 0x22,
		0x6e, 0xee, 0xc4, 0x6d, 0x2b, 0x79, 0x32, 0x33, 0x81, 0xad, 0xe1, 0xca, 0xaf, 0x7e, 0x7c, 0x33,
		0x18, 0xc6, 0x06, 0x5e, 0xc6, 0x51, 0xc7, 0x8f, 0xd3, 0xc0, 0x57, 0x28, 0xbe, 0x38, 0xf5, 0x0c,
		0x68, 0x09, 0x5a, 0x2e, 0xd9, 0x52, 0x4f, 0xea, 0xc6, 0x6e, 0xfc, 0x24, 0x78, 0x89, 0xbd, 0x33,
		0xb4, 0x77, 0x59, 0xb7, 0xab, 0xae, 0x47, 0x64, 0xe6, 0x19, 0x69, 0x6e, 0x61, 0xed, 0xad, 0x6c,
		0xb2, 0xa5, 0x85, 0xb6, 0xb6, 0xe9, 0x16, 0x17, 0xdb, 0xea, 0x62, 0x5b, 0x5e, 0x6e, 0xeb, 0xab,
		0x89, 0x80, 0xa2, 0x28, 0x68, 0x8b, 0xc4, 0xf8, 0x41, 0xa5, 0x8a, 0x68, 0x4b, 0xb7, 0x8d, 0x42,
		0x85, 0xb4, 0x65, 0x62, 0xb2, 0xa7, 0xf9, 0xb8, 0xae, 0xb8, 0x48, 0x88, 0x8d, 0xb0, 0xf8, 0x48,
		0x89, 0x91, 0xb8, 0x38, 0x89, 0x8b, 0x95, 0xbc, 0x78, 0xe9, 0x89, 0x99, 0xa6, 0xb8, 0x8d, 0x3f,
		0xbe, 0x72, 0x45, 0xb7, 0x15, 0xc1, 0x00, 0xc5, 0x0a, 0x6f, 0x4b, 0xcd, 0xcd, 0xc9, 0x8e, 0x9b,
		0x79, 0xd3, 0x98, 0xb3, 0xca, 0x17, 0xaf, 0xd5, 0x15, 0x50, 0x37, 0x83, 0x61, 0xd0, 0x37, 0xe8,
		0x1b, 0xf4, 0x8d, 0xe6, 0xce, 0xe9, 0x86, 0x41, 0x14, 0x4a, 0xa8, 0x9b, 0x37, 0x06, 0x63, 0x0c,
		0xbf, 0xce, 0xdf, 0x46, 0x6b, 0x6a, 0xb6, 0x67, 0x65, 0x95, 0xb0, 0x90, 0x32, 0x36, 0xdc, 0x26,
		0x16, 0x66, 0xe6, 0x3e, 0x8a, 0x5a, 0xbe, 0x17, 0x4a, 0x4e, 0xcd, 0xfe, 0x86, 0x4c, 0x4d, 0x10,
		0xa6, 0x47, 0x07, 0x82, 0x13, 0x73, 0x20, 0x30, 0xd4, 0xb5, 0x17, 0x3e, 0x9a, 0x4b, 0x96, 0xdc,
		0x64, 0x8d, 0x3f, 0xd8, 0x87, 0x20, 0x34, 0x36, 0x33, 0x42, 0x8e, 0xf6, 0xda, 0x61, 0xff, 0x1c,
		0xc2, 0xca, 0x9b, 0x5a, 0xed, 0xf5, 0xeb, 0xe3, 0xda, 0xde, 0xeb, 0xa3, 0x93, 0xc3, 0x83, 0xe3,
		0xe3, 0xc3, 0x93, 0xbd, 0x13, 0xe1, 0x37, 0xfd, 0x1c, 0x7b, 0x8d, 0x34, 0x88, 0xc2, 0x77, 0xc1,
		0x63, 0xd0, 0xef, 0x70, 0xba, 0x27, 0x36, 0xfe, 0xf7, 0x97, 0x82, 0x8b, 0xe7, 0x7d, 0xb3, 0xb6,
		0x78, 0x7b, 0xce, 0x16, 0xef, 0xb8, 0x44, 0x8b, 0xb7, 0x53, 0x8c, 0x51, 0xee, 0x36, 0x44, 0x55,
		0x77, 0xa5, 0x75, 0xf5, 0x09, 0xba, 0xba, 0x58, 0xe2, 0xbe, 0x87, 0x66, 0x2e, 0xcb, 0x52, 0xed,
		0x9f, 0x1c, 0x1c, 0x1c, 0x1d, 0x1f, 0x1c, 0xec, 0x1d, 0xbf, 0x3e, 0xde, 0x7b, 0x73, 0x78, 0xb8,
		0x7f, 0xb4, 0x7f, 0x88, 0x6a, 0xde, 0x56, 0xd5, 0xdc, 0xf4, 0x1b, 0x41, 0xdb, 0x6b, 0x89, 0x6a,
		0xe7, 0xfd, 0x9a, 0xc0, 0x58, 0x73, 0x7b, 0xa8, 0x86, 0xce, 0xd7, 0x5b, 0x8e, 0x1a, 0x3a, 0xbf,
		0x2c, 0x3a, 0xff, 0x35, 0x4b, 0xb5, 0x21, 0x0a, 0x7e, 0xc7, 0xed, 0x7b, 0xbf, 0x17, 0xec, 0x5c,
		0x54, 0x33, 0x35, 0x6e, 0xfc, 0xbc, 0x76, 0x8a, 0xd8, 0x38, 0x8f, 0x6a, 0xf4, 0x5b, 0xb5, 0xc4,
		0x54, 0xf5, 0xd9, 0x51, 0x98, 0x19, 0xbd, 0x43, 0x5f, 0x93, 0xc3, 0x5e, 0x4d, 0x96, 0x24, 0x17,
		0x82, 0x5c, 0x08, 0x75, 0x99, 0xd7, 0x3e, 0x24, 0xd1, 0xb8, 0x89, 0xbe, 0x14, 0x3d, 0x35, 0xa2,
		0x4c, 0x5a, 0x37, 0xd5, 0xdd, 0x28, 0x0c, 0xb5, 0x0c, 0xf7, 0xb9, 0xf9, 0x54, 0xc9, 0x74, 0x9f,
		0x9b, 0x49, 0x5d, 0x95, 0x51, 0x43, 0x65, 0xa0, 0x32, 0x32, 0x7e, 0x4c, 0xed, 0xf4, 0xa9, 0x81,
		0x9c, 0x76, 0x63, 0xef, 0xbe, 0x25, 0x90, 0xd7, 0x30, 0x33, 0x1a, 0xe9, 0x0d, 0xa4, 0x37, 0xe4,
		0x26, 0x6e, 0x66, 0xfe, 0x43, 0xfe, 0xe9, 0x0d, 0xe6, 0xe7, 0xd5, 0x86, 0xe7, 0xd4, 0x6e, 0xf2,
		0xa9, 0xc8, 0xde, 0x44, 0xdd, 0xa0, 0x6e, 0xc8, 0xde, 0x24, 0x7b, 0x13, 0x7d, 0x83, 0xbe, 0xd9,
		0x1e, 0x7d, 0x43, 0xf6, 0xa6, 0x0d, 0x25, 0x2c, 0xa4, 0x8c, 0x0d, 0xb7, 0x89, 0x85, 0x99, 0x21,
		0x7b, 0x73, 0xe9, 0xd4, 0x90, 0xbd, 0xa9, 0xf0, 0xc1, 0xc8, 0xde, 0x5c, 0xf4, 0x26, 0xce, 0x8b,
		0xc9, 0xde, 0x94, 0x83, 0x0b, 0xf9, 0x51, 0xc8, 0xde, 0x5c, 0xb2, 0x6b, 0xc9, 0xde, 0x2c, 0x98,
		0xb8, 0x93, 0xc9, 0x53, 0x9a, 0xa5, 0x22, 0x7b, 0x13, 0xd5, 0x4c, 0xf6, 0xe6, 0x16, 0xe9, 0x7c,
		0xb2, 0x37, 0xc9, 0xde, 0x44, 0xc1, 0x3b, 0x56, 0xf0, 0x64, 0x6f, 0x16, 0x26, 0x7b, 0x53, 0xa1,
		0xce, 0xa1, 0xfa, 0xe4, 0xc8, 0xd6, 0xc7, 0xfa, 0xcd, 0x7f, 0x52, 0x3c, 0xd6, 0xad, 0xbc, 0x0f,
		0x92, 0xf4, 0x34, 0x4d, 0x15, 0xeb, 0x6a, 0x7d, 0x08, 0xc2, 0xf3, 0x96, 0xdf, 0xee, 0xcd, 0x5e,
		0xe5, 0xa7, 0x17, 0x61, 0xb7, 0xd5, 0x52, 0xc8, 0x29, 0xfb, 0xe0, 0x7d, 0xd3, 0x7f, 0xf8, 0x32,
		0x6e, 0xfa, 0xb1, 0xdf, 0x7c, 0xfb, 0x34, 0x7c, 0xb4, 0xdc, 0xf5, 0x34, 0xe7, 0xb7, 0x5b, 0x45,
		0x29, 0x39, 0x6f, 0x49, 0x79, 0xc9, 0xd1, 0x58, 0xdb, 0x55, 0x9c, 0x73, 0x52, 0xc1, 0xd2, 0x42,
		0x4d, 0xcd, 0x6c, 0x89, 0x90, 0x4a, 0x89, 0x8f, 0xca, 0x95, 0x34, 0x6b, 0x54, 0xd2, 0xcc, 0x20,
		0xc3, 0x05, 0xaf, 0xa4, 0xe9, 0xb5, 0x5a, 0x51, 0xa3, 0xdf, 0xee, 0xad, 0x5f, 0x4d, 0x56, 0xbd,
		0xa0, 0xe6, 0xf3, 0x01, 0xd4, 0xea, 0x6a, 0xee, 0x51, 0x57, 0x93, 0xba, 0x9a, 0xcf, 0x3f, 0x8e,
		0xf2, 0xf9, 0xf4, 0x4c, 0x68, 0xf6, 0x75, 0x4d, 0x65, 0xd1, 0x86, 0xfb, 0x50, 0x21, 0x9c, 0xaf,
		0xe9, 0x76, 0x6b, 0x60, 0xa3, 0x89, 0x1b, 0x6d, 0x9a, 0xa0, 0x62, 0xe8, 0x6b, 0x49, 0xf8, 0x54,
		0x3a, 0xa9, 0x41, 0x26, 0xee, 0xac, 0xd4, 0x94, 0x1d, 0xd4, 0xde, 0x1c, 0xbc, 0x39, 0x3a, 0xae,
		0xbd, 0x39, 0xcc, 0x71, 0xee, 0x2c, 0x39, 0x08, 0x77, 0x0e, 0xdb, 0x19, 0x34, 0xfd, 0xa4, 0x11,
		0x07, 0x1d, 0x25, 0xfe, 0x9d, 0x8a, 0x04, 0x4e, 0x1e, 0xc6, 0x24, 0x61, 0x92, 0x72, 0x33, 0x49,
		0xca, 0xd9, 0x40, 0x8a, 0x59, 0x3f, 0x32, 0xb2, 0xe6, 0xb7, 0x3b, 0x3a, 0xd5, 0xd4, 0x07, 0x8f,
		0x65, 0x2d, 0x97, 0xed, 0x3f, 0x78, 0xdd, 0x56, 0x7f, 0x45, 0x1f, 0xbc, 0x56, 0xe2, 0x23, 0x97,
		0xc8, 0x65, 0x7e, 0x72, 0xa9, 0x9e, 0x8b, 0xa6, 0x98, 0x73, 0x26, 0x23, 0x98, 0x0f, 0x41, 0xdc,
		0xfe, 0xea, 0xc5, 0x7e, 0xf5, 0x8b, 0x1f, 0x27, 0x5a, 0x96, 0x70, 0x6e, 0x04, 0xc4, 0x0e, 0xb1,
		0xc3, 0x1c, 0xae, 0x7c, 0xe7, 0x27, 0x2f, 0x6e, 0x9a, 0x49, 0xdd, 0xdc, 0x08, 0x48, 0x1d, 0x52,
		0x87, 0xd4, 0xad, 0x7c, 0x67, 0xd0, 0x54, 0x97, 0xb3, 0xa0, 0x89, 0x64, 0x21, 0x59, 0x48, 0xd6,
		0xea, 0x77, 0xf6, 0x43, 0xf4, 0x5a, 0x76, 0x6c, 0xfc, 0x24, 0x52, 0x86, 0x94, 0x21, 0x65, 0x2b,
		0xdf, 0xd9, 0xf6, 0xdb, 0x51, 0xac, 0x11, 0x45, 0x19, 0x3e, 0x47, 0x47, 0x3a, 0x24, 0xcc, 0x50,
		0xc2, 0x94, 0x3b, 0xd2, 0x79, 0x5f, 0xbc, 0xa0, 0xa5, 0x55, 0x34, 0x66, 0x72, 0x00, 0x3c, 0x1e,
		0x82, 0x5a, 0x6c, 0x96, 0x36, 0xba, 0xd8, 0x86, 0x17, 0xdb, 0xf8, 0x72, 0x02, 0xa0, 0x26, 0x08,
		0x8a, 0x02, 0xa1, 0x6f, 0x7a, 0xe6, 0x56, 0x5e, 0xfb, 0xd6, 0x8f, 0xc1, 0x2d, 0x1f, 0xc3, 0x0c,
		0x6f, 0x83, 0x0b, 0xde, 0x12, 0x19, 0xdc, 0x42, 0x57, 0x3f, 0xa4, 0xd2, 0x7e, 0x25, 0xd3, 0x7c,
		0x0d, 0x32, 0xb0, 0x45, 0x32, 0xae, 0xa5, 0xa7, 0x56, 0xfe, 0x16, 0x8d, 0xe8, 0x6c, 0x3b, 0x4a,
		0x22, 0xbe, 0x2b, 0x40, 0x85, 0xc3, 0x6e, 0x1a, 0xb4, 0x82, 0xff, 0xcf, 0x6f, 0xea, 0xdb, 0xe3,
		0xf1, 0x08, 0x98, 0x63, 0xcc, 0x31, 0xe6, 0x18, 0x73, 0x8c, 0x39, 0xc6, 0x1c, 0x63, 0x8e, 0x6d,
		0xb9, 0xdc, 0xae, 0x2f, 0x69, 0xf4, 0x53, 0xf9, 0x77, 0x95, 0x42, 0x46, 0x2f, 0x56, 0xdd, 0xce,
		0xf8, 0x30, 0x18, 0xc9, 0x65, 0x98, 0xec, 0xe1, 0xb1, 0xda, 0x54, 0xa9, 0xe3, 0x3c, 0x09, 0x94,
		0x8d, 0x9e, 0x24, 0x18, 0x4d, 0xa8, 0xcc, 0x50, 0x6e, 0xf5, 0x83, 0xd1, 0x4d, 0xb5, 0x22, 0xe2,
		0x93, 0x50, 0xb4, 0xc2, 0x33, 0x57, 0x5e, 0x9a, 0xfa, 0x71, 0xa8, 0xcc, 0x1a, 0x95, 0xff, 0xfb,
		0x7b, 0xaf, 0xfa, 0xe6, 0xee, 0x3f, 0x07, 0xdf, 0xff, 0xfd, 0xef, 0xea, 0xe0, 0xb7, 0xb5, 0xe9,
		0xdf, 0xfe, 0x4f, 0xa5, 0x90, 0xa9, 0xbe, 0x3d, 0xc1, 0x56, 0xaa, 0x21, 0x3b, 0xa3, 0x12, 0x54,
		0x2e, 0x18, 0xa2, 0x12, 0x50, 0x09, 0xf2, 0x2a, 0xa1, 0x1c, 0xe7, 0x53, 0x7a, 0x12, 0x86, 0x74,
		0x21, 0x5d, 0x48, 0xd7, 0x7a, 0xe9, 0x8a, 0x3a, 0x7e, 0x5c, 0xed, 0xd1, 0x79, 0x37, 0x51, 0x17,
		0xb2, 0xe9, 0x87, 0x91, 0x35, 0x64, 0x2d, 0x37, 0x59, 0x0b, 0x9a, 0x7e, 0x98, 0x06, 0xe9, 0x93,
		0x5a, 0xdb, 0xa1, 0xb1, 0xc0, 0x29, 0x84, 0x29, 0x2a, 0x17, 0xc3, 0x57, 0xbd, 0xf5, 0x12, 0x83,
		0xe3, 0xe7, 0xb3, 0xcb, 0x0f, 0x57, 0x97, 0x1f, 0xcf, 0x3f, 0xde, 0xd6, 0x2f, 0xaf, 0xce, 0xaf,
		0xeb, 0x37, 0xb7, 0xa7, 0xb7, 0x7f, 0xdc, 0xa8, 0xae, 0x7f, 0x3f, 0xf0, 0x92, 0x68, 0x45, 0xf6,
		0x0c, 0x8b, 0x90, 0x9f, 0x9e, 0xdd, 0x5e, 0xfc, 0x79, 0x5e, 0x71, 0x71, 0x39, 0xd2, 0xf0, 0x93,
		0x5e, 0x7c, 0x2c, 0xcf, 0x67, 0x7d, 0x77, 0x71, 0x73, 0xfa, 0xf6, 0xfd, 0xf9, 0x3b, 0xdb, 0x71,
		0xef, 0x3b, 0x69, 0xf9, 0x16, 0xb1, 0x44, 0x1d, 0x2f, 0x1e, 0xa8, 0x22, 0x45, 0x23, 0x34, 0x7c,
		0x0e, 0xfb, 0x83, 0xfd, 0xc9, 0xcd, 0xfe, 0xa8, 0xb7, 0xbc, 0xd3, 0x69, 0x75, 0x37, 0xdd, 0xe2,
		0x6e, 0xf0, 0xcf, 0x24, 0xc0, 0xaa, 0xdc, 0xf2, 0x4e, 0x4c, 0x68, 0xd3, 0x6a, 0x18, 0x69, 0x49,
		0x6d, 0xff, 0x41, 0xc4, 0x16, 0xb1, 0xc5, 0x45, 0x5b, 0xf9, 0xce, 0xd8, 0x6f, 0x47, 0x5f, 0x94,
		0xb2, 0x1d, 0xc7, 0x5f, 0x70, 0xf2, 0x28, 0x72, 0x86, 0x9c, 0xe5, 0x26, 0x67, 0x25, 0xb9, 0xb5,
		0x9c, 0xf8, 0x71, 0xe0, 0xb5, 0xb4, 0xcc, 0xd9, 0xe4, 0x51, 0x04, 0x0d, 0x41, 0xc3, 0xa0, 0xad,
		0x96, 0xb3, 0xe8, 0x21, 0x35, 0xbb, 0xa7, 0x3c, 0x37, 0x02, 0x52, 0x87, 0xd4, 0x21, 0x75, 0x2b,
		0xdf, 0x99, 0xfa, 0xed, 0x8e, 0x1f, 0x7b, 0x69, 0x37, 0xd6, 0x00, 0xc9, 0xe9, 0x87, 0xb9, 0xf1,
		0x85, 0xac, 0x19, 0xca, 0x9a, 0xfa, 0x8d, 0xaf, 0x96, 0x17, 0xb7, 0xab, 0x89, 0xff, 0xc5, 0x8f,
		0x03, 0x85, 0x92, 0x4f, 0x73, 0x0b, 0xff, 0x6c, 0x1c, 0x92, 0xcd, 0x2d, 0x6d, 0x79, 0xb1, 0xad,
		0x2f, 0x26, 0x02, 0x72, 0xa2, 0xa0, 0x26, 0x12, 0x8a, 0xa2, 0xa1, 0x6f, 0x8e, 0xe6, 0x56, 0x5e,
		0xef, 0x50, 0x6c, 0x4e, 0x7f, 0x6b, 0xe4, 0xf0, 0x9a, 0x1d, 0x92, 0xcd, 0x7d, 0x91, 0xcb, 0xab,
		0xf3, 0x8f, 0x67, 0x97, 0x1f, 0x7f, 0xbe, 0xf8, 0xa5, 0x7e, 0xfa, 0xfe, 0xf4, 0xfa, 0x43, 0xfd,
		0xe6, 0xfc, 0xcf, 0xf3, 0xeb, 0x8b, 0xdb, 0x7f, 0x55, 0x4c, 0x6a, 0x5e, 0x26, 0x46, 0x3d, 0x48,
		0x0c, 0x53, 0xaf, 0x47, 0x5f, 0xed, 0xaf, 0xd3, 0xeb, 0x8f, 0x17, 0x1f, 0x7f, 0xa9, 0xe4, 0x91,
		0x44, 0x2e, 0xf4, 0x15, 0xce, 0xae, 0x2f, 0x6e, 0x2f, 0xce, 0x4e, 0xdf, 0x97, 0xf9, 0x3b, 0x7c,
		0x38, 0xfd, 0x7f, 0x2f, 0xaf, 0xcb, 0xfc, 0x05, 0xfe, 0xf8, 0xf8, 0xdb, 0xc7, 0xcb, 0xbf, 0x3e,
		0x96, 0x7a, 0x0d, 0x2e, 0x3e, 0x1a, 0xad, 0x81, 0xd6, 0x93, 0x77, 0x85, 0xa9, 0x51, 0xab, 0x72,
		0xdd, 0x6e, 0x48, 0x31, 0x6a, 0x59, 0x3b, 0xcb, 0x58, 0x48, 0x25, 0x7d, 0x07, 0x12, 0x82, 0x84,
		0x4a, 0x48, 0x42, 0xfa, 0x1d, 0x9c, 0x35, 0x3b, 0x36, 0xdb, 0x14, 0xfb, 0xf4, 0x53, 0xec, 0x27,
		0x9f, 0xa2, 0x56, 0xd3, 0x54, 0xf2, 0x27, 0x03, 0x21, 0xfc, 0x08, 0xff, 0x46, 0xdf, 0xb9, 0x55,
		0xea, 0xae, 0xf0, 0x7c, 0x9f, 0x1f, 0x73, 0xe7, 0xf6, 0x85, 0xbe, 0x9b, 0xc5, 0x9d, 0x5b, 0x9b,
		0x53, 0x6b, 0xda, 0xb5, 0xc1, 0xca, 0x1c, 0x6f, 0x51, 0xe1, 0x0b, 0xef, 0xcb, 0xa3, 0x49, 0x0d,
		0xaa, 0xc7, 0x2d, 0x33, 0xbd, 0xd5, 0xf4, 0xa9, 0xe3, 0x27, 0x18, 0xe0, 0x15, 0x06, 0x78, 0x38,
		0x45, 0x1b, 0x67, 0x86, 0x4d, 0x9a, 0x1c, 0x9b, 0x34, 0x35, 0x9e, 0xd7, 0x6c, 0xfb, 0xdb, 0x6a,
		0xcf, 0x6b, 0xd8, 0x73, 0x5b, 0xf6, 0xfc, 0xf5, 0x06, 0x4e, 0xed, 0x16, 0x99, 0xf1, 0x20, 0x4c,
		0x52, 0x4f, 0xe1, 0xf2, 0xc1, 0x9c, 0x76, 0x1b, 0x0d, 0x80, 0x39, 0xc7, 0x9c, 0x63, 0xce, 0x31,
		0xe7, 0x98, 0x73, 0xcc, 0x39, 0xe6, 0x3c, 0x3f, 0x73, 0x9e, 0xfa, 0xf1, 0x17, 0xaf, 0x65, 0x62,
		0xcf, 0x87, 0x23, 0x6c, 0x87, 0x41, 0xc7, 0x8e, 0x2f, 0xb3, 0xe3, 0x1b, 0x6a, 0xbe, 0x93, 0xd4,
		0x4b, 0xab, 0x9a, 0x9b, 0xfc, 0x85, 0x61, 0x3d, 0xca, 0x3f, 0xc2, 0x81, 0x2e, 0xab, 0x84, 0x5e,
		0x18, 0x25, 0x7e, 0x23, 0x0a, 0x9b, 0x5a, 0x7b, 0x8f, 0x18, 0x3b, 0x46, 0xdc, 0xc5, 0xd4, 0x52,
		0xd7, 0xb2, 0x28, 0x76, 0xbd, 0xad, 0xb1, 0x3b, 0x26, 0x35, 0xd7, 0xbc, 0x6f, 0xb8, 0xe7, 0x98,
		0x75, 0xdc, 0x73, 0xdc, 0x73, 0xdc, 0x73, 0xdc, 0x73, 0xdc, 0xf3, 0x3c, 0xcd, 0x78, 0x35, 0x0d,
		0xda, 0xbe, 0x91, 0x2d, 0x1f, 0x8c, 0x80, 0x7b, 0x8e, 0x7b, 0xbe, 0x81, 0xe6, 0xbb, 0xb7, 0xb7,
		0xd3, 0xa0, 0xf1, 0x39, 0x71, 0xde, 0x2c, 0x02, 0xe7, 0x1c, 0xe7, 0x1c, 0xe7, 0x1c, 0xab, 0xae,
		0x61, 0xd5, 0x35, 0x04, 0x6f, 0x62, 0xd0, 0x83, 0x10, 0xe7, 0x1c, 0xa3, 0x8e, 0x73, 0x8e, 0x73,
		0x8e, 0x73, 0x8e, 0x73, 0x8e, 0x73, 0x9e, 0xa7, 0x19, 0x37, 0x75, 0xce, 0x47, 0x23, 0xe0, 0x9c,
		0xe3, 0x9c, 0xe3, 0x9c, 0xe3, 0x9c, 0xe3, 0x9c, 0xe3, 0x9c, 0xe3, 0x9c, 0xcb, 0x5b, 0xf5, 0x0d,
		0xe8, 0x08, 0xa9, 0x5e, 0x57, 0xee, 0xc5, 0xaa, 0xb6, 0x90, 0xb7, 0x53, 0xc3, 0xb9, 0x2c, 0xad,
		0xa7, 0x62, 0x53, 0x26, 0x76, 0xa4, 0xf7, 0x14, 0x85, 0x2b, 0x29, 0xa6, 0x67, 0x28, 0xb9, 0xfa,
		0x85, 0x2b, 0xbb, 0x61, 0xf6, 0xda, 0xa9, 0x33, 0xc1, 0x87, 0x37, 0x0a, 0xcf, 0x0c, 0x3f, 0x9e,
		0x1a, 0x6b, 0x50, 0xf6, 0x6c, 0xa6, 0xec, 0xd9, 0xaf, 0xa7, 0xd7, 0xef, 0xfe, 0x3a, 0xbd, 0x3e,
		0xaf, 0x8f, 0xfb, 0x06, 0x95, 0xbf, 0xf4, 0xd9, 0xd9, 0xe5, 0xc7, 0xdb, 0xeb, 0xcb, 0xf7, 0xef,
		0xcf, 0xaf, 0xeb, 0x67, 0xa7, 0xd7, 0xef, 0x4a, 0x5d, 0x02, 0xed, 0xea, 0x8f, 0x32, 0x7f, 0xfc,
		0x9f, 0xaf, 0xcb, 0xfd, 0xf1, 0x4f, 0xdf, 0x5e, 0x5f, 0x9c, 0x95, 0xf9, 0x1b, 0x5c, 0x5d, 0xfe,
		0x75, 0x7e, 0x5d, 0xbf, 0xf9, 0xe3, 0xea, 0xea, 0xfd, 0xbf, 0xca, 0xfc, 0x3d, 0x6e, 0xaf, 0x4f,
		0x3f, 0xde, 0x9c, 0x9d, 0x5f, 0xfc, 0x79, 0x5e, 0xea, 0x62, 0x7a, 0x6f, 0x4f, 0xcf, 0x7e, 0xbb,
		0x7a, 0x7f, 0xfa, 0xf1, 0xbc, 0xdc, 0x7b, 0xea, 0xfa, 0xb6, 0xcc, 0x9f, 0xff, 0xe6, 0xfc, 0xe3,
		0x4d, 0xb9, 0x6b, 0x32, 0x9e, 0xfd, 0x7a, 0x7a, 0x73, 0x73, 0x71, 0x53, 0xe6, 0xaf, 0xf0, 0xfe,
		0xe2, 0xe3, 0x79, 0xd9, 0x8d, 0xf3, 0xcf, 0xa7, 0xa5, 0x2e, 0x8b, 0x79, 0xf1, 0xf1, 0xf6, 0xfc,
		0x97, 0xeb, 0xd3, 0xdb, 0xf3, 0x77, 0xf5, 0xb3, 0x8b, 0xeb, 0xb3, 0x3f, 0x2e, 0xca, 0x2d, 0xd5,
		0xb7, 0x97, 0xd7, 0xa7, 0xbf, 0x9c, 0x6f, 0x5c, 0x99, 0xcf, 0x97, 0x78, 0x37, 0xfa, 0xde, 0xcd,
		0xcd, 0xe5, 0xcf, 0xb7, 0x9b, 0xe6, 0xdd, 0x5c, 0x5e, 0x9d, 0x5f, 0x9f, 0xde, 0x5e, 0x7c, 0xfc,
		0xa5, 0x7e, 0xf3, 0xaf, 0x9b, 0xdb, 0xf3, 0x0f, 0xf5, 0x3f, 0xae, 0xde, 0x9d, 0xde, 0x96, 0x9a,
		0x28, 0x9e, 0x7f, 0xa5, 0xed, 0xad, 0xd5, 0x7b, 0xe7, 0x30, 0xb6, 0xd8, 0x4d, 0xfc, 0x66, 0xb5,
		0x13, 0x7d, 0xf5, 0x63, 0xf5, 0x08, 0xe3, 0xd4, 0xb3, 0xc4, 0x19, 0x89, 0x33, 0x9a, 0x69, 0x16,
		0x93, 0x38, 0xa3, 0x6a, 0x09, 0x4e, 0x8d, 0xd2, 0x9b, 0x9a, 0x87, 0x9a, 0x1a, 0xa6, 0xd8, 0xe4,
		0x10, 0xd3, 0xf0, 0x84, 0xcd, 0xf4, 0xd0, 0x52, 0xe2, 0xf8, 0x4c, 0xc3, 0x10, 0x19, 0x1d, 0x4e,
		0x4a, 0x4d, 0x99, 0x69, 0xa9, 0x4c, 0x91, 0xb9, 0x2b, 0xba, 0x41, 0xda, 0x31, 0x58, 0x79, 0xd5,
		0x23, 0x44, 0xb3, 0xa3, 0xc3, 0xd5, 0x5a, 0x70, 0xf9, 0x17, 0x59, 0xf1, 0x25, 0x2a, 0x49, 0x1a,
		0xc5, 0xde, 0xe3, 0x7a, 0x25, 0x37, 0x55, 0x46, 0x61, 0xf0, 0xc0, 0x9a, 0x89, 0xc9, 0xd6, 0x0a,
		0x2b, 0xb3, 0x35, 0x55, 0xb1, 0xa2, 0x9a, 0xd6, 0x53, 0xd5, 0x6a, 0x6a, 0x5b, 0x4b, 0x6d, 0x2b,
		0xa9, 0x6f, 0x1d, 0xcd, 0x36, 0x79, 0xd6, 0xd6, 0x55, 0x95, 0xc6, 0x68, 0x35, 0x15, 0xa1, 0x6d,
		0xf8, 0x1c, 0x5d, 0xd6, 0x00, 0x36, 0x43, 0x60, 0x73, 0x9f, 0xd2, 0xd1, 0xd7, 0x86, 0xc3, 0x5e,
		0xf4, 0x2e, 0x13, 0x30, 0x06, 0x16, 0x41, 0xbd, 0x8d, 0x68, 0xff, 0x31, 0xcb, 0x92, 0x56, 0x43,
		0xd2, 0x90, 0x34, 0x4b, 0x92, 0x96, 0x81, 0x84, 0x36, 0x0f, 0xfe, 0xb2, 0x20, 0xd7, 0x8b, 0x55,
		0x59, 0x62, 0x37, 0xc3, 0x21, 0x6c, 0x10, 0x64, 0xf7, 0x7e, 0xf2, 0xa9, 0x15, 0x38, 0x72, 0xe6,
		0x31, 0x68, 0x12, 0x9a, 0x5c, 0xb5, 0xb1, 0x34, 0x0c, 0xdd, 0xf4, 0xd3, 0x90, 0x25, 0xf6, 0xce,
		0xd0, 0xde, 0x29, 0xf7, 0xef, 0x55, 0x74, 0x86, 0xcc, 0x9c, 0x22, 0xcd, 0x2d, 0xac, 0xbd, 0x95,
		0x4d, 0xb6, 0xb4, 0xd0, 0xd6, 0x36, 0xdd, 0xe2, 0x62, 0x5b, 0x5d, 0x6c, 0xcb, 0xcb, 0x6d, 0x7d,
		0xcd, 0xe0, 0x9b, 0xe2, 0xda, 0xab, 0x8a, 0xc4, 0xf8, 0xc1, 0x21, 0x9f, 0x18, 0x1e, 0xa7, 0xf6,
		0x47, 0x79, 0x99, 0x4b, 0x80, 0x55, 0x57, 0x5c, 0x24, 0xc4, 0x46, 0x58, 0x7c, 0xa4, 0xc4, 0x48,
		0x5c, 0x9c, 0xc4, 0xc5, 0x4a, 0x5e, 0xbc, 0xf4, 0xc4, 0x4c, 0x53, 0xdc, 0xc6, 0x1f, 0x5f, 0xfb,
		0x3a, 0xdf, 0xdc, 0xce, 0x69, 0xf9, 0xde, 0x83, 0x5e, 0x56, 0xc5, 0x9c, 0xbd, 0x39, 0x36, 0x18,
		0xe3, 0x6a, 0xe8, 0x11, 0xbd, 0x7a, 0xb5, 0x3b, 0xfd, 0xcf, 0xc4, 0x01, 0x1a, 0x98, 0xc2, 0xdd,
		0xbe, 0xc0, 0x3b, 0xba, 0xc1, 0x64, 0x57, 0x73, 0x6a, 0x3a, 0xcf, 0xe6, 0x9e, 0xe4, 0xb4, 0xd3,
		0x35, 0xf3, 0x27, 0xa5, 0x08, 0x96, 0xfa, 0x24, 0xa9, 0x5c, 0xc7, 0xd6, 0xb2, 0x0e, 0x26, 0x56,
		0x81, 0xee, 0x9e, 0x40, 0x93, 0x33, 0xd1, 0x37, 0xbf, 0x8c, 0xad, 0xaf, 0xb5, 0x4d, 0xb4, 0xf5,
		0xb4, 0x96, 0xd6, 0xd6, 0xc7, 0x76, 0x14, 0x86, 0x5a, 0x28, 0xdc, 0x28, 0x24, 0x2e, 0xe6, 0x67,
		0xd5, 0x50, 0x19, 0xa8, 0x0c, 0xfc, 0x2c, 0xfc, 0x2c, 0xfc, 0x2c, 0xfc, 0x2c, 0xfc, 0xac, 0xed,
		0xf1, 0xb3, 0x14, 0xce, 0x2f, 0x35, 0xa8, 0x49, 0x34, 0xe4, 0xfd, 0x9b, 0xff, 0xa4, 0xa8, 0xff,
		0x2b, 0xef, 0x83, 0x24, 0x3d, 0x4d, 0x53, 0xc5, 0x50, 0xf9, 0x87, 0x20, 0x3c, 0x6f, 0xf9, 0xed,
		0xe1, 0x01, 0x62, 0xd8, 0x6d, 0xb5, 0x14, 0xe8, 0xef, 0x83, 0xf7, 0x4d, 0xff, 0xe1, 0xcb, 0xb8,
		0xe9, 0xc7, 0x7e, 0xf3, 0xed, 0xd3, 0xf0, 0xd1, 0x72, 0x1f, 0x91, 0x2f, 0xdd, 0x75, 0x12, 0x85,
		0x46, 0x6e, 0xa6, 0xc7, 0xdb, 0xae, 0xf3, 0xf7, 0x99, 0xa3, 0x6a, 0xdd, 0x23, 0xf4, 0x1d, 0x85,
		0xaf, 0x98, 0x41, 0xf4, 0xb2, 0x89, 0x9a, 0x92, 0x68, 0x29, 0x89, 0x52, 0x36, 0xd1, 0x59, 0xf6,
		0xfd, 0x32, 0x2e, 0x9d, 0xee, 0x92, 0x55, 0x56, 0x66, 0xbc, 0x2e, 0xdc, 0xdf, 0x8b, 0xd7, 0x75,
		0x7e, 0xd5, 0x66, 0xff, 0xe6, 0xd9, 0xf7, 0x5b, 0xf7, 0xbd, 0xd4, 0xbe, 0xcf, 0xec, 0x47, 0x9a,
		0xbc, 0x78, 0xea, 0xa5, 0x83, 0xae, 0x7d, 0x0f, 0x5e, 0xc3, 0x9f, 0x4f, 0xbd, 0x98, 0xed, 0xec,
		0x37, 0xf8, 0x99, 0x67, 0x1f, 0x77, 0xb1, 0x17, 0xbb, 0x14, 0xbb, 0x57, 0xe1, 0xf4, 0x34, 0x26,
		0x07, 0x8b, 0x50, 0x67, 0x1d, 0xf8, 0x66, 0x06, 0xda, 0xcc, 0xa0, 0xfa, 0x1c, 0x40, 0x83, 0x87,
		0x8a, 0xe2, 0x72, 0x2e, 0xf3, 0xbc, 0x26, 0x53, 0xba, 0xfc, 0xeb, 0xcc, 0xcd, 0xfe, 0xb2, 0xaf,
		0xb3, 0x3a, 0x94, 0xb0, 0xd6, 0x07, 0xca, 0xe2, 0xe3, 0xac, 0x5d, 0x1c, 0x55, 0xef, 0x44, 0xd9,
		0xfb, 0x50, 0xf6, 0x2e, 0xb2, 0x2c, 0x9e, 0x9e, 0x6e, 0x5d, 0xe7, 0x4e, 0x67, 0x3d, 0xb9, 0x57,
		0x3b, 0xa9, 0x2f, 0x4a, 0x0e, 0x53, 0xf0, 0xb0, 0x91, 0xd9, 0x4b, 0xab, 0xb6, 0x87, 0x0c, 0x6d,
		0x64, 0xce, 0x5b, 0x6a, 0xfa, 0x49, 0x23, 0x0e, 0x3a, 0x4a, 0xdc, 0x37, 0x55, 0x28, 0x7b, 0xf2,
		0xf0, 0x66, 0x5c, 0x60, 0x0c, 0x1e, 0xb6, 0x32, 0x5f, 0x29, 0xcb, 0x86, 0xb4, 0xe3, 0xb6, 0xe9,
		0x5f, 0x5a, 0x4c, 0xd2, 0x38, 0x08, 0x1f, 0x75, 0xaa, 0xa3, 0x9d, 0x38, 0xcc, 0x7c, 0xf7, 0x43,
		0xef, 0xbe, 0xe5, 0x37, 0xd5, 0x65, 0x6b, 0xf4, 0x60, 0xd6, 0x8c, 0x2f, 0xff, 0xc1, 0xeb, 0xb6,
		0xfa, 0xeb, 0xd9, 0xdb, 0x0e, 0x88, 0x23, 0xe2, 0xe8, 0x56, 0x1c, 0xef, 0xa3, 0xa8, 0xe5, 0x7b,
		0x5a, 0xd5, 0x0a, 0xf7, 0x1d, 0xca, 0x63, 0x2b, 0x8a, 0x3a, 0xf7, 0x5e, 0xe3, 0x73, 0xb5, 0x1d,
		0x35, 0x35, 0x6e, 0xa4, 0xcc, 0x3e, 0xae, 0x2e, 0x9b, 0x0f, 0x5e, 0x2b, 0x41, 0x38, 0x11, 0x4e,
		0x84, 0x73, 0xd1, 0x3b, 0xdb, 0x69, 0x57, 0x5d, 0x24, 0x7b, 0x0f, 0x21, 0x50, 0x08, 0x94, 0x53,
		0x81, 0xea, 0x06, 0x61, 0xba, 0x7f, 0xa4, 0x21, 0x4f, 0x47, 0x54, 0xcc, 0x98, 0x7d, 0x9c, 0x8a,
		0x19, 0xda, 0x53, 0x76, 0x74, 0x78, 0xf8, 0x9a, 0x62, 0x19, 0x46, 0x16, 0x47, 0x29, 0xe9, 0x44,
		0x27, 0xc9, 0x04, 0x9b, 0x83, 0xcd, 0xd9, 0xaa, 0x80, 0xc7, 0xd6, 0xf7, 0x5a, 0x40, 0xa2, 0x4a,
		0x23, 0x51, 0x7a, 0xc5, 0x3a, 0x75, 0x8a, 0x74, 0x9a, 0x15, 0xe7, 0x9c, 0x3f, 0x9e, 0xeb, 0xf7,
		0xee, 0x12, 0x9f, 0x70, 0xcb, 0x87, 0x12, 0xe7, 0xdf, 0xd2, 0x6c, 0xb5, 0x3f, 0xd5, 0xcf, 0x71,
		0xa2, 0x46, 0xd5, 0xff, 0x96, 0xfe, 0x94, 0xfa, 0x2d, 0xbf, 0xed, 0xa7, 0xf1, 0x53, 0x35, 0x0a,
		0xab, 0x8d, 0x4f, 0x7d, 0x7e, 0xd6, 0x3a, 0xdb, 0xe9, 0xc7, 0x69, 0x34, 0x0e, 0x77, 0x4c, 0xcf,
		0x75, 0xee, 0x9c, 0x65, 0x91, 0x4c, 0xce, 0xd9, 0x77, 0x17, 0xfd, 0x36, 0xd3, 0x15, 0x1b, 0xbd,
		0x1a, 0x0c, 0x9f, 0xa2, 0x56, 0x33, 0x5b, 0x0b, 0xc3, 0xf1, 0xbe, 0x9f, 0x3c, 0xc2, 0xb9, 0x25,
		0xe7, 0x96, 0x54, 0xef, 0x02, 0x35, 0xf2, 0x41, 0x0d, 0xe5, 0xba, 0x0a, 0xcd, 0xe8, 0xab, 0x41,
		0xd7, 0xf5, 0xfe, 0xd3, 0xaa, 0xf7, 0x2f, 0x26, 0x87, 0x0d, 0x7b, 0x5b, 0x72, 0xb5, 0x30, 0x78,
		0xe0, 0x86, 0x90, 0xa1, 0x98, 0x68, 0xc6, 0x74, 0x9c, 0x5f, 0x27, 0x54, 0xae, 0x54, 0xfc, 0x7c,
		0x6f, 0x1f, 0xd3, 0x8e, 0xf5, 0x45, 0x1e, 0x71, 0x5a, 0xc9, 0xc0, 0xa3, 0x41, 0xdc, 0x56, 0x24,
		0x7e, 0x6b, 0x6b, 0x6a, 0x4d, 0x2b, 0x20, 0x5b, 0x99, 0xe3, 0x2d, 0x6a, 0xad, 0xde, 0xed, 0xe8,
		0x9b, 0xea, 0x6e, 0x07, 0x43, 0x8d, 0xa1, 0xc6, 0x50, 0x63, 0xa8, 0x31, 0xd4, 0x18, 0x6a, 0x0c,
		0xb5, 0xba, 0xa1, 0x16, 0x75, 0xd4, 0x33, 0x87, 0x9a, 0xf5, 0x84, 0x5f, 0x34, 0xf4, 0xbc, 0xc4,
		0xbe, 0x28, 0x84, 0xa0, 0x17, 0x1a, 0x16, 0xe9, 0x18, 0xc9, 0x5d, 0x6e, 0x17, 0x49, 0xd7, 0x85,
		0xaa, 0xc7, 0xd1, 0x61, 0x2a, 0x9b, 0xe7, 0x51, 0xd9, 0x9c, 0x28, 0x24, 0x51, 0x48, 0x9c, 0x1b,
		0x9c, 0x1b, 0x9c, 0x1b, 0x9c, 0x1b, 0x9c, 0x1b, 0x9c, 0x1b, 0x9c, 0x1b, 0xa2, 0x90, 0x18, 0x6a,
		0x0c, 0x35, 0x86, 0x1a, 0x43, 0x8d, 0xa1, 0xc6, 0x50, 0x6f, 0x6f, 0x14, 0x32, 0xcf, 0x50, 0xd8,
		0x46, 0xb6, 0x1e, 0xcb, 0xfc, 0xf5, 0xd5, 0xdb, 0x8f, 0x5d, 0x8c, 0x06, 0xa9, 0xff, 0x1a, 0xb5,
		0x9a, 0xb7, 0x41, 0xdb, 0x4a, 0xff, 0xb1, 0x4c, 0xf7, 0x8d, 0x54, 0xee, 0x19, 0x65, 0x54, 0x2a,
		0x64, 0xbc, 0x16, 0x35, 0xe3, 0x35, 0x33, 0xe4, 0x68, 0x14, 0x68, 0x55, 0x29, 0xc4, 0xaa, 0x55,
		0x32, 0x5d, 0xb7, 0x8d, 0x73, 0x96, 0x98, 0xb9, 0x52, 0xac, 0x5c, 0x39, 0xf1, 0xbb, 0x86, 0x18,
		0x14, 0x4a, 0x0c, 0x32, 0x27, 0x7e, 0x7b, 0xcd, 0x76, 0x10, 0x56, 0x7b, 0x7b, 0xa2, 0x9b, 0xa8,
		0x9f, 0xbb, 0xcc, 0x3c, 0xcd, 0x7d, 0x33, 0x77, 0xee, 0x2b, 0xf7, 0xcd, 0xfa, 0x35, 0x9d, 0xba,
		0x6d, 0x3f, 0xf6, 0x14, 0xea, 0xa5, 0xcd, 0xe8, 0xb6, 0x03, 0x85, 0x67, 0xce, 0xc3, 0x6e, 0xbb,
		0xf7, 0x21, 0x39, 0x56, 0xcf, 0xef, 0x58, 0xfd, 0xa5, 0xbb, 0x69, 0x8a, 0x3a, 0xc3, 0x7d, 0xe5,
		0xb5, 0x36, 0x2c, 0xeb, 0x40, 0xe4, 0x94, 0xbe, 0x11, 0x75, 0x7b, 0x78, 0x9f, 0xe8, 0xdc, 0x17,
		0x1a, 0x3e, 0xc9, 0x8d, 0x21, 0x8c, 0x85, 0x86, 0xc6, 0x54, 0xef, 0xc4, 0xea, 0xc5, 0x71, 0xe0,
		0xc7, 0xd5, 0x34, 0xf6, 0xc2, 0x24, 0xe8, 0x89, 0x74, 0x62, 0xd0, 0x96, 0x75, 0xc1, 0x60, 0x04,
		0xf9, 0xc5, 0x37, 0xbc, 0xd8, 0xc6, 0x17, 0x13, 0x00, 0x09, 0x41, 0xd0, 0x8b, 0xce, 0xb9, 0x0f,
		0xf2, 0x0f, 0x55, 0xf4, 0xd1, 0x81, 0x41, 0x9c, 0xff, 0x84, 0x38, 0xbf, 0x59, 0x30, 0x9a, 0x38,
		0xbf, 0xb5, 0xa9, 0xdd, 0x3f, 0x39, 0x38, 0x38, 0x3a, 0x3e, 0x38, 0xd8, 0x3b, 0x7e, 0x7d, 0xbc,
		0xf7, 0xe6, 0xf0, 0x70, 0xff, 0x68, 0x9f, 0x88, 0xbf, 0xb0, 0x16, 0x52, 0x76, 0x6c, 0xcc, 0xc4,
		0xd8, 0x8a, 0xa3, 0x23, 0x47, 0xf4, 0x86, 0x64, 0xaf, 0xb7, 0xc8, 0x77, 0x56, 0xb2, 0x29, 0x82,
		0xb0, 0x7a, 0x1f, 0x47, 0x5e, 0xb3, 0xe1, 0x25, 0x69, 0xb5, 0xf3, 0x39, 0x4d, 0x4c, 0x8a, 0xaf,
		0x3c, 0x1f, 0x0a, 0x94, 0x02, 0xa5, 0x40, 0x29, 0x50, 0x0a, 0x94, 0x02, 0xa5, 0x48, 0x9e, 0x50,
		0xb5, 0xcb, 0xcd, 0x20, 0x69, 0x78, 0x71, 0xd3, 0xcc, 0x22, 0x8f, 0x07, 0xc1, 0x16, 0x63, 0x8b,
		0xb1, 0xc5, 0xd8, 0x62, 0x6c, 0x31, 0xb6, 0x18, 0x5b, 0xac, 0x6a, 0x8b, 0xfd, 0x38, 0x8e, 0x62,
		0x33, 0x4b, 0x3c, 0x1c, 0x02, 0x3b, 0x8c, 0x1d, 0xc6, 0x0e, 0x63, 0x87, 0xb1, 0xc3, 0xd8, 0x61,
		0xec, 0xb0, 0xaa, 0x1d, 0x7e, 0x68, 0x24, 0x12, 0xb6, 0x78, 0x6a, 0x18, 0xec, 0x31, 0xf6, 0x18,
		0x7b, 0x8c, 0x3d, 0xc6, 0x1e, 0x63, 0x8f, 0xb1, 0xc7, 0xaa, 0xf6, 0xb8, 0xdd, 0x6d, 0xa5, 0x81,
		0xcc, 0xd9, 0xf1, 0xb3, 0xa1, 0xb0, 0xcb, 0xd8, 0x65, 0xec, 0x32, 0x76, 0x19, 0xbb, 0x8c, 0x5d,
		0xc6, 0x2e, 0xab, 0xda, 0xe5, 0xa8, 0x91, 0xfa, 0x86, 0xf6, 0x78, 0x38, 0x04, 0x76, 0x18, 0x3b,
		0x8c, 0x1d, 0xc6, 0x0e, 0x63, 0x87, 0xb1, 0xc3, 0xd8, 0x61, 0x55, 0x3b, 0x6c, 0xec, 0x15, 0xe3,
		0x0b, 0x63, 0x83, 0xb1, 0xc1, 0xd8, 0x60, 0x6c, 0x30, 0x36, 0x18, 0x1b, 0xac, 0x65, 0x83, 0xbb,
		0xa1, 0x50, 0x84, 0x7a, 0x66, 0x20, 0x6c, 0x32, 0x36, 0x19, 0x9b, 0x8c, 0x4d, 0xc6, 0x26, 0x63,
		0x93, 0xb1, 0xc9, 0xea, 0x36, 0xf9, 0x73, 0x18, 0x7d, 0x0d, 0xab, 0x9d, 0x38, 0x4a, 0x23, 0x53,
		0xab, 0x3c, 0x33, 0x14, 0x76, 0x19, 0xbb, 0x8c, 0x5d, 0xc6, 0x2e, 0x63, 0x97, 0xb1, 0xcb, 0xd8,
		0x65, 0x25, 0xbb, 0xdc, 0xea, 0x39, 0xb7, 0x8d, 0x96, 0xef, 0xc5, 0xfa, 0x06, 0x79, 0x6a, 0x0c,
		0x2c, 0x31, 0x96, 0x78, 0xa3, 0x2c, 0x71, 0x1a, 0xb4, 0xfd, 0x34, 0x68, 0x7c, 0x4e, 0x9c, 0xdb,
		0xe2, 0x3f, 0xc2, 0x81, 0x1e, 0xab, 0x84, 0x5e, 0x18, 0x25, 0x7e, 0x23, 0x0a, 0x95, 0x6f, 0xf4,
		0x63, 0xd3, 0xb1, 0xe9, 0xd8, 0xf4, 0x22, 0xdb, 0x74, 0x4a, 0xb2, 0x51, 0x92, 0xad, 0xf7, 0x0d,
		0xa2, 0x6e, 0x2a, 0x56, 0x93, 0x6d, 0xc1, 0x58, 0x60, 0x19, 0x58, 0x46, 0x80, 0x84, 0x00, 0x09,
		0x30, 0x05, 0x4c, 0x11, 0x20, 0x51, 0xb6, 0xcc, 0xe6, 0x55, 0xd9, 0x66, 0x46, 0xc1, 0x1a, 0x63,
		0x8d, 0xb1, 0xc6, 0x58, 0x63, 0xac, 0x31, 0xd6, 0x18, 0x6b, 0xac, 0x6c, 0x8d, 0x4d, 0x6b, 0xc1,
		0x4c, 0x8d, 0x81, 0x25, 0xc6, 0x12, 0x63, 0x89, 0xb1, 0xc4, 0x58, 0x62, 0x2c, 0x31, 0x96, 0x58,
		0xd9, 0x12, 0x4b, 0x55, 0x82, 0x59, 0x30, 0x16, 0x96, 0x19, 0xcb, 0x8c, 0x65, 0xc6, 0x32, 0x63,
		0x99, 0xb1, 0xcc, 0x58, 0x66, 0x65, 0xcb, 0x6c, 0x5a, 0x0b, 0x66, 0x6a, 0x0c, 0x2c, 0x31, 0x96,
		0x18, 0x4b, 0x8c, 0x25, 0xc6, 0x12, 0x63, 0x89, 0xb1, 0xc4, 0xca, 0x96, 0xd8, 0xdc, 0x33, 0xc6,
		0x1f, 0xc6, 0x0a, 0x63, 0x85, 0xb1, 0xc2, 0x58, 0x61, 0xac, 0x30, 0x56, 0x58, 0xcf, 0x0a, 0xcb,
		0xd4, 0x83, 0x99, 0x1b, 0x09, 0xab, 0x8c, 0x55, 0xc6, 0x2a, 0x63, 0x95, 0xb1, 0xca, 0x58, 0x65,
		0xac, 0x72, 0xc6, 0x9f, 0xcc, 0xb8, 0xa7, 0xd4, 0x2f, 0xbb, 0x29, 0x5a, 0xf5, 0xf9, 0xcb, 0x6d,
		0x51, 0xc7, 0x8f, 0xbd, 0xde, 0x5a, 0x7a, 0x2d, 0x55, 0xd3, 0x6e, 0x7c, 0x99, 0x4d, 0xf3, 0x12,
		0x5b, 0xb6, 0x29, 0xbf, 0xcb, 0x38, 0xe5, 0xa7, 0x61, 0x18, 0xa5, 0xfd, 0x19, 0x50, 0x92, 0xdc,
		0x4a, 0xd2, 0xf8, 0xe4, 0xb7, 0xbd, 0x8e, 0x97, 0x7e, 0xea, 0x7d, 0xfa, 0xdd, 0xa8, 0xe3, 0x87,
		0x8d, 0x3e, 0xb4, 0x54, 0x83, 0x9e, 0x39, 0x79, 0xf0, 0x1a, 0x7e, 0xb2, 0xbb, 0xe8, 0xb7, 0xbb,
		0x49, 0xea, 0xa5, 0xfe, 0xee, 0xd0, 0xec, 0xa8, 0x00, 0x55, 0x25, 0x49, 0xe3, 0x6e, 0x23, 0x0d,
		0x87, 0x86, 0xeb, 0x62, 0x34, 0x62, 0xfd, 0x6c, 0x34, 0xd6, 0x8e, 0xcc, 0xfc, 0x65, 0xd8, 0xae,
		0x95, 0xa6, 0x9f, 0x34, 0xe2, 0xa0, 0xa3, 0x34, 0x71, 0x63, 0x9b, 0x3b, 0xfd, 0x70, 0xc6, 0x75,
		0x52, 0xd3, 0x8a, 0xca, 0x00, 0xa9, 0x03, 0x8e, 0xda, 0xc0, 0xa8, 0x0b, 0x8a, 0xc6, 0x80, 0x68,
		0x0c, 0x86, 0x26, 0x40, 0x28, 0xab, 0x2a, 0x95, 0xc1, 0x6f, 0xbc, 0x5a, 0x49, 0x1a, 0x07, 0xe1,
		0xa3, 0xca, 0x72, 0x0d, 0xf7, 0xde, 0xfe, 0x89, 0x43, 0xf9, 0xf2, 0x43, 0xef, 0xbe, 0xe5, 0x37,
		0xd5, 0x65, 0x6b, 0xf4, 0x60, 0xc6, 0x79, 0x7c, 0xe7, 0x3f, 0x78, 0xdd, 0x56, 0x7f, 0x3d, 0x7b,
		0xdb, 0x01, 0x71, 0x44, 0x1c, 0xdd, 0x8a, 0xe3, 0x7d, 0x14, 0xb5, 0x7c, 0x2f, 0xd4, 0x91, 0xc7,
		0x7d, 0x87, 0xf2, 0x18, 0x3c, 0x04, 0x61, 0xd3, 0xff, 0xa6, 0x2e, 0x8f, 0xa3, 0x07, 0x11, 0x2c,
		0x04, 0xcb, 0xa9, 0x60, 0x75, 0x83, 0x30, 0x7d, 0x5d, 0xd3, 0x90, 0xab, 0x63, 0x85, 0x47, 0xf4,
		0xa2, 0x18, 0x1a, 0xe1, 0x1a, 0x93, 0xa8, 0x85, 0xa1, 0x4b, 0x6d, 0x1a, 0xa5, 0x90, 0xf0, 0x97,
		0x35, 0xa2, 0x12, 0x46, 0xd1, 0x08, 0xa9, 0x29, 0x3b, 0xa8, 0xbd, 0x39, 0x78, 0x73, 0x74, 0x5c,
		0x7b, 0x73, 0x98, 0xe3, 0xdc, 0x59, 0xf2, 0xfd, 0xef, 0x4a, 0xee, 0xfb, 0x9b, 0x17, 0xb6, 0xc9,
		0x2f, 0x06, 0xf0, 0x92, 0x10, 0x89, 0x79, 0x88, 0x44, 0x04, 0x8c, 0x06, 0xa5, 0x10, 0x3f, 0x0d,
		0xed, 0x80, 0x22, 0x1c, 0x4d, 0x3f, 0x0c, 0x20, 0x01, 0x48, 0x4e, 0x01, 0x49, 0xaf, 0xd0, 0xa1,
		0xc6, 0x99, 0x8f, 0x69, 0x61, 0x43, 0x28, 0x0b, 0xca, 0x5a, 0x39, 0x65, 0x72, 0x67, 0x3c, 0xf0,
		0x16, 0xbc, 0x05, 0x6f, 0x15, 0x9a, 0xb7, 0xa2, 0xc7, 0xa0, 0xe1, 0xb5, 0x34, 0x58, 0x6b, 0xf8,
		0x20, 0x9c, 0x05, 0x67, 0x6d, 0x58, 0x84, 0x17, 0x95, 0x8f, 0xca, 0xdf, 0x68, 0x95, 0x1f, 0x75,
		0xee, 0xbd, 0xc6, 0xe7, 0x6a, 0x3b, 0x6a, 0xea, 0x38, 0xd9, 0x33, 0x8f, 0xab, 0x9f, 0x0b, 0xf6,
		0x27, 0x15, 0xb3, 0x81, 0xd9, 0xd8, 0x34, 0xb3, 0x21, 0x22, 0x9c, 0xed, 0xb4, 0xab, 0x2e, 0x92,
		0xbd, 0x87, 0x10, 0x28, 0x04, 0xca, 0xa9, 0x40, 0x75, 0x83, 0x30, 0xdd, 0x3f, 0xd2, 0x90, 0xa7,
		0x23, 0x42, 0x55, 0x84, 0xaa, 0x84, 0xa6, 0xec, 0xe8, 0xf0, 0xf0, 0xf5, 0xf6, 0xc6, 0xa6, 0x44,
		0x2c, 0xce, 0x30, 0x01, 0x54, 0xd1, 0xe4, 0xf4, 0x9f, 0xc2, 0xe6, 0x60, 0x73, 0x9c, 0xda, 0x9c,
		0x72, 0x24, 0x5b, 0xf6, 0xfc, 0xcf, 0x6a, 0x92, 0x7a, 0x69, 0x37, 0x51, 0x17, 0xac, 0xe9, 0x87,
		0x91, 0x2f, 0xe4, 0xcb, 0xa9, 0x7c, 0xf9, 0x61, 0xb7, 0x3d, 0x8c, 0x9d, 0xe8, 0x08, 0xd9, 0x81,
		0xc2, 0x33, 0xe7, 0x61, 0xb7, 0xdd, 0xfb, 0x90, 0xdf, 0x89, 0xc9, 0x11, 0x93, 0xdb, 0xfa, 0x98,
		0x5c, 0xaa, 0x22, 0xb2, 0x93, 0x94, 0x83, 0xde, 0x53, 0x18, 0x09, 0x8c, 0x84, 0x53, 0x23, 0x11,
		0x34, 0xfd, 0x30, 0x0d, 0xd2, 0xa7, 0xd8, 0x7f, 0xd0, 0x31, 0x12, 0x0a, 0xee, 0x5a, 0xe5, 0x62,
		0xf8, 0xaa, 0xb7, 0x5e, 0xe2, 0x9b, 0xf4, 0xbb, 0x1f, 0x5e, 0x6d, 0xab, 0xf6, 0x05, 0x46, 0x7a,
		0xc2, 0x77, 0xcc, 0x7e, 0x62, 0xcd, 0x82, 0xa9, 0x5e, 0x29, 0x34, 0xbd, 0x4a, 0xb8, 0x7a, 0x7a,
		0x96, 0x7f, 0x95, 0x15, 0x5f, 0xa3, 0x92, 0x74, 0xef, 0x27, 0x2f, 0x5c, 0xfb, 0x2d, 0x26, 0xb4,
		0x3f, 0xf3, 0xd8, 0x9a, 0x69, 0x1a, 0x6d, 0xaf, 0x35, 0x3f, 0x96, 0x55, 0xaf, 0xa9, 0xe8, 0x33,
		0x65, 0x3d, 0xa6, 0xaa, 0xbf, 0xb4, 0xf5, 0x96, 0xb6, 0xbe, 0xd2, 0xd1, 0x53, 0x66, 0xdb, 0xfc,
		0x5d, 0x10, 0x67, 0xdc, 0xdf, 0x53, 0xbb, 0x42, 0xdd, 0x64, 0xce, 0x3c, 0xad, 0x66, 0x3a, 0xf7,
		0x31, 0x9d, 0x98, 0x4e, 0x95, 0xad, 0x3a, 0x7e, 0xa0, 0x31, 0xda, 0x11, 0x9a, 0x06, 0x6c, 0xf8,
		0xbc, 0x5e, 0xb1, 0x9c, 0x7d, 0x8a, 0xe5, 0x38, 0xd8, 0xde, 0x62, 0xdb, 0x5c, 0x62, 0xbb, 0x6b,
		0x86, 0xa7, 0x15, 0xd7, 0x5b, 0x55, 0x0c, 0xc6, 0x0f, 0xea, 0x5c, 0xf6, 0x5f, 0xba, 0x63, 0xd4,
		0x2f, 0xff, 0x1b, 0xba, 0x46, 0x62, 0x02, 0x23, 0x21, 0x38, 0x62, 0x02, 0x24, 0x25, 0x48, 0xe2,
		0x02, 0x25, 0x2e, 0x58, 0x92, 0x02, 0xa6, 0x27, 0x68, 0x9a, 0x02, 0xa7, 0xef, 0xba, 0x2d, 0xa7,
		0x21, 0xd5, 0x78, 0xfa, 0x52, 0x23, 0x73, 0xe2, 0xa8, 0xf2, 0x8e, 0xce, 0x41, 0xa5, 0x6a, 0xf1,
		0x83, 0x15, 0xe1, 0x51, 0x95, 0x62, 0x08, 0xf3, 0x0a, 0x53, 0xab, 0x38, 0x02, 0xea, 0x0a, 0x75,
		0x85, 0xba, 0xd2, 0xcc, 0xe1, 0x5a, 0xaa, 0xaf, 0xf6, 0x0b, 0xac, 0xaf, 0xd4, 0x4a, 0x43, 0xac,
		0x08, 0x7b, 0x65, 0x2f, 0x14, 0xb1, 0x4a, 0x57, 0xed, 0xa1, 0xa8, 0x50, 0x54, 0x28, 0x2a, 0x95,
		0xdd, 0xa2, 0x5c, 0x2c, 0x63, 0x99, 0xec, 0x1c, 0x1b, 0x0c, 0x61, 0x56, 0x12, 0x74, 0xf4, 0xcb,
		0x6c, 0xbb, 0xbe, 0x90, 0x2a, 0x11, 0x2a, 0xa4, 0x54, 0xe6, 0x86, 0x13, 0x2a, 0x19, 0x3a, 0x1e,
		0x4f, 0xb0, 0x98, 0xa5, 0xe1, 0x76, 0x9e, 0x5d, 0x02, 0x81, 0x52, 0xa2, 0xb6, 0x97, 0xc0, 0xb4,
		0xb8, 0x87, 0x93, 0xb5, 0xd8, 0xc9, 0xe7, 0xe9, 0x3b, 0x57, 0xb8, 0x62, 0x35, 0x62, 0xa4, 0x9c,
		0x9d, 0x61, 0xa6, 0x84, 0xac, 0x64, 0x6b, 0x2c, 0xb1, 0x9b, 0x1a, 0x69, 0x09, 0x0b, 0x0d, 0xa6,
		0xed, 0x20, 0xdf, 0x9d, 0x6a, 0xd0, 0x5d, 0xaf, 0xa0, 0xe9, 0xf8, 0x79, 0x83, 0xd3, 0xc8, 0xe9,
		0xd3, 0xbf, 0x99, 0x3f, 0xed, 0x0e, 0xe3, 0xe1, 0x05, 0x28, 0x8d, 0xaf, 0x87, 0xea, 0x46, 0x88,
		0x4e, 0x11, 0xfc, 0x3c, 0x70, 0x99, 0x22, 0xf8, 0x0a, 0xab, 0xdd, 0xf2, 0xbd, 0x07, 0xb5, 0xec,
		0x90, 0x39, 0xff, 0x5c, 0x03, 0x7c, 0x2b, 0x57, 0x43, 0x2d, 0xf3, 0xea, 0xd5, 0x50, 0x43, 0xec,
		0x0e, 0xe4, 0xab, 0x00, 0x7a, 0x62, 0x90, 0x5a, 0xa1, 0xad, 0x27, 0x06, 0x8f, 0x3b, 0x3e, 0xff,
		0xab, 0xa1, 0x27, 0xd0, 0x13, 0xab, 0x42, 0x44, 0xba, 0xe7, 0x7f, 0x5e, 0xb3, 0x1d, 0x84, 0xaa,
		0x09, 0xf2, 0x4b, 0xb7, 0xcc, 0xcc, 0x68, 0x44, 0xaa, 0x88, 0x54, 0x11, 0xa9, 0x52, 0xd8, 0x2d,
		0x7a, 0x19, 0xff, 0x4b, 0x6d, 0xcd, 0x81, 0xc1, 0x18, 0x6a, 0x37, 0x02, 0xa4, 0xa6, 0x52, 0xdb,
		0x27, 0x95, 0x09, 0x90, 0x59, 0xf5, 0x51, 0xe5, 0x7d, 0x55, 0x21, 0x9f, 0x55, 0x20, 0xb4, 0x25,
		0x3e, 0xed, 0xfa, 0x37, 0x14, 0x98, 0x6e, 0xa6, 0x5b, 0xce, 0x26, 0xdc, 0x39, 0x39, 0x63, 0x1c,
		0x37, 0x8c, 0x31, 0xe6, 0x2f, 0x8d, 0xd6, 0x33, 0x02, 0x6e, 0x0a, 0xec, 0x05, 0x7b, 0xe5, 0xc3,
		0x5e, 0xba, 0x6e, 0xcf, 0x44, 0xf4, 0xbc, 0x38, 0x0e, 0xfc, 0xb8, 0x9a, 0xc6, 0x5e, 0x98, 0x04,
		0x3d, 0x15, 0x98, 0x98, 0x2f, 0xf8, 0x58, 0x1a, 0x17, 0x0c, 0xfe, 0xb2, 0x10, 0x1d, 0xe4, 0x4c,
		0x05, 0x55, 0x52, 0x60, 0xc5, 0x05, 0x57, 0x5a, 0x80, 0xad, 0x09, 0xb2, 0x35, 0x81, 0xb6, 0x21,
		0xd8, 0x66, 0x02, 0x2e, 0x40, 0x3d, 0x32, 0xce, 0xd6, 0x32, 0x93, 0xa9, 0xd5, 0x24, 0x74, 0x99,
		0x78, 0x9e, 0x08, 0x0c, 0x25, 0x93, 0x31, 0x20, 0x83, 0x8c, 0x33, 0x1f, 0x4c, 0x32, 0x83, 0x40,
		0x58, 0xaf, 0xcd, 0x0d, 0x2b, 0x9c, 0x51, 0x30, 0x1e, 0xd7, 0xc2, 0x69, 0xb6, 0x90, 0x84, 0xcc,
		0x2e, 0x95, 0x60, 0xa6, 0x81, 0xab, 0xa5, 0x92, 0x6f, 0x6a, 0xea, 0x74, 0xf5, 0x76, 0x8a, 0x31,
		0xca, 0x5d, 0xae, 0x5a, 0xda, 0x38, 0x8e, 0x23, 0xab, 0xb6, 0x9c, 0xc4, 0x75, 0xec, 0x79, 0xc0,
		0xc2, 0x9e, 0xb0, 0xcc, 0x26, 0xbb, 0xcb, 0xa5, 0x0b, 0x73, 0x10, 0x56, 0xef, 0xe3, 0xc8, 0x6b,
		0xea, 0xb7, 0xbf, 0x5f, 0xca, 0x01, 0xf3, 0x43, 0x83, 0xea, 0xa0, 0x3a, 0xa8, 0x0e, 0xaa, 0x83,
		0xea, 0xa0, 0x3a, 0xa8, 0x0e, 0xaa, 0x17, 0x13, 0xd5, 0xf3, 0xe2, 0xb0, 0x66, 0x90, 0x34, 0xbc,
		0xb8, 0x29, 0x4b, 0x60, 0xe3, 0x41, 0x61, 0x2f, 0xd8, 0x0b, 0xf6, 0x82, 0xbd, 0x60, 0x2f, 0xd8,
		0x0b, 0xf6, 0x82, 0xbd, 0x60, 0xaf, 0x69, 0xf6, 0xf2, 0xe3, 0x38, 0x8a, 0x65, 0xc9, 0x6b, 0x38,
		0x24, 0xdc, 0x05, 0x77, 0xc1, 0x5d, 0x70, 0x17, 0xdc, 0x05, 0x77, 0xc1, 0x5d, 0x70, 0x17, 0xdc,
		0x35, 0xcd, 0x5d, 0x0f, 0x8d, 0xc4, 0x06, 0x7b, 0x4d, 0x0d, 0x0b, 0x7f, 0xc1, 0x5f, 0xf0, 0x17,
		0xfc, 0x05, 0x7f, 0xc1, 0x5f, 0xf0, 0x17, 0xfc, 0x05, 0x7f, 0x4d, 0xf3, 0x57, 0xbb, 0xdb, 0x4a,
		0x03, 0x3b, 0xb9, 0x5f, 0xcf, 0x86, 0x86, 0xc3, 0xe0, 0x30, 0x38, 0x0c, 0x0e, 0x83, 0xc3, 0xe0,
		0x30, 0x38, 0x0c, 0x0e, 0x83, 0xc3, 0xa6, 0x39, 0x2c, 0x6a, 0xa4, 0xbe, 0x30, 0x7f, 0x0d, 0x87,
		0x84, 0xbb, 0xe0, 0x2e, 0xb8, 0x0b, 0xee, 0x82, 0xbb, 0xe0, 0x2e, 0xb8, 0x0b, 0xee, 0x82, 0xbb,
		0xa6, 0xb9, 0x4b, 0x3c, 0xea, 0x45, 0xac, 0x0b, 0xe6, 0x82, 0xb9, 0x60, 0x2e, 0x98, 0x0b, 0xe6,
		0x82, 0xb9, 0x60, 0x2e, 0x98, 0x6b, 0x8e, 0xb9, 0xba, 0xa1, 0xa5, 0x13, 0xc7, 0x99, 0x81, 0x61,
		0x30, 0x18, 0x0c, 0x06, 0x83, 0xc1, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x83, 0xc1, 0x60, 0xb0, 0x59,
		0x06, 0xfb, 0x1c, 0x46, 0x5f, 0xc3, 0x6a, 0x27, 0x8e, 0xd2, 0x48, 0x9a, 0xc2, 0x66, 0x86, 0x86,
		0xc3, 0xe0, 0x30, 0x38, 0x0c, 0x0e, 0x83, 0xc3, 0xe0, 0x30, 0x38, 0x0c, 0x0e, 0x83, 0xc3, 0xc6,
		0xcb, 0xd2, 0xf2, 0x92, 0xb4, 0xda, 0x68, 0xf9, 0x5e, 0x2c, 0x07, 0x60, 0x53, 0x63, 0x42, 0x5e,
		0x90, 0x17, 0xe4, 0x55, 0x20, 0xf2, 0x4a, 0x83, 0xb6, 0x9f, 0x06, 0x8d, 0xcf, 0x49, 0xe1, 0xd8,
		0xeb, 0x8f, 0x70, 0x60, 0x17, 0x2a, 0xa1, 0x17, 0x46, 0x89, 0xdf, 0x88, 0x42, 0xe3, 0x8a, 0x81,
		0x30, 0x1d, 0x4c, 0x07, 0xd3, 0xc1, 0x74, 0xf9, 0x31, 0x1d, 0x2d, 0x17, 0xa4, 0x30, 0x81, 0x96,
		0x0b, 0x92, 0xd8, 0x1f, 0x75, 0x53, 0x6b, 0x3d, 0x17, 0x16, 0x8c, 0x8d, 0x1b, 0x80, 0x1b, 0x80,
		0x1b, 0x50, 0x20, 0x37, 0x80, 0x00, 0x2c, 0xb0, 0x0e, 0xac, 0x03, 0xeb, 0xc0, 0xba, 0xc4, 0xfb,
		0x4d, 0x49, 0x4c, 0xbe, 0xeb, 0xc2, 0xcc, 0xa8, 0xd0, 0x17, 0xf4, 0x05, 0x7d, 0x41, 0x5f, 0xd0,
		0x17, 0xf4, 0x05, 0x7d, 0x41, 0x5f, 0xd0, 0xd7, 0x0c, 0x7d, 0x49, 0xd7, 0xfe, 0x9d, 0x1a, 0x13,
		0xf2, 0x82, 0xbc, 0x20, 0x2f, 0xc8, 0x0b, 0xf2, 0x82, 0xbc, 0x20, 0x2f, 0xc8, 0x0b, 0xf2, 0x9a,
		0x21, 0x2f, 0x5b, 0x95, 0x7f, 0x17, 0x8c, 0x0d, 0x89, 0x41, 0x62, 0x90, 0x18, 0x24, 0x06, 0x89,
		0x41, 0x62, 0x90, 0x18, 0x24, 0x06, 0x89, 0xcd, 0x90, 0x98, 0x74, 0xed, 0xdf, 0xa9, 0x31, 0x21,
		0x2f, 0xc8, 0x0b, 0xf2, 0x82, 0xbc, 0x20, 0x2f, 0xc8, 0x0b, 0xf2, 0x82, 0xbc, 0x20, 0xaf, 0x19,
		0xf2, 0x92, 0x8f, 0x7c, 0x11, 0xef, 0x82, 0xba, 0xa0, 0x2e, 0xa8, 0x0b, 0xea, 0x82, 0xba, 0xa0,
		0x2e, 0xa8, 0x0b, 0xea, 0x9a, 0xa7, 0x2e, 0x3b, 0xf5, 0x7f, 0xe7, 0x46, 0x86, 0xc2, 0xa0, 0x30,
		0x28, 0x0c, 0x0a, 0x83, 0xc2, 0xa0, 0x30, 0x28, 0x0c, 0x0a, 0xdb, 0x34, 0x0a, 0xdb, 0x71, 0xb8,
		0xe7, 0xcd, 0x8b, 0xa1, 0x18, 0x52, 0xde, 0x7c, 0xf1, 0x93, 0xa8, 0xe3, 0xc7, 0x5e, 0x6f, 0x6f,
		0x79, 0x2d, 0x53, 0xd4, 0x13, 0x2f, 0x76, 0x22, 0x54, 0xe4, 0xc4, 0x40, 0x41, 0x31, 0xdd, 0xae,
		0x24, 0xea, 0x4e, 0x53, 0xa2, 0x4e, 0xc3, 0x30, 0x4a, 0xfb, 0x33, 0x6a, 0x64, 0x38, 0x2a, 0x49,
		0xe3, 0x93, 0xdf, 0xf6, 0x3a, 0x5e, 0xfa, 0xa9, 0xf7, 0xed, 0x77, 0xa3, 0x8e, 0x1f, 0x36, 0xfa,
		0x3e, 0x47, 0x35, 0xe8, 0xd1, 0xd6, 0x83, 0xd7, 0xf0, 0x93, 0xdd, 0x45, 0xbf, 0xdd, 0x4d, 0xba,
		0xf7, 0x53, 0x7f, 0x3f, 0xfd, 0xa7, 0xdd, 0x24, 0xf5, 0x52, 0x7f, 0x77, 0x08, 0x6c, 0x26, 0xae,
		0x54, 0x25, 0x49, 0xe3, 0x6e, 0x23, 0x0d, 0x87, 0x08, 0x78, 0x31, 0x7a, 0x43, 0xfd, 0x66, 0xea,
		0x75, 0xf5, 0xb3, 0xd1, 0x8b, 0x76, 0xdc, 0xac, 0x9b, 0x86, 0x60, 0x55, 0x9a, 0x7e, 0xd2, 0x88,
		0x83, 0x8e, 0xd1, 0x82, 0x8d, 0x51, 0x78, 0x7a, 0x30, 0xcd, 0xfd, 0x63, 0x06, 0x07, 0xc6, 0x7e,
		0xa9, 0x84, 0x3f, 0x2a, 0xe6, 0x87, 0x4a, 0xf9, 0x9f, 0xe2, 0x7e, 0xa7, 0xb8, 0xbf, 0x29, 0xe9,
		0x67, 0xba, 0x25, 0x08, 0x63, 0x7f, 0x72, 0xbc, 0x5b, 0x92, 0x34, 0x0e, 0xc2, 0x47, 0x93, 0xed,
		0x32, 0x94, 0x9d, 0xfd, 0x93, 0x02, 0xeb, 0x1b, 0x3f, 0xf4, 0xee, 0x5b, 0x7e, 0xd3, 0x5c, 0xd7,
		0x8c, 0x06, 0xd2, 0x5c, 0xb7, 0x77, 0xfe, 0x83, 0xd7, 0x6d, 0xf5, 0xf7, 0x5b, 0x6f, 0xfb, 0xa2,
		0xae, 0x50, 0x57, 0xa8, 0x2b, 0x95, 0xdd, 0x72, 0x1f, 0x45, 0x2d, 0xdf, 0x0b, 0x25, 0xf4, 0xd5,
		0x7e, 0x81, 0xf5, 0x55, 0xf0, 0x10, 0x84, 0x4d, 0xff, 0x9b, 0xb9, 0xbe, 0x1a, 0x0d, 0x84, 0xa2,
		0x41, 0xd1, 0xa0, 0x68, 0x14, 0x76, 0x4b, 0x37, 0x08, 0xd3, 0xd7, 0x35, 0x01, 0x3d, 0x73, 0x6c,
		0x30, 0x84, 0x4c, 0x30, 0x5d, 0xe0, 0xd4, 0x41, 0x32, 0x78, 0x2e, 0x1c, 0x89, 0x95, 0x0e, 0x96,
		0xdb, 0x08, 0xb3, 0x0a, 0x04, 0xc7, 0x45, 0x83, 0xe2, 0xb6, 0x96, 0xe0, 0xa0, 0xf6, 0xe6, 0xe0,
		0xcd, 0xd1, 0x71, 0xed, 0xcd, 0x61, 0x81, 0xd7, 0x22, 0xa7, 0x10, 0xf3, 0xdd, 0x96, 0x87, 0x98,
		0xe5, 0xeb, 0x6b, 0x13, 0x6a, 0xce, 0x30, 0xed, 0x44, 0xf6, 0x99, 0x6e, 0xe1, 0xe9, 0xde, 0x71,
		0xa3, 0xfe, 0xb4, 0xfc, 0x26, 0x21, 0xaf, 0xc9, 0xc4, 0x67, 0x9a, 0x8a, 0xf1, 0xec, 0xe1, 0x77,
		0xe1, 0x77, 0xe1, 0x77, 0xe1, 0x77, 0xe1, 0x77, 0xe1, 0x77, 0xe1, 0x77, 0x95, 0xc9, 0xef, 0x72,
		0x82, 0x2b, 0x83, 0xfe, 0x92, 0x9f, 0x86, 0xda, 0xc6, 0x10, 0x5a, 0xa6, 0x07, 0x03, 0x3b, 0xc0,
		0x0e, 0xb0, 0x43, 0x61, 0xb7, 0xc8, 0x74, 0x93, 0x14, 0x48, 0xa4, 0x96, 0xee, 0x1e, 0x09, 0xcb,
		0xc0, 0x32, 0xa5, 0x62, 0x19, 0x7b, 0x89, 0xd4, 0x50, 0x0d, 0xd1, 0xe4, 0x32, 0xc6, 0xdb, 0x08,
		0x6f, 0x32, 0xdd, 0x44, 0x93, 0x0d, 0xd5, 0x9f, 0x96, 0x7b, 0x16, 0x3d, 0x06, 0x0d, 0xaf, 0x25,
		0xe0, 0x9a, 0x0d, 0x07, 0xc2, 0x2d, 0xc3, 0x2d, 0xc3, 0x2d, 0x53, 0xd8, 0x2d, 0xf9, 0xa7, 0xfb,
		0x41, 0x4c, 0x98, 0x70, 0x4c, 0x38, 0xd3, 0x0d, 0x31, 0x65, 0xf9, 0x86, 0xc3, 0xab, 0x69, 0x86,
		0xb8, 0xd4, 0x1f, 0x05, 0x56, 0x82, 0x95, 0x60, 0x25, 0x85, 0xdd, 0x92, 0xfb, 0x4d, 0x2e, 0x50,
		0x09, 0xdb, 0x8d, 0xed, 0x2e, 0xad, 0xed, 0xee, 0x4d, 0x7f, 0x35, 0x49, 0xbd, 0xb4, 0x9b, 0x98,
		0x9b, 0xf0, 0xe9, 0xc1, 0xb0, 0xe4, 0x58, 0x72, 0x2c, 0xb9, 0xc2, 0x6e, 0xf1, 0xc3, 0x6e, 0x7b,
		0xa8, 0x0a, 0x25, 0xcc, 0xf9, 0x81, 0xc1, 0x18, 0xe7, 0x61, 0xb7, 0xdd, 0xfb, 0x52, 0xdf, 0x41,
		0x02, 0x90, 0x00, 0x24, 0x60, 0xba, 0x21, 0x30, 0x1b, 0xef, 0x51, 0xdc, 0x04, 0xa6, 0xf5, 0x8e,
		0x2c, 0xd6, 0x39, 0x52, 0x5b, 0x99, 0xec, 0xb3, 0x94, 0xed, 0x27, 0x33, 0xce, 0x63, 0x6f, 0xeb,
		0xab, 0xde, 0xf3, 0xa8, 0xbc, 0x0f, 0x92, 0xf4, 0x34, 0x4d, 0x63, 0xa5, 0x19, 0xaf, 0x7c, 0x08,
		0xc2, 0xf3, 0x9e, 0xe9, 0x08, 0xfb, 0x16, 0x2d, 0xec, 0xb6, 0x5a, 0x2f, 0x15, 0x1e, 0xf6, 0xbe,
		0xe9, 0x3f, 0x7c, 0x19, 0x37, 0xfd, 0xd8, 0x6f, 0xbe, 0x7d, 0x1a, 0x3e, 0x2a, 0x3a, 0x81, 0x9a,
		0x1b, 0xd0, 0xca, 0xc6, 0x53, 0x50, 0x55, 0x99, 0x2a, 0x68, 0x65, 0xdb, 0xc2, 0xeb, 0x37, 0xe4,
		0xea, 0x9f, 0x58, 0x33, 0xd3, 0xaa, 0x33, 0x2c, 0x35, 0xb3, 0xab, 0xbf, 0xfc, 0xf2, 0xaf, 0xb4,
		0xf8, 0xbf, 0x2c, 0xf9, 0x92, 0x23, 0xf9, 0x5b, 0x11, 0xe8, 0xcd, 0x26, 0x6e, 0x4a, 0xe2, 0xa5,
		0x24, 0x4e, 0xd9, 0xc4, 0x67, 0xd9, 0xf7, 0xcb, 0xb8, 0x78, 0xfa, 0x8b, 0xb6, 0x62, 0xcf, 0x2f,
		0xdb, 0xe3, 0x8b, 0x57, 0x76, 0x7e, 0xdd, 0x66, 0xff, 0xe6, 0xd9, 0x37, 0x5c, 0xf7, 0xcd, 0x54,
		0xbf, 0xd1, 0xec, 0x87, 0x9a, 0xbc, 0x7a, 0xea, 0xb5, 0x95, 0x7f, 0xa2, 0xf9, 0x80, 0xc4, 0xd8,
		0x57, 0xea, 0xfd, 0xc7, 0x67, 0x1f, 0x71, 0xe4, 0xf7, 0x3c, 0xfb, 0xeb, 0x65, 0x01, 0x81, 0x55,
		0x8e, 0xfe, 0xb4, 0x03, 0x3f, 0xff, 0xa6, 0x2c, 0x9e, 0x79, 0x66, 0x8f, 0x3b, 0xb3, 0x27, 0xfd,
		0xdc, 0x43, 0xee, 0x7d, 0x2e, 0xc5, 0x45, 0x7c, 0x17, 0x2c, 0x16, 0xab, 0x4a, 0xa3, 0xe5, 0x25,
		0x49, 0xf0, 0x10, 0xf8, 0xf1, 0xf2, 0x18, 0xd0, 0xa4, 0x04, 0xf5, 0xd4, 0x0f, 0x2f, 0x93, 0xf3,
		0x85, 0x4b, 0x91, 0x39, 0x46, 0x93, 0x25, 0x06, 0xb3, 0x7e, 0x89, 0x54, 0x83, 0x28, 0xca, 0x41,
		0x12, 0xe5, 0x20, 0x48, 0xa6, 0x25, 0xd4, 0xd3, 0xac, 0xcb, 0x96, 0x76, 0xc1, 0x12, 0xaf, 0x9f,
		0x88, 0xf9, 0x95, 0x5e, 0x37, 0x13, 0xab, 0x17, 0x5c, 0x39, 0x38, 0xa7, 0x12, 0x84, 0xcb, 0xbe,
		0x11, 0x74, 0xa3, 0x6a, 0xda, 0xd1, 0x33, 0xed, 0x28, 0x99, 0xd2, 0x46, 0x91, 0xe1, 0x8e, 0x75,
		0x1b, 0x68, 0xb2, 0x91, 0x46, 0x6b, 0x98, 0x71, 0xf2, 0x26, 0x95, 0xeb, 0xfb, 0xcf, 0x65, 0x25,
		0xf5, 0x4c, 0x1b, 0x4a, 0x3b, 0xea, 0xab, 0x13, 0xe5, 0x55, 0xdf, 0x68, 0xa6, 0x61, 0x5c, 0xe3,
		0xb0, 0xad, 0x71, 0x98, 0x56, 0x6b, 0x23, 0xda, 0xf1, 0xdd, 0xb2, 0x6e, 0xd0, 0xf1, 0x03, 0x5a,
		0x49, 0x09, 0x26, 0xc9, 0x08, 0x9a, 0x47, 0x17, 0xda, 0x47, 0x16, 0x26, 0x47, 0x15, 0xfa, 0x9b,
		0x59, 0xea, 0x6c, 0x42, 0xec, 0x4c, 0x42, 0xec, 0x2c, 0xc2, 0x68, 0xb3, 0xbb, 0x09, 0x00, 0x69,
		0x1f, 0x36, 0x98, 0xa7, 0x0b, 0x68, 0xa6, 0x09, 0x28, 0x84, 0x7a, 0x14, 0x14, 0x6a, 0xaa, 0x33,
		0x0f, 0x93, 0x5b, 0x7f, 0xbd, 0xa7, 0x91, 0x6d, 0x64, 0x7b, 0xc3, 0x64, 0xdb, 0xec, 0x00, 0xd1,
		0xe4, 0xe0, 0x50, 0xf3, 0xc0, 0x30, 0xaf, 0x38, 0xb0, 0x7c, 0x18, 0xf3, 0x9f, 0x28, 0xd9, 0xed,
		0xfd, 0x6f, 0xca, 0x39, 0x9e, 0xfa, 0xfd, 0xee, 0x10, 0x7e, 0xa5, 0x22, 0x8c, 0x19, 0x7c, 0x1c,
		0x25, 0xfa, 0xd1, 0xa1, 0x1e, 0x45, 0x8d, 0x08, 0xa2, 0x6f, 0x3e, 0xa2, 0x2b, 0x6b, 0xb0, 0xc9,
		0x4d, 0x29, 0xdf, 0x7b, 0x88, 0x7d, 0x95, 0x54, 0x99, 0xb1, 0xb6, 0x52, 0x28, 0xf8, 0x53, 0xb9,
		0x1a, 0x4a, 0xee, 0xab, 0x57, 0x43, 0x89, 0xdc, 0xed, 0x6f, 0x78, 0x87, 0x62, 0x39, 0x38, 0x2c,
		0x53, 0x96, 0xcb, 0xc1, 0x63, 0x96, 0x7d, 0xe7, 0x1a, 0x82, 0x89, 0xef, 0x8c, 0xef, 0x0c, 0x5f,
		0xc3, 0xd7, 0xf8, 0xce, 0xf8, 0xce, 0xc8, 0x36, 0xbe, 0x33, 0xbe, 0x73, 0xfe, 0xbe, 0xb3, 0x42,
		0x7e, 0x99, 0x0c, 0xa3, 0xa7, 0x7e, 0xdc, 0x4e, 0xd4, 0x19, 0x7d, 0xf0, 0x18, 0xe7, 0x5b, 0x30,
		0xba, 0x1b, 0x46, 0xef, 0xed, 0x37, 0x03, 0x3b, 0xde, 0x7b, 0x5a, 0xcf, 0x8e, 0xef, 0x63, 0xc7,
		0xb1, 0xe3, 0x76, 0xec, 0xb8, 0xaa, 0x10, 0x8c, 0x1f, 0x1c, 0x54, 0x78, 0x13, 0xb8, 0xc1, 0x36,
		0x1a, 0xc8, 0xec, 0xf6, 0xda, 0xfe, 0x86, 0xdc, 0x5e, 0xd3, 0x13, 0x1d, 0x29, 0x11, 0x12, 0x17,
		0x25, 0x71, 0x91, 0x12, 0x15, 0x2d, 0x3d, 0x11, 0xd3, 0x14, 0x35, 0x63, 0x91, 0x1b, 0x0f, 0xa0,
		0x98, 0x10, 0xb4, 0x76, 0xdb, 0x29, 0x25, 0x0a, 0x59, 0x12, 0x44, 0x31, 0x81, 0x94, 0x14, 0x4c,
		0x79, 0x01, 0x95, 0x16, 0x54, 0x6b, 0x02, 0x6b, 0x4d, 0x70, 0xad, 0x08, 0xb0, 0x99, 0x20, 0x1b,
		0x0a, 0xb4, 0x98, 0x60, 0x4f, 0x40, 0xd3, 0x8b, 0x1f, 0xfd, 0xb4, 0xfa, 0x18, 0x47, 0xdd, 0x8e,
		0xdc, 0x16, 0x19, 0x83, 0xe8, 0xf4, 0xe8, 0x2f, 0x0b, 0x59, 0xa3, 0x56, 0x4a, 0x09, 0xd8, 0x50,
		0x06, 0xf6, 0x94, 0x82, 0x2d, 0xe5, 0x60, 0x5d, 0x49, 0x58, 0x57, 0x16, 0x56, 0x95, 0x86, 0x8c,
		0xf2, 0x10, 0x52, 0x22, 0xe6, 0x01, 0xb6, 0xb5, 0xfb, 0x55, 0xfd, 0xe8, 0x37, 0xb3, 0xed, 0x3f,
		0x16, 0x1c, 0x73, 0xea, 0xe8, 0x78, 0xfe, 0x9f, 0x87, 0x28, 0xfe, 0xea, 0xc5, 0xcd, 0x20, 0x7c,
		0x1c, 0xe8, 0xb1, 0x64, 0xee, 0x6f, 0xd4, 0xcf, 0x9b, 0xed, 0xef, 0x8f, 0x7c, 0xcd, 0x93, 0xe1,
		0x5d, 0x56, 0xb9, 0xf8, 0x62, 0x3f, 0x6e, 0xd7, 0xff, 0xff, 0xdd, 0xa1, 0xf3, 0xa7, 0x94, 0xae,
		0x23, 0x3f, 0xbb, 0x06, 0x33, 0x5b, 0x89, 0xfd, 0xb6, 0x17, 0x7f, 0x96, 0x83, 0xf1, 0xe1, 0x78,
		0xc0, 0x38, 0x30, 0x0e, 0x8c, 0x17, 0x01, 0xc6, 0x85, 0xbc, 0x6d, 0x3b, 0x5e, 0xb7, 0xb0, 0xc0,
		0x03, 0xe0, 0x00, 0x38, 0x00, 0x2e, 0xab, 0x40, 0x26, 0xbc, 0xe4, 0xa7, 0xd5, 0x66, 0x94, 0xee,
		0x77, 0xe4, 0xf7, 0xd5, 0x38, 0x5f, 0x66, 0xfc, 0x0a, 0xe1, 0x65, 0x97, 0xf5, 0xef, 0xad, 0xa9,
		0x19, 0x9b, 0xea, 0xc6, 0xbe, 0xda, 0xb1, 0xad, 0x7e, 0x9c, 0xa9, 0x21, 0x67, 0xea, 0xc8, 0x89,
		0x5a, 0x92, 0x55, 0x4f, 0xc2, 0x6a, 0xca, 0x5e, 0xbc, 0x60, 0x6e, 0xbf, 0x77, 0x83, 0x30, 0x3d,
		0xb1, 0xb1, 0xdd, 0x87, 0xca, 0xe5, 0xd0, 0xc2, 0xd0, 0x32, 0x4d, 0xd9, 0x96, 0xfd, 0xb2, 0x23,
		0x9e, 0x2f, 0xa4, 0x9b, 0xb8, 0x39, 0xd6, 0xea, 0x73, 0xaf, 0x11, 0x6e, 0xfa, 0xb6, 0xf4, 0x3d,
		0x16, 0xda, 0x8e, 0x39, 0x92, 0xde, 0xd9, 0xa5, 0xf7, 0xbe, 0x6d, 0xdc, 0xd2, 0xd7, 0x0e, 0x0f,
		0x37, 0x68, 0xf1, 0x77, 0xca, 0x31, 0xea, 0xdd, 0x4e, 0x31, 0x3f, 0x9f, 0xa0, 0xf0, 0x0c, 0x88,
		0x37, 0x69, 0xd8, 0x66, 0xea, 0xde, 0x1b, 0x40, 0x6a, 0x90, 0x1a, 0xa4, 0x06, 0xa9, 0x41, 0x6a,
		0x90, 0x1a, 0xa4, 0x06, 0xa9, 0x41, 0x6a, 0x90, 0x7a, 0x53, 0x91, 0xba, 0xdd, 0x69, 0x25, 0xd5,
		0xb4, 0x61, 0x97, 0xaa, 0x47, 0x2f, 0x01, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01,
		0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0xeb, 0xc2, 0x80, 0x75, 0xa1, 0x72, 0x52, 0x84, 0x53,
		0x78, 0x27, 0xc8, 0x2f, 0x98, 0xca, 0x3b, 0x48, 0x60, 0x15, 0xc9, 0xe8, 0x95, 0x5b, 0x04, 0x81,
		0x05, 0x50, 0xac, 0x24, 0x96, 0xdd, 0x13, 0x52, 0xa8, 0x34, 0x96, 0x55, 0x55, 0x8a, 0xa7, 0x01,
		0xd6, 0x48, 0x03, 0x2c, 0x91, 0x4f, 0x43, 0x1a, 0x20, 0x69, 0x80, 0xa4, 0x01, 0x12, 0x5a, 0x21,
		0xb4, 0x42, 0x68, 0x85, 0xd0, 0x0a, 0xa1, 0x15, 0x42, 0x2b, 0x84, 0x56, 0x08, 0xad, 0x10, 0x5a,
		0x29, 0x58, 0x68, 0x85, 0x34, 0x40, 0x90, 0x1a, 0xa4, 0x06, 0xa9, 0x41, 0x6a, 0x90, 0x1a, 0xa4,
		0x06, 0xa9, 0x41, 0x6a, 0x90, 0x1a, 0xa4, 0x2e, 0x12, 0x52, 0x93, 0x06, 0x08, 0x58, 0x03, 0xd6,
		0x80, 0x35, 0x60, 0x0d, 0x58, 0x03, 0xd6, 0x80, 0x35, 0x60, 0x0d, 0x58, 0x6f, 0x27, 0x58, 0x93,
		0x06, 0xa8, 0x97, 0x06, 0xa8, 0xd0, 0x4b, 0xc8, 0xfe, 0x1a, 0x50, 0x7f, 0x75, 0xf5, 0x6a, 0x55,
		0x44, 0xb2, 0x24, 0xe3, 0x6e, 0x23, 0x1d, 0xb6, 0xb3, 0xac, 0xfc, 0x1e, 0x25, 0xf5, 0xb3, 0xf1,
		0x9b, 0xeb, 0xb7, 0x7e, 0xdc, 0xae, 0x9f, 0x0e, 0xde, 0x59, 0xbf, 0x1e, 0xbc, 0xb3, 0x84, 0x35,
		0x5f, 0x65, 0x32, 0x41, 0x45, 0x33, 0x40, 0xc5, 0x2b, 0xbe, 0xd6, 0xa8, 0xf8, 0x5a, 0x00, 0xf7,
		0x94, 0x8a, 0xaf, 0xd9, 0xbf, 0x11, 0xed, 0x17, 0x68, 0xbf, 0x50, 0xe4, 0x58, 0x16, 0x69, 0xdf,
		0x25, 0x42, 0x6c, 0xda, 0x2f, 0xd0, 0x7e, 0x61, 0x7b, 0xf0, 0x5f, 0xc0, 0x4b, 0xfb, 0x5e, 0x92,
		0xee, 0x6b, 0x42, 0xcb, 0x20, 0x39, 0xfd, 0x15, 0x23, 0x57, 0x24, 0xa3, 0xbb, 0xa5, 0xb7, 0xba,
		0xea, 0x6b, 0xa3, 0xb1, 0x2e, 0x95, 0x46, 0x14, 0x36, 0x03, 0xa1, 0x76, 0x92, 0x53, 0x63, 0xd1,
		0x51, 0x92, 0x8e, 0x92, 0x39, 0xc1, 0x4d, 0xc9, 0x3a, 0x4a, 0x06, 0x9d, 0x2f, 0x07, 0x72, 0xf1,
		0x8c, 0xfe, 0x68, 0x34, 0xb0, 0xc9, 0x22, 0x9c, 0x9d, 0xcf, 0x69, 0xb5, 0xed, 0xa5, 0x8d, 0x4f,
		0x04, 0x35, 0x2c, 0xf8, 0x27, 0x93, 0xd9, 0x25, 0xb4, 0x31, 0xb6, 0xb4, 0x34, 0xb3, 0x29, 0x7a,
		0x38, 0x43, 0x52, 0x29, 0x10, 0xd4, 0xc8, 0x51, 0x69, 0x14, 0x33, 0xb4, 0x21, 0x7e, 0xa3, 0xbd,
		0xe9, 0x27, 0x69, 0x10, 0xf6, 0x7d, 0xaa, 0xaa, 0xd7, 0x6c, 0xc6, 0x7e, 0x92, 0xd8, 0xcb, 0x18,
		0x5c, 0xf4, 0x32, 0x32, 0x07, 0x5d, 0x64, 0x0e, 0xda, 0x50, 0x4b, 0xb6, 0xd5, 0x93, 0x33, 0x35,
		0xe5, 0x4c, 0x5d, 0x39, 0x54, 0x5b, 0xb2, 0xea, 0x4b, 0x58, 0x8d, 0x8d, 0xe7, 0xc1, 0x7e, 0x16,
		0x61, 0xcf, 0x9f, 0xa9, 0x5a, 0xdb, 0x35, 0x63, 0xda, 0x39, 0xb1, 0x30, 0xf6, 0x95, 0x97, 0xa6,
		0x7e, 0x1c, 0x5a, 0x4b, 0x27, 0xac, 0xfc, 0xdf, 0x0f, 0x3f, 0xfc, 0xbd, 0x57, 0x7d, 0x73, 0xf7,
		0xdf, 0xbf, 0xf7, 0xab, 0x6f, 0xee, 0x06, 0xbf, 0xdd, 0xef, 0xff, 0x6b, 0xf0, 0xfb, 0xda, 0xdf,
		0x7b, 0xd5, 0x83, 0xd1, 0xef, 0x0f, 0xff, 0xde, 0xab, 0x1e, 0xde, 0xfd, 0xf8, 0xef, 0x7f, 0xbf,
		0xfa, 0xf1, 0x3f, 0xaf, 0xbf, 0xab, 0x3f, 0xb8, 0x3b, 0x7c, 0xd9, 0x8f, 0xff, 0xfd, 0xe1, 0xef,
		0xfd, 0x6a, 0xed, 0x6e, 0xf4, 0x87, 0xd7, 0x7f, 0xef, 0x55, 0x6b, 0x77, 0x3f, 0xfe, 0xf8, 0x3f,
		0x15, 0x32, 0xfd, 0x75, 0xec, 0xb7, 0xd5, 0x8b, 0xb3, 0x5c, 0x9a, 0xc5, 0x42, 0x63, 0xa1, 0xb1,
		0xd0, 0x36, 0xf7, 0xbe, 0x05, 0x1d, 0xf3, 0x82, 0x34, 0xff, 0xc5, 0x1f, 0x9c, 0x34, 0x7f, 0xf5,
		0xf7, 0x90, 0xe6, 0x5f, 0xd8, 0xa5, 0x3f, 0x7a, 0x4d, 0x96, 0xbf, 0xeb, 0x51, 0xb7, 0x01, 0xaa,
		0x3f, 0x45, 0x9d, 0x6a, 0x2b, 0x68, 0x07, 0xa9, 0x3d, 0xb2, 0x9e, 0xbc, 0x02, 0xbc, 0x06, 0xaf,
		0xc1, 0x6b, 0xf0, 0xda, 0xd2, 0xde, 0xe7, 0x1a, 0x2d, 0x7c, 0x0d, 0x5f, 0xc3, 0xd7, 0x3a, 0x4b,
		0xcf, 0x35, 0x5a, 0x00, 0xdb, 0x0a, 0x60, 0x77, 0xe2, 0x28, 0x8d, 0x1a, 0x51, 0xcb, 0x1e, 0x5f,
		0x8f, 0xdf, 0x00, 0x5e, 0x83, 0xd7, 0xe0, 0x35, 0x78, 0x6d, 0x69, 0xef, 0x07, 0x9d, 0xea, 0x48,
		0xd5, 0x54, 0xd3, 0xde, 0xdb, 0x2c, 0x1e, 0x32, 0xbf, 0xb1, 0x30, 0xf6, 0x70, 0x86, 0x4a, 0x47,
		0xda, 0xb6, 0xdd, 0x1b, 0x07, 0x6e, 0x8e, 0x23, 0x77, 0xc7, 0xfe, 0x62, 0x38, 0x75, 0x7f, 0x1c,
		0xb3, 0xb0, 0x6b, 0x77, 0x28, 0x0f, 0x32, 0x76, 0xe0, 0x1e, 0x39, 0x75, 0x93, 0xf2, 0xde, 0x22,
		0xb5, 0xc3, 0x83, 0x0d, 0xde, 0x24, 0x3b, 0xe5, 0x1c, 0xfd, 0x6e, 0xa7, 0x44, 0x22, 0xe3, 0xc0,
		0x70, 0x06, 0x4d, 0x3f, 0x4c, 0x83, 0xf4, 0x49, 0xf6, 0x3a, 0xf3, 0x52, 0x76, 0xb1, 0x69, 0x3f,
		0x2f, 0x86, 0x5f, 0xe5, 0xad, 0x97, 0xf8, 0xf6, 0x63, 0x30, 0xa3, 0x09, 0xbc, 0xb8, 0xaa, 0x5f,
		0x5d, 0x5f, 0xde, 0x5e, 0x9e, 0x5d, 0xbe, 0xaf, 0xb8, 0x88, 0xc7, 0x24, 0xd6, 0x09, 0xc1, 0x0d,
		0x25, 0x3c, 0x9f, 0xc4, 0x8b, 0x5f, 0x3e, 0x5c, 0x55, 0x36, 0xc1, 0xb6, 0xb9, 0x9f, 0xba, 0xeb,
		0x9b, 0x3f, 0x99, 0x3a, 0xbd, 0xa9, 0x7b, 0x5f, 0xbb, 0x65, 0xea, 0xf4, 0xa6, 0xee, 0x8f, 0x77,
		0xcc, 0x9c, 0xde, 0xcc, 0xfd, 0x72, 0x7d, 0xce, 0xcc, 0xe9, 0x19, 0x89, 0x33, 0x8c, 0x84, 0xe6,
		0xd4, 0xdd, 0x9e, 0x31, 0x73, 0x9a, 0x78, 0x77, 0xf1, 0x81, 0x99, 0xd3, 0x9a, 0xb9, 0xd3, 0x3f,
		0x6e, 0x7f, 0xad, 0x94, 0xdc, 0x15, 0xbd, 0xe3, 0x24, 0x72, 0x1b, 0x3a, 0x65, 0xf4, 0xcf, 0x96,
		0xec, 0x5f, 0x7d, 0x7d, 0xf6, 0x1e, 0x4e, 0x25, 0x39, 0x95, 0x5c, 0xb7, 0xa6, 0x9c, 0x4a, 0x16,
		0x44, 0x17, 0x72, 0xeb, 0x75, 0xb1, 0xba, 0xe1, 0xd6, 0x2b, 0xb7, 0x5e, 0x5d, 0x8f, 0xb4, 0x0d,
		0x65, 0xf8, 0x27, 0x65, 0xf0, 0x76, 0x7b, 0x82, 0x3c, 0x2c, 0xc7, 0x59, 0x98, 0x4a, 0x9c, 0x22,
		0x85, 0xe6, 0x25, 0x8a, 0xb0, 0xcf, 0x43, 0x96, 0x40, 0x31, 0xf6, 0x39, 0x25, 0x27, 0x5d, 0xc8,
		0xa8, 0x46, 0x21, 0x23, 0x0a, 0x19, 0xe5, 0xc0, 0x46, 0x14, 0x32, 0x92, 0x93, 0x0f, 0x0a, 0x19,
		0xe1, 0xd2, 0xe1, 0xd2, 0xe1, 0xd2, 0xe1, 0xd2, 0xe1, 0xd2, 0x51, 0xc8, 0x48, 0xc6, 0x7e, 0x53,
		0xc8, 0x08, 0x0b, 0x8d, 0x85, 0xc6, 0x42, 0x97, 0xd6, 0x42, 0x53, 0xc8, 0xe8, 0xd9, 0x2f, 0x2e,
		0x5a, 0x67, 0x7a, 0x0d, 0x17, 0xad, 0xd5, 0x96, 0x9e, 0x42, 0x46, 0xc5, 0x5e, 0x7b, 0xb2, 0x1b,
		0x0a, 0x03, 0xd5, 0x14, 0x32, 0x02, 0xaf, 0xc1, 0x6b, 0xf0, 0x7a, 0x13, 0xf0, 0x9a, 0x42, 0x46,
		0xf0, 0x35, 0x7c, 0x0d, 0x5f, 0xeb, 0x2c, 0x3d, 0x85, 0x8c, 0x00, 0x6c, 0x2b, 0x80, 0x4d, 0x21,
		0x23, 0xf0, 0x1a, 0xbc, 0x06, 0xaf, 0xcb, 0x8f, 0xd7, 0x14, 0x32, 0xca, 0x87, 0xb4, 0x29, 0x64,
		0x54, 0x9c, 0xc5, 0x70, 0xea, 0xfe, 0x38, 0x66, 0x61, 0xd7, 0xee, 0x50, 0x1e, 0x64, 0xec, 0xc0,
		0x3d, 0x72, 0xea, 0x26, 0xe5, 0xbd, 0x45, 0x28, 0x64, 0x54, 0xc0, 0xd1, 0x29, 0x64, 0xf4, 0x0c,
		0x5c, 0x28, 0x64, 0x64, 0x36, 0x81, 0x14, 0x32, 0x92, 0x99, 0x44, 0x0a, 0x19, 0x69, 0x4f, 0x1d,
		0x85, 0x8c, 0xb4, 0xa7, 0x8e, 0x42, 0x46, 0xda, 0x53, 0x47, 0x21, 0x23, 0xdd, 0x99, 0xa3, 0x90,
		0x91, 0xb6, 0x91, 0xa0, 0x90, 0x91, 0xee, 0xd4, 0x51, 0xc8, 0x48, 0x1b, 0xef, 0x28, 0x64, 0xa4,
		0x39, 0x73, 0x14, 0x32, 0x72, 0xff, 0xb9, 0x39, 0x89, 0xd4, 0xd9, 0xb4, 0x14, 0x32, 0x5a, 0x31,
		0x2c, 0xa7, 0x92, 0x2b, 0xde, 0xc3, 0xa9, 0xa4, 0xea, 0x8b, 0x38, 0x95, 0x1c, 0xcc, 0x03, 0xb7,
		0x5e, 0x57, 0xa9, 0x06, 0x6e, 0xbd, 0x6e, 0xa8, 0xd5, 0xa6, 0x90, 0x91, 0x66, 0x21, 0xa3, 0x41,
		0x7d, 0x9e, 0xa2, 0xd4, 0x31, 0xda, 0xc9, 0x71, 0xf9, 0xa4, 0x97, 0xcd, 0xc6, 0x72, 0x55, 0x44,
		0x0a, 0x3d, 0xc5, 0xdd, 0x46, 0x1a, 0x0e, 0xb5, 0xf9, 0xef, 0x51, 0x52, 0x3f, 0x1b, 0xbf, 0xba,
		0x7e, 0xeb, 0xc7, 0xed, 0xfa, 0xd9, 0xf8, 0xa5, 0xf5, 0x8b, 0xde, 0x4b, 0x77, 0xf2, 0x59, 0x53,
		0x83, 0xf5, 0xec, 0x19, 0xa9, 0x23, 0xe3, 0x55, 0x9c, 0x36, 0x79, 0x47, 0x86, 0x53, 0x2f, 0x54,
		0xbb, 0x4a, 0x0c, 0x9b, 0x25, 0x31, 0xd9, 0x16, 0x16, 0x4b, 0x63, 0xb0, 0x35, 0xec, 0xb5, 0x86,
		0xb9, 0x16, 0xb1, 0x36, 0x5f, 0x5d, 0x2b, 0x55, 0x6b, 0xaa, 0xd2, 0x18, 0xc9, 0x83, 0x70, 0xdd,
		0xba, 0xe1, 0xb8, 0x05, 0x2f, 0x5c, 0xb7, 0x47, 0xe1, 0x3a, 0x0a, 0xd7, 0xe5, 0xe0, 0x0b, 0x53,
		0xb8, 0x4e, 0x4e, 0x3e, 0x28, 0x5c, 0x47, 0x08, 0x8f, 0x10, 0x1e, 0x21, 0x3c, 0xb7, 0x21, 0xbc,
		0x23, 0x42, 0x78, 0x2b, 0x43, 0x78, 0x5e, 0xf5, 0xe1, 0xb4, 0xfa, 0xf3, 0xdd, 0x7f, 0xf6, 0x5f,
		0x1e, 0x7c, 0xff, 0xe9, 0xc7, 0xff, 0x1c, 0x7f, 0x7f, 0xfe, 0x97, 0xff, 0x5d, 0xf4, 0x63, 0xfb,
		0x2f, 0x8f, 0xbf, 0xff, 0xb4, 0xe4, 0xbf, 0x1c, 0x7d, 0xff, 0x29, 0xe3, 0x18, 0x87, 0xdf, 0x7f,
		0x98, 0xfb, 0xd1, 0xde, 0xdf, 0xd7, 0x96, 0x3d, 0x70, 0xb0, 0xe4, 0x81, 0xd7, 0xcb, 0x1e, 0x78,
		0xbd, 0xe4, 0x81, 0xa5, 0x1f, 0xa9, 0xb6, 0xe4, 0x81, 0xc3, 0xef, 0xff, 0x9d, 0xfb, 0xf9, 0x1f,
		0x16, 0xff, 0xe8, 0xd1, 0xf7, 0x1f, 0xff, 0xbb, 0xec, 0xbf, 0x1d, 0x7f, 0xff, 0xef, 0x4f, 0x3f,
		0xfe, 0xb8, 0xfb, 0xc3, 0x7e, 0xed, 0xef, 0xbd, 0xea, 0xc9, 0x20, 0xf4, 0xb9, 0x7f, 0x37, 0x17,
		0x11, 0x1d, 0x44, 0x38, 0xa9, 0xe6, 0x67, 0x0c, 0x35, 0x0f, 0xad, 0xe8, 0x6b, 0xb5, 0xe5, 0xdd,
		0xfb, 0x2d, 0x37, 0x5c, 0x33, 0xf5, 0x3e, 0xd0, 0x06, 0xb4, 0x01, 0x6d, 0x40, 0x1b, 0x9b, 0x68,
		0x63, 0x4d, 0xdd, 0x4c, 0xab, 0x9c, 0x63, 0x8a, 0x93, 0x4c, 0x3e, 0x38, 0xc5, 0x49, 0xd4, 0xdf,
		0x43, 0x71, 0x92, 0xc2, 0x2e, 0xfd, 0xfe, 0xde, 0xc1, 0xc9, 0xe1, 0x31, 0x05, 0x4a, 0x9c, 0x8f,
		0x4a, 0x59, 0x6d, 0x63, 0xec, 0xa6, 0xac, 0x36, 0x90, 0x0d, 0x64, 0x03, 0xd9, 0x94, 0xd5, 0x86,
		0xac, 0x21, 0x6b, 0xc8, 0xba, 0x58, 0x4b, 0x4f, 0x59, 0x6d, 0xa0, 0xda, 0x06, 0x54, 0x53, 0x56,
		0x1b, 0xbc, 0x06, 0xaf, 0xc1, 0xeb, 0x4d, 0xc0, 0x6b, 0xca, 0x6a, 0xc3, 0xd7, 0xf0, 0x35, 0x7c,
		0xad, 0xb3, 0xf4, 0x94, 0xd5, 0x06, 0xb0, 0xad, 0x00, 0x36, 0x65, 0xb5, 0xc1, 0x6b, 0xf0, 0x1a,
		0xbc, 0x2e, 0x3f, 0x5e, 0x53, 0x56, 0x3b, 0x1f, 0xd2, 0xa6, 0xac, 0x76, 0x71, 0x16, 0xc3, 0xa9,
		0xfb, 0xe3, 0x98, 0x85, 0x5d, 0xbb, 0x43, 0x79, 0x90, 0xb1, 0x03, 0xf7, 0xc8, 0xa9, 0x9b, 0x94,
		0xf7, 0x16, 0xa1, 0xac, 0x76, 0x01, 0x47, 0xa7, 0xac, 0xf6, 0x33, 0x70, 0xa1, 0xac, 0xb6, 0xd9,
		0x04, 0x52, 0x56, 0x5b, 0x66, 0x12, 0x29, 0xab, 0xad, 0x3d, 0x75, 0x94, 0xd5, 0xd6, 0x9e, 0x3a,
		0xca, 0x6a, 0x6b, 0x4f, 0x1d, 0x65, 0xb5, 0x75, 0x67, 0x8e, 0xb2, 0xda, 0xda, 0x46, 0x82, 0xb2,
		0xda, 0xba, 0x53, 0x47, 0x59, 0x6d, 0x6d, 0xbc, 0xa3, 0xac, 0xb6, 0xe6, 0xcc, 0x51, 0x56, 0xdb,
		0xfd, 0xe7, 0xe6, 0x24, 0x52, 0x67, 0xd3, 0x52, 0x56, 0x7b, 0xc5, 0xb0, 0x9c, 0x4a, 0xae, 0x78,
		0x0f, 0xa7, 0x92, 0xaa, 0x2f, 0xe2, 0x54, 0x72, 0x30, 0x0f, 0xd4, 0xe4, 0x59, 0xa5, 0x1a, 0xa8,
		0xc9, 0x43, 0x4d, 0x1e, 0x50, 0x46, 0x1f, 0x65, 0x5c, 0x94, 0xe3, 0x99, 0x7f, 0x15, 0x40, 0x03,
		0xd0, 0x00, 0x34, 0x00, 0x8d, 0x4d, 0xa0, 0xa1, 0x12, 0x8f, 0xe3, 0xf0, 0x0e, 0xf7, 0x19, 0x34,
		0xde, 0xc3, 0x7d, 0x86, 0xc2, 0x2e, 0x3d, 0x95, 0x78, 0x88, 0x24, 0x5a, 0x18, 0x69, 0xfb, 0x5a,
		0xfd, 0x1c, 0xed, 0x0e, 0x5b, 0x1a, 0x14, 0xa5, 0xd7, 0x8f, 0x48, 0x2b, 0x1b, 0x2f, 0xf5, 0xe5,
		0x7b, 0x3f, 0x0c, 0x86, 0x2d, 0x78, 0xeb, 0x87, 0x1a, 0xad, 0x1f, 0x68, 0xfd, 0x90, 0x83, 0x7b,
		0x43, 0xeb, 0x07, 0x39, 0xf9, 0xa0, 0xf5, 0x03, 0x51, 0x19, 0xa2, 0x32, 0x44, 0x65, 0x5c, 0x47,
		0x65, 0x38, 0x66, 0x5a, 0xf8, 0x02, 0x8e, 0x99, 0x38, 0x66, 0x2a, 0x8e, 0x9f, 0x4b, 0xeb, 0x07,
		0xd0, 0x06, 0xb4, 0x01, 0x6d, 0x40, 0x1b, 0x15, 0xb4, 0xe1, 0xc0, 0x69, 0xe1, 0x2f, 0x0e, 0x9c,
		0x32, 0xbd, 0x86, 0x03, 0x27, 0xb5, 0xa5, 0xe7, 0xc0, 0xa9, 0x04, 0x1b, 0x80, 0x03, 0xa7, 0xe2,
		0x80, 0x38, 0xad, 0x1f, 0x80, 0x6c, 0x20, 0x1b, 0xc8, 0x2e, 0x2d, 0x64, 0xd3, 0xfa, 0x01, 0xb2,
		0x86, 0xac, 0x21, 0x6b, 0x8d, 0xa5, 0xa7, 0xf5, 0x03, 0x50, 0x6d, 0x03, 0xaa, 0x69, 0xfd, 0x00,
		0x5e, 0x83, 0xd7, 0xe0, 0xf5, 0x26, 0xe0, 0x35, 0xad, 0x1f, 0xe0, 0x6b, 0xf8, 0x1a, 0xbe, 0xd6,
		0x59, 0x7a, 0x5a, 0x3f, 0x00, 0xd8, 0x56, 0x00, 0x9b, 0xd6, 0x0f, 0xe0, 0x35, 0x78, 0x0d, 0x5e,
		0x97, 0x1f, 0xaf, 0x69, 0xfd, 0x90, 0x0f, 0x69, 0xd3, 0xfa, 0xa1, 0x38, 0x8b, 0xe1, 0xd4, 0xfd,
		0x71, 0xcc, 0xc2, 0xae, 0xdd, 0xa1, 0x3c, 0xc8, 0xd8, 0x81, 0x7b, 0xe4, 0xd4, 0x4d, 0xca, 0x7b,
		0x8b, 0xd0, 0xfa, 0xa1, 0x80, 0xa3, 0xd3, 0xfa, 0xe1, 0x19, 0xb8, 0xd0, 0xfa, 0xc1, 0x6c, 0x02,
		0x69, 0xfd, 0x20, 0x33, 0x89, 0xb4, 0x7e, 0xd0, 0x9e, 0x3a, 0x5a, 0x3f, 0x68, 0x4f, 0x1d, 0xad,
		0x1f, 0xb4, 0xa7, 0x8e, 0xd6, 0x0f, 0xba, 0x33, 0x47, 0xeb, 0x07, 0x6d, 0x23, 0x41, 0xeb, 0x07,
		0xdd, 0xa9, 0xa3, 0xf5, 0x83, 0x36, 0xde, 0xd1, 0xfa, 0x41, 0x73, 0xe6, 0x68, 0xfd, 0xe0, 0xfe,
		0x73, 0x73, 0x12, 0xa9, 0xb3, 0x69, 0x69, 0xfd, 0xb0, 0x62, 0x58, 0x4e, 0x25, 0x57, 0xbc, 0x87,
		0x53, 0x49, 0xd5, 0x17, 0x71, 0x2a, 0x39, 0x98, 0x07, 0x6a, 0xf2, 0xac, 0x52, 0x0d, 0xd4, 0xe4,
		0xa1, 0x26, 0x0f, 0x28, 0xa3, 0x8f, 0x32, 0xb4, 0x7e, 0x00, 0x68, 0x00, 0x1a, 0x80, 0x66, 0xf3,
		0x80, 0x86, 0x4a, 0x3c, 0x8e, 0xc3, 0x3b, 0xdc, 0x67, 0xd0, 0x78, 0x0f, 0xf7, 0x19, 0x0a, 0xbb,
		0xf4, 0x54, 0xe2, 0x21, 0x92, 0x68, 0x61, 0xa4, 0x6d, 0x6c, 0xfd, 0x30, 0xe8, 0x68, 0x50, 0x94,
		0xce, 0x0f, 0x3b, 0x39, 0x2e, 0x9f, 0xf4, 0xb2, 0xd9, 0x58, 0xae, 0x8a, 0x48, 0x6b, 0x8c, 0xb8,
		0xdb, 0x48, 0xc3, 0x21, 0x90, 0xfd, 0x1e, 0x25, 0xf5, 0xb3, 0xf1, 0xab, 0xeb, 0xb7, 0x7e, 0xdc,
		0xae, 0x9f, 0x8d, 0x5f, 0x5a, 0xbf, 0xe8, 0xbd, 0x74, 0x27, 0x9f, 0x35, 0x35, 0x58, 0xcf, 0x4a,
		0xab, 0x66, 0xbc, 0x86, 0x63, 0x66, 0x6d, 0xd5, 0x0c, 0xa7, 0x5d, 0xa8, 0xd3, 0x87, 0x98, 0xd7,
		0x2b, 0xe9, 0xe5, 0xda, 0xf2, 0x6a, 0xa5, 0xbd, 0x58, 0x6b, 0x5e, 0xab, 0x35, 0x2f, 0xd5, 0xa2,
		0x57, 0x9a, 0xaf, 0x9e, 0x95, 0xea, 0xcc, 0x51, 0x69, 0x8c, 0xe4, 0x41, 0xb8, 0xcb, 0xcf, 0x70,
		0xdc, 0x82, 0xb7, 0xf9, 0xd9, 0xa3, 0xcd, 0x0f, 0x6d, 0x7e, 0x72, 0x08, 0x65, 0x6d, 0x51, 0x9b,
		0x9f, 0xb6, 0xd7, 0x70, 0x53, 0x0a, 0xbf, 0xf7, 0x22, 0x22, 0xef, 0x44, 0xde, 0x73, 0x56, 0x4f,
		0xce, 0xd4, 0x94, 0x43, 0x75, 0x65, 0x27, 0x18, 0x52, 0xbe, 0xc8, 0x7b, 0xdb, 0x6b, 0x58, 0xca,
		0x5a, 0x7a, 0x51, 0xfe, 0x54, 0x82, 0xe9, 0xa3, 0xee, 0xe7, 0x27, 0xe8, 0xb5, 0xef, 0x3f, 0xfe,
		0xe7, 0xf0, 0x3b, 0x67, 0xd9, 0x12, 0xd6, 0xb4, 0xda, 0xf6, 0x92, 0xcf, 0xce, 0x4c, 0xea, 0xe0,
		0x6d, 0xd8, 0x55, 0xec, 0x2a, 0x76, 0x15, 0xbb, 0x8a, 0x5d, 0xc5, 0xae, 0x6e, 0x8c, 0x5d, 0xf5,
		0xd3, 0x4f, 0x7e, 0x9c, 0xda, 0xd8, 0xdc, 0xe3, 0x8d, 0x3d, 0x79, 0x05, 0x16, 0x14, 0x0b, 0x8a,
		0x05, 0xc5, 0x82, 0x5a, 0xda, 0xfb, 0x63, 0x45, 0x43, 0xe1, 0xad, 0xe7, 0xbf, 0x1c, 0x15, 0xde,
		0xda, 0x3f, 0x72, 0x50, 0x3a, 0xe4, 0x88, 0xca, 0x5b, 0xeb, 0xbf, 0xc8, 0x36, 0x54, 0xde, 0xda,
		0x3f, 0x7c, 0x7d, 0x44, 0xf1, 0x2d, 0xa3, 0x5d, 0xb2, 0x05, 0xc5, 0xb7, 0x8e, 0x0e, 0x0f, 0x5f,
		0x1f, 0x52, 0x7e, 0xab, 0x68, 0xa3, 0x53, 0x7e, 0x6b, 0xd6, 0x7c, 0x52, 0x7e, 0xcb, 0x70, 0x02,
		0xcf, 0x6f, 0x7f, 0x3d, 0xbf, 0xbe, 0xfd, 0xd7, 0xd5, 0x39, 0xc5, 0xb7, 0x8c, 0xa7, 0xb0, 0xfe,
		0xe7, 0xfb, 0xd3, 0x8f, 0x94, 0xba, 0x30, 0x99, 0xc1, 0x0f, 0x57, 0xef, 0x6f, 0x98, 0x41, 0x93,
		0x19, 0xbc, 0xbe, 0x3c, 0xa3, 0x3a, 0x92, 0xd1, 0x0c, 0xbe, 0x7f, 0x4f, 0x65, 0x2e, 0xb3, 0x19,
		0xbc, 0xb8, 0xfa, 0xf3, 0x88, 0x19, 0x34, 0x99, 0xc1, 0xd3, 0x6b, 0xb6, 0xa0, 0xe9, 0x16, 0x3c,
		0xa0, 0x74, 0x92, 0xdb, 0xcf, 0x4d, 0xe9, 0x24, 0x9d, 0xbd, 0x3b, 0x2c, 0x02, 0x60, 0x35, 0xd9,
		0x71, 0xea, 0x1d, 0x9c, 0x26, 0x71, 0x9a, 0xb4, 0x6e, 0x4d, 0x39, 0x4d, 0x2a, 0x88, 0x0e, 0x24,
		0x1f, 0x63, 0x49, 0x20, 0x86, 0x7c, 0x0c, 0x6c, 0xe8, 0x42, 0x1b, 0x6a, 0x39, 0xc5, 0xf1, 0xf9,
		0x8b, 0xb0, 0xa6, 0x58, 0x53, 0xac, 0x29, 0xd6, 0x14, 0x6b, 0x8a, 0x35, 0xcd, 0xd7, 0x9a, 0x52,
		0x82, 0x43, 0xbd, 0xa6, 0x43, 0xab, 0xb6, 0x3b, 0xbc, 0x6c, 0x5c, 0x94, 0x0a, 0x1c, 0x22, 0x05,
		0x26, 0xbc, 0xd4, 0x97, 0xbf, 0x95, 0x3d, 0x18, 0xb6, 0xe0, 0x97, 0xb2, 0x6b, 0x5c, 0xca, 0xe6,
		0x52, 0x76, 0x0e, 0xbc, 0xc2, 0xa5, 0x6c, 0x19, 0xd9, 0xe0, 0x52, 0x36, 0xee, 0x15, 0xee, 0x15,
		0xee, 0x15, 0xee, 0x15, 0xee, 0x55, 0xb1, 0xdc, 0x2b, 0x2e, 0x65, 0x63, 0x57, 0xb1, 0xab, 0xd8,
		0x55, 0xec, 0x2a, 0x76, 0x15, 0xbb, 0xca, 0xa5, 0x6c, 0x2c, 0x28, 0x16, 0x14, 0x0b, 0x8a, 0x05,
		0xb5, 0xb4, 0xf7, 0xb9, 0x94, 0xbd, 0xf4, 0x17, 0x97, 0xb2, 0xb3, 0xbd, 0x82, 0x4b, 0xd9, 0xc5,
		0x31, 0xc4, 0x4b, 0x5f, 0xc7, 0xa5, 0x6c, 0xb1, 0x5d, 0xc2, 0xa5, 0xec, 0xd2, 0x6f, 0x13, 0x2e,
		0x65, 0xdb, 0x17, 0x1a, 0x2e, 0x65, 0xab, 0xbc, 0x83, 0x4b, 0xd9, 0xe5, 0x01, 0x85, 0x17, 0x5c,
		0xca, 0xb6, 0x33, 0x83, 0x5c, 0xca, 0x36, 0x9d, 0x41, 0x2e, 0x65, 0x9b, 0xce, 0x20, 0x97, 0xb2,
		0x4d, 0x67, 0x90, 0x4b, 0xd9, 0xa6, 0x33, 0xc8, 0xa5, 0x6c, 0xf3, 0x2d, 0xc8, 0xa5, 0x6c, 0xc7,
		0x9f, 0x9b, 0x4b, 0xd9, 0x3a, 0x7b, 0x97, 0x4b, 0xd9, 0x0b, 0x86, 0xe5, 0x34, 0x69, 0xc5, 0x7b,
		0x38, 0x4d, 0x52, 0x7d, 0x11, 0xa7, 0x49, 0x83, 0x79, 0x20, 0x1f, 0x63, 0x95, 0x6a, 0x20, 0x1f,
		0xa3, 0xfc, 0x36, 0x94, 0x4b, 0xd9, 0x58, 0x53, 0xac, 0x29, 0xd6, 0x14, 0x6b, 0x8a, 0x35, 0xe5,
		0x52, 0x76, 0x4e, 0x12, 0x52, 0xa2, 0x4b, 0xd9, 0x83, 0xbb, 0xc6, 0x45, 0xb9, 0x93, 0x9d, 0x6b,
		0xb7, 0x6e, 0xe1, 0x45, 0x93, 0x5f, 0xac, 0x8a, 0xc8, 0x95, 0xf5, 0xb8, 0xdb, 0x48, 0xc3, 0xa1,
		0x7e, 0xfd, 0x3d, 0x4a, 0xea, 0x67, 0xe3, 0x17, 0xd7, 0x6f, 0xfd, 0xb8, 0x5d, 0x3f, 0x1b, 0xbf,
		0xb2, 0xfe, 0xbe, 0x66, 0xb6, 0x33, 0xf4, 0xd7, 0xd3, 0x60, 0x2d, 0x2b, 0xed, 0x4e, 0x2b, 0x31,
		0x5e, 0xc1, 0x89, 0x09, 0xea, 0x8d, 0x66, 0xb8, 0xb3, 0x64, 0xee, 0xe0, 0x8b, 0x61, 0xac, 0x24,
		0xb6, 0xda, 0xc2, 0x54, 0x69, 0x2c, 0xb5, 0x86, 0xa1, 0xd6, 0xb0, 0xd3, 0x22, 0x66, 0xe6, 0xab,
		0x67, 0xa5, 0xee, 0xcc, 0x57, 0x1a, 0x23, 0x79, 0x10, 0xae, 0xbf, 0x31, 0x1c, 0xb7, 0xe0, 0x05,
		0x38, 0xf6, 0x28, 0xc0, 0x41, 0x01, 0x8e, 0x1c, 0x7c, 0xd3, 0x0d, 0x2f, 0xc0, 0x91, 0xc6, 0xde,
		0xc3, 0x43, 0xd0, 0xa8, 0xf6, 0x79, 0xcc, 0x5e, 0x20, 0x6d, 0xf6, 0x35, 0x84, 0xd1, 0x08, 0xa3,
		0x11, 0x46, 0x23, 0x8c, 0x66, 0x69, 0xef, 0x77, 0x83, 0x30, 0x3d, 0xb1, 0x18, 0x40, 0xb3, 0x90,
		0x16, 0x6c, 0xf9, 0x4e, 0x8d, 0xc5, 0xd4, 0x6c, 0x17, 0x77, 0x68, 0x1c, 0xdd, 0x8a, 0x18, 0xdf,
		0x86, 0xb0, 0xfd, 0x1e, 0x87, 0x37, 0x20, 0x2c, 0x26, 0x7d, 0x39, 0xb9, 0x18, 0xe3, 0x7a, 0xe9,
		0x8f, 0x37, 0x68, 0xe9, 0xc9, 0xfa, 0xda, 0x20, 0xf2, 0x2f, 0x49, 0x8c, 0xbd, 0xdd, 0x69, 0x25,
		0x94, 0x3e, 0xcd, 0x4a, 0x2a, 0x94, 0x3e, 0x25, 0xf2, 0x42, 0xe4, 0x85, 0xc8, 0x0b, 0x91, 0x17,
		0x22, 0x2f, 0x44, 0x5e, 0x88, 0xbc, 0x10, 0x79, 0x21, 0xf2, 0x42, 0xe4, 0x85, 0xc8, 0x0b, 0x91,
		0x17, 0x22, 0x2f, 0x44, 0x5e, 0x88, 0xbc, 0x28, 0x47, 0x5e, 0xc8, 0x6f, 0xb4, 0xb5, 0x6c, 0x36,
		0x96, 0xcb, 0x79, 0x86, 0xe3, 0x87, 0xde, 0x4b, 0x4b, 0x98, 0xe3, 0x98, 0xc6, 0x5e, 0x98, 0x74,
		0xa2, 0x38, 0x95, 0x4b, 0x74, 0x9c, 0x0c, 0x49, 0xb6, 0xa3, 0x6b, 0x9f, 0x96, 0x6c, 0x47, 0xb2,
		0x1d, 0xd7, 0x0d, 0x44, 0xb6, 0x63, 0x41, 0x03, 0x5e, 0xc4, 0xdc, 0xf3, 0x0a, 0x68, 0x11, 0x73,
		0x37, 0x1d, 0x70, 0xba, 0x65, 0x89, 0x08, 0x4e, 0x2c, 0x15, 0x8e, 0xb9, 0x37, 0x11, 0x79, 0x27,
		0xf2, 0x9e, 0xb3, 0x82, 0x72, 0xa6, 0xa8, 0x1c, 0x2a, 0x2c, 0x3b, 0xc1, 0x91, 0xf2, 0x45, 0xde,
		0x7b, 0x3a, 0xa6, 0x1a, 0x76, 0xdb, 0xd5, 0xb8, 0x1f, 0xce, 0xa6, 0xac, 0xfb, 0xe4, 0x97, 0x83,
		0xba, 0xb4, 0x49, 0x1a, 0x07, 0xe1, 0xa3, 0x8b, 0x92, 0xb4, 0x27, 0x16, 0xdf, 0x61, 0xfb, 0x0e,
		0xf7, 0xf8, 0x45, 0xff, 0xf7, 0xc3, 0xd1, 0xdf, 0x7b, 0xd5, 0xc3, 0xbb, 0xd1, 0xff, 0xbd, 0x1e,
		0xfc, 0xee, 0xbf, 0xfd, 0xff, 0xff, 0x7f, 0xfe, 0xde, 0xab, 0xbe, 0x59, 0xf4, 0xff, 0x3f, 0xfe,
		0xfb, 0xdf, 0xaf, 0xfe, 0xfd, 0xef, 0x57, 0x7a, 0xcf, 0xfe, 0x4f, 0x85, 0x22, 0xcd, 0x8e, 0x84,
		0x61, 0xa4, 0x8a, 0xee, 0xfd, 0x98, 0x46, 0x07, 0xb9, 0x2e, 0xc9, 0xf8, 0x8b, 0x6c, 0x43, 0xa3,
		0x83, 0x3d, 0xba, 0x1c, 0x18, 0x6d, 0x11, 0xba, 0x1c, 0x94, 0x7e, 0x9b, 0xd0, 0xe5, 0x60, 0x23,
		0x0c, 0xa8, 0x1f, 0x76, 0xdb, 0x7e, 0x3c, 0x38, 0xba, 0x72, 0x80, 0x94, 0x07, 0x16, 0xdf, 0x71,
		0x1e, 0x76, 0xdb, 0x3d, 0xb5, 0xc2, 0x89, 0x78, 0x61, 0x36, 0xf3, 0xa8, 0xa8, 0x9d, 0xdd, 0xf8,
		0xd7, 0xf4, 0x4b, 0x08, 0x7d, 0x11, 0xfa, 0x22, 0xf4, 0x45, 0xe8, 0x8b, 0xd0, 0x17, 0xa1, 0x2f,
		0x42, 0x5f, 0x84, 0xbe, 0x08, 0x7d, 0x11, 0xfa, 0x22, 0xf4, 0x45, 0xe8, 0x8b, 0xd0, 0x17, 0xa1,
		0x2f, 0x42, 0x5f, 0x18, 0x50, 0x42, 0x5f, 0x84, 0xbe, 0xdc, 0x84, 0xbe, 0xd2, 0x46, 0xa7, 0xfa,
		0xd0, 0xf2, 0x1e, 0x6d, 0xde, 0xb7, 0x1e, 0xbf, 0x82, 0xb0, 0x17, 0x61, 0x2f, 0xc2, 0x5e, 0x84,
		0xbd, 0x2c, 0xed, 0x7d, 0xbb, 0xbd, 0xb0, 0x6d, 0xf6, 0xc0, 0x76, 0xd3, 0xfb, 0x7a, 0x3c, 0x51,
		0xb7, 0x67, 0x57, 0xf5, 0x9f, 0xdf, 0x9f, 0xfe, 0x72, 0x63, 0x4b, 0xb8, 0x1c, 0xf4, 0xba, 0x76,
		0xd4, 0x1e, 0xbc, 0x37, 0x55, 0x37, 0xff, 0xb2, 0xd8, 0xd4, 0xda, 0xa2, 0x3b, 0xe7, 0x70, 0x8a,
		0x4e, 0xcf, 0x7e, 0x63, 0x8a, 0x56, 0x4f, 0xd1, 0xd5, 0xcd, 0xaf, 0x4c, 0xd1, 0xea, 0x29, 0xba,
		0xbe, 0xb9, 0x65, 0x8a, 0x56, 0x4f, 0xd1, 0xb9, 0xcd, 0xe6, 0xe6, 0x9b, 0x31, 0x45, 0x7f, 0x5c,
		0xff, 0xc2, 0x14, 0xad, 0x31, 0xfe, 0x17, 0x58, 0xb4, 0x35, 0x53, 0x74, 0xf6, 0xd7, 0x75, 0xa5,
		0x64, 0xe5, 0x30, 0xee, 0xb6, 0xcc, 0xa3, 0x78, 0x1f, 0x24, 0xe9, 0x69, 0x9a, 0xc6, 0x76, 0xbc,
		0x8a, 0x0f, 0x41, 0x78, 0xde, 0xf2, 0x7b, 0x9e, 0x5b, 0x0f, 0x64, 0xc3, 0x6e, 0xab, 0x65, 0x81,
		0xfb, 0x3f, 0x78, 0xdf, 0xec, 0xbf, 0xe4, 0x32, 0x6e, 0xfa, 0xb1, 0xdf, 0x7c, 0xfb, 0x34, 0x7c,
		0x05, 0x35, 0x4e, 0xb2, 0xb8, 0xed, 0xe5, 0xa8, 0x71, 0x32, 0x2e, 0xda, 0x40, 0x89, 0xd9, 0xac,
		0xda, 0x9d, 0x12, 0xb3, 0x42, 0x13, 0xc9, 0x75, 0xf7, 0x67, 0x2f, 0xe0, 0xba, 0xbb, 0xb0, 0x12,
		0xe6, 0xba, 0xfb, 0x3a, 0xc5, 0xc3, 0xe1, 0x07, 0x87, 0x1f, 0xc5, 0x53, 0x54, 0x0e, 0x15, 0x56,
		0x39, 0x5c, 0x15, 0x72, 0x7e, 0x33, 0xcd, 0x0f, 0x39, 0xbf, 0x6b, 0x67, 0x9f, 0x9c, 0x5f, 0x72,
		0x7e, 0x0b, 0x2e, 0x0c, 0xe4, 0xfc, 0x16, 0x65, 0x49, 0xa6, 0x83, 0x59, 0xe4, 0xfc, 0x0a, 0xbd,
		0x8f, 0x9c, 0xdf, 0xd2, 0x6e, 0x11, 0x72, 0x7e, 0x0b, 0x39, 0x3a, 0x06, 0x74, 0xd6, 0x80, 0x92,
		0xf3, 0x9b, 0xdb, 0x96, 0xe4, 0xba, 0xbb, 0x94, 0x47, 0xc4, 0x75, 0x77, 0x42, 0x5f, 0x84, 0xbe,
		0x08, 0x7d, 0x11, 0xfa, 0x22, 0xf4, 0x45, 0xe8, 0x8b, 0xd0, 0x17, 0xa1, 0x2f, 0x42, 0x5f, 0x84,
		0xbe, 0x08, 0x7d, 0x11, 0xfa, 0x22, 0xf4, 0x45, 0xe8, 0x0b, 0x03, 0x4a, 0xe8, 0x8b, 0xd0, 0x97,
		0xf3, 0xd0, 0x17, 0xd7, 0xdd, 0x09, 0x7b, 0x11, 0xf6, 0x22, 0xec, 0xb5, 0x09, 0x61, 0x2f, 0xae,
		0xbb, 0x67, 0x9c, 0x28, 0xae, 0xbb, 0x2b, 0x4d, 0x15, 0xd7, 0xdd, 0xd7, 0x4e, 0x11, 0xd7, 0xdd,
		0xd7, 0x4e, 0x11, 0xd7, 0xdd, 0xd7, 0x4e, 0x11, 0xd7, 0xdd, 0xd7, 0x4e, 0x11, 0xd7, 0xdd, 0xd7,
		0x4e, 0x11, 0xd7, 0xdd, 0xd7, 0x1b, 0x7f, 0xae, 0xbb, 0xaf, 0x9b, 0x22, 0xae, 0xbb, 0x73, 0xdd,
		0x9d, 0xeb, 0xee, 0x2e, 0xb7, 0x08, 0xd7, 0xdd, 0x8d, 0xae, 0xbb, 0x0f, 0x6e, 0x71, 0x17, 0xe5,
		0xb6, 0x7b, 0xae, 0x1d, 0xe6, 0x85, 0xd7, 0xce, 0xda, 0x9a, 0x55, 0x44, 0x6a, 0x02, 0xc4, 0xdd,
		0x46, 0x1a, 0x0e, 0x2d, 0xd7, 0xef, 0x51, 0x52, 0x3f, 0x1b, 0xbf, 0xbf, 0x7e, 0xeb, 0xc7, 0xed,
		0xfa, 0xd9, 0xf8, 0xcd, 0xf5, 0xdb, 0xf1, 0x9b, 0x77, 0xf2, 0x59, 0x5d, 0xbd, 0x27, 0x35, 0xf7,
		0x83, 0xd4, 0x3e, 0x10, 0x5e, 0x7f, 0x83, 0x55, 0x57, 0x5a, 0x6d, 0xbd, 0x35, 0x56, 0x5f, 0x21,
		0x8d, 0xd5, 0xa9, 0x34, 0x46, 0x31, 0x76, 0xbd, 0x55, 0x19, 0x93, 0xda, 0x70, 0x1c, 0xcd, 0xfd,
		0x61, 0x56, 0xab, 0xc2, 0xf8, 0xa0, 0x40, 0xe2, 0x40, 0x60, 0x3a, 0xf0, 0xff, 0x4f, 0x64, 0xb4,
		0xb7, 0x84, 0x42, 0xfb, 0xe2, 0x21, 0x7c, 0xf1, 0x50, 0xfd, 0xf3, 0x90, 0x7c, 0x6f, 0xde, 0x4a,
		0xa2, 0xd1, 0x4c, 0xeb, 0x3f, 0x54, 0x82, 0xa6, 0xf9, 0x02, 0x4f, 0xe2, 0xed, 0xa6, 0x2b, 0x2b,
		0x73, 0x82, 0x27, 0x76, 0x62, 0x27, 0x79, 0x42, 0x27, 0x27, 0x98, 0xd2, 0x02, 0x6a, 0x4d, 0x50,
		0xad, 0x09, 0xac, 0x15, 0xc1, 0x2d, 0x06, 0xaa, 0x8a, 0x9d, 0x8a, 0xc9, 0xa7, 0x1f, 0x4f, 0xd2,
		0x8c, 0x81, 0x45, 0xf7, 0xb0, 0xa8, 0x5d, 0xba, 0xcc, 0x0d, 0xc0, 0x19, 0xd8, 0x11, 0x73, 0xfb,
		0x61, 0x68, 0x37, 0x00, 0x37, 0xc0, 0xcd, 0xb5, 0x76, 0x31, 0xd6, 0xf3, 0xe3, 0xfd, 0xd2, 0xf2,
		0xbd, 0x07, 0xb3, 0x0c, 0x87, 0xb1, 0x62, 0x3f, 0x36, 0x18, 0xe3, 0x6a, 0xa8, 0xe0, 0x5e, 0xbd,
		0x1a, 0x6a, 0xab, 0xdd, 0xa0, 0x59, 0x64, 0x85, 0x65, 0x56, 0x3b, 0x51, 0xa4, 0x56, 0xa2, 0x98,
		0xbf, 0x59, 0x43, 0x6d, 0xa1, 0xb6, 0xf0, 0x37, 0xf1, 0x37, 0xf1, 0x37, 0xf1, 0x37, 0xf1, 0x37,
		0xf1, 0x37, 0x4d, 0xfd, 0x4d, 0x83, 0xb3, 0x43, 0x0d, 0x7a, 0xdb, 0xb1, 0x38, 0xbd, 0x3d, 0x25,
		0xa3, 0x65, 0x2b, 0xcc, 0xb2, 0x09, 0x44, 0xb2, 0x05, 0x44, 0xb2, 0x01, 0xcc, 0x4e, 0xfb, 0x55,
		0x67, 0xdb, 0x70, 0x13, 0x4b, 0x6c, 0xde, 0x8a, 0x96, 0x33, 0xb0, 0xe6, 0x18, 0x4d, 0x4d, 0x16,
		0xb2, 0xef, 0xe8, 0x6c, 0x3f, 0x99, 0x71, 0x15, 0x74, 0x67, 0xdf, 0x70, 0xd6, 0xb3, 0xcd, 0xcd,
		0xfa, 0x6f, 0xba, 0xfa, 0x27, 0xd6, 0xcc, 0xc1, 0x48, 0xce, 0xfb, 0x6b, 0xb8, 0xe6, 0x47, 0x95,
		0x24, 0x5b, 0x4b, 0x92, 0xb5, 0x24, 0x57, 0x4d, 0x52, 0xd7, 0xcd, 0x87, 0xe2, 0x5e, 0xd0, 0xde,
		0x03, 0x19, 0xc4, 0x6d, 0xa5, 0x78, 0xad, 0xde, 0x3d, 0xcb, 0xf7, 0xc4, 0xe2, 0xff, 0xb2, 0x64,
		0x56, 0xb2, 0xce, 0x86, 0xda, 0x2c, 0x2c, 0xfe, 0xe8, 0xf3, 0x1f, 0x6c, 0xc1, 0x87, 0x5a, 0x77,
		0xe0, 0x9d, 0xed, 0x40, 0x7b, 0x4d, 0x00, 0x61, 0xad, 0x5f, 0x92, 0xc5, 0xdf, 0xc8, 0xee, 0x47,
		0x64, 0xf5, 0x0f, 0x94, 0xb9, 0x5f, 0x99, 0xe7, 0x95, 0x38, 0x3d, 0xb7, 0x8d, 0xb4, 0x22, 0xa6,
		0x9f, 0x6d, 0x0f, 0x3d, 0x44, 0xf1, 0x57, 0x2f, 0x6e, 0x06, 0xe1, 0x63, 0xf5, 0x31, 0x8e, 0xba,
		0x9d, 0x64, 0xfd, 0x76, 0x9a, 0x7f, 0x84, 0x9d, 0x55, 0x90, 0x9d, 0xb5, 0x2e, 0xb4, 0x32, 0xb7,
		0x76, 0xeb, 0xa7, 0x63, 0xd9, 0xaa, 0xaf, 0x9b, 0x95, 0x6c, 0x71, 0xc9, 0xcc, 0x61, 0x0f, 0x95,
		0xb0, 0x86, 0x7a, 0xd8, 0x42, 0x35, 0x2c, 0xa1, 0x1d, 0x76, 0xd0, 0x0e, 0x2b, 0x68, 0x85, 0x0d,
		0xcc, 0x68, 0x28, 0x6b, 0x9c, 0x4e, 0x35, 0xf1, 0x4a, 0x2f, 0xd1, 0x4a, 0x31, 0xd0, 0xad, 0x1c,
		0x4f, 0xd3, 0x89, 0x9b, 0xe9, 0xc7, 0xc7, 0x74, 0xe3, 0x60, 0xc6, 0xf1, 0x2e, 0xe3, 0xb8, 0x96,
		0x51, 0xfc, 0x4a, 0xd6, 0x55, 0x51, 0x0d, 0x24, 0x57, 0x1e, 0xbc, 0xfb, 0x38, 0x68, 0x54, 0x3b,
		0x71, 0x10, 0xc5, 0x41, 0xfa, 0xa4, 0x3e, 0xfb, 0x63, 0x65, 0xf8, 0x6c, 0x20, 0xd5, 0x78, 0x82,
		0x56, 0xc8, 0x58, 0x3b, 0x44, 0x6c, 0x12, 0x12, 0x36, 0x0f, 0x01, 0x9b, 0x86, 0x7c, 0xc5, 0x42,
		0xbc, 0x62, 0x21, 0x5d, 0x91, 0x10, 0xae, 0xdd, 0x88, 0x95, 0x76, 0x48, 0x76, 0xbc, 0xde, 0xdd,
		0x20, 0x4c, 0x4f, 0x74, 0x96, 0x7b, 0xb8, 0xb9, 0x35, 0x6e, 0xb4, 0x1b, 0x96, 0x43, 0x33, 0x88,
		0x77, 0x4a, 0x94, 0x2f, 0x93, 0x3a, 0x08, 0x12, 0x2a, 0x37, 0x26, 0x59, 0x1f, 0xca, 0xe0, 0x80,
		0x40, 0xa4, 0xec, 0x97, 0xf4, 0xd4, 0xd6, 0x0e, 0x0f, 0x0b, 0x34, 0xb9, 0x8e, 0x42, 0xe4, 0x77,
		0xb6, 0xc2, 0x8f, 0x0a, 0xd4, 0x33, 0x0c, 0xdf, 0x68, 0x5a, 0xdd, 0x0c, 0x71, 0x39, 0x4c, 0x2d,
		0xa6, 0xb6, 0x74, 0xa6, 0x56, 0xfb, 0xb4, 0x53, 0xf3, 0x74, 0xd3, 0x8e, 0x6c, 0x47, 0xdd, 0xb4,
		0xd3, 0x4d, 0xab, 0xff, 0x74, 0xfd, 0xae, 0x81, 0x8c, 0xcf, 0x8c, 0x82, 0xac, 0x23, 0xeb, 0x1b,
		0x26, 0xeb, 0xfa, 0x99, 0x96, 0x26, 0x19, 0x96, 0xd3, 0x99, 0x95, 0xe3, 0x7f, 0xfa, 0x32, 0x96,
		0x0c, 0xfe, 0x35, 0xca, 0xb7, 0xec, 0x9b, 0xd8, 0x2d, 0x3f, 0xa7, 0x9c, 0x8b, 0x6f, 0xcf, 0xfd,
		0x8d, 0x52, 0x2e, 0x7d, 0x86, 0x43, 0xcb, 0x0c, 0x01, 0x4a, 0x25, 0x72, 0xd2, 0x21, 0x26, 0x45,
		0xed, 0x49, 0x7c, 0x6d, 0xf3, 0xe3, 0x6b, 0xca, 0xda, 0xce, 0x40, 0xcb, 0xe9, 0x68, 0xb7, 0x05,
		0xf9, 0xe2, 0xd9, 0xf5, 0x97, 0x8c, 0x58, 0xaa, 0x65, 0x80, 0x6b, 0x65, 0x7c, 0x6b, 0x07, 0xbe,
		0x6b, 0x08, 0xe6, 0x86, 0x0a, 0x26, 0x81, 0x6f, 0x08, 0x1d, 0x42, 0xb7, 0x44, 0xe8, 0x04, 0xbe,
		0x73, 0x8e, 0xce, 0x12, 0xf8, 0xb6, 0x36, 0xb5, 0x04, 0xbe, 0x73, 0x0a, 0x8e, 0x11, 0xf8, 0xc6,
		0xd4, 0x62, 0x6a, 0xe7, 0xdd, 0x20, 0x02, 0xdf, 0x04, 0xbe, 0x91, 0x75, 0x02, 0xdf, 0xd2, 0xa1,
		0xa1, 0x45, 0x21, 0x22, 0x02, 0xdf, 0xe6, 0x81, 0x6f, 0x85, 0x4b, 0x7d, 0x5c, 0xd6, 0x59, 0xfb,
		0x50, 0xc1, 0x2f, 0xeb, 0xac, 0xdf, 0x0f, 0x7a, 0x17, 0x77, 0x7e, 0x1e, 0x8f, 0xf2, 0x4b, 0x7f,
		0x90, 0x92, 0xdd, 0xde, 0x99, 0xbf, 0xff, 0x60, 0x70, 0xff, 0x22, 0x08, 0x53, 0x3f, 0x7e, 0xf0,
		0x1a, 0x7e, 0x86, 0x8b, 0x17, 0x53, 0x3f, 0xcb, 0x8d, 0x8b, 0xb2, 0xdc, 0xb8, 0x18, 0x2f, 0x5a,
		0xf6, 0xab, 0x16, 0x93, 0x47, 0xb8, 0x63, 0xc1, 0x1d, 0x8b, 0xc1, 0x0f, 0x72, 0xc7, 0x82, 0xa3,
		0xa6, 0x3c, 0x68, 0x53, 0xf9, 0xa8, 0x69, 0xac, 0xbc, 0xaa, 0x1a, 0x65, 0x7a, 0xe6, 0x55, 0x60,
		0x55, 0xbd, 0xe8, 0x02, 0xde, 0x30, 0xde, 0x30, 0x91, 0xaf, 0x4d, 0x77, 0x56, 0x27, 0x30, 0x3c,
		0xf9, 0x6d, 0x0e, 0x79, 0x59, 0x41, 0xd8, 0xe9, 0xa6, 0xea, 0x66, 0x79, 0xf0, 0x18, 0x56, 0x19,
		0xab, 0xec, 0xc6, 0x2a, 0x4f, 0x57, 0x9c, 0xd0, 0x36, 0xca, 0xd3, 0x83, 0xe8, 0xd9, 0xe4, 0x7d,
		0x6c, 0x32, 0x36, 0xd9, 0x8e, 0x4d, 0xd6, 0xad, 0x2a, 0x39, 0xb5, 0xab, 0x05, 0x5a, 0x87, 0xa8,
		0x94, 0xb4, 0x11, 0x14, 0x14, 0x63, 0x81, 0x91, 0x10, 0x1c, 0x39, 0x01, 0x92, 0x12, 0x24, 0x71,
		0x81, 0x12, 0x17, 0x2c, 0x51, 0x01, 0xd3, 0x13, 0x34, 0x4d, 0x81, 0x33, 0x16, 0x3c, 0xdd, 0xd0,
		0x86, 0x6c, 0xc8, 0xc3, 0x92, 0x20, 0x8a, 0x09, 0xa4, 0xa4, 0x60, 0xca, 0x0b, 0xa8, 0xb4, 0xa0,
		0x5a, 0x13, 0x58, 0x6b, 0x82, 0x6b, 0x45, 0x80, 0xcd, 0x04, 0xd9, 0x50, 0xa0, 0xc5, 0x04, 0x7b,
		0x3c, 0x90, 0x56, 0xf2, 0xd3, 0xda, 0xcd, 0xab, 0x91, 0x14, 0x25, 0x1c, 0x32, 0xb2, 0x2e, 0xf4,
		0x36, 0x84, 0xdf, 0x9e, 0x12, 0xb0, 0xa5, 0x0c, 0xac, 0x2b, 0x05, 0xeb, 0xca, 0xc1, 0xaa, 0x92,
		0x90, 0x51, 0x16, 0x42, 0x4a, 0xc3, 0x3c, 0x44, 0xb6, 0x76, 0xbf, 0x9a, 0xf7, 0xaa, 0x58, 0x6a,
		0xeb, 0x8f, 0x05, 0xc7, 0x5c, 0x94, 0x78, 0x32, 0xfe, 0x67, 0x49, 0x29, 0x54, 0xed, 0x5c, 0x14,
		0x7b, 0x7b, 0x42, 0x60, 0x3f, 0x54, 0x52, 0xc9, 0xbd, 0x30, 0xde, 0x07, 0xfd, 0x51, 0xd1, 0xff,
		0xe8, 0x7f, 0xf4, 0xff, 0x56, 0xe9, 0x7f, 0x3f, 0xec, 0xb6, 0xfd, 0x78, 0x70, 0xa6, 0x60, 0xc1,
		0x06, 0x1c, 0x08, 0x8e, 0x79, 0x1e, 0x76, 0xdb, 0xbd, 0x49, 0xf8, 0x4e, 0x07, 0xed, 0x5c, 0x3a,
		0x68, 0x2f, 0x3c, 0x23, 0xea, 0x1f, 0xbd, 0xac, 0xb6, 0xc0, 0xb9, 0x75, 0xb2, 0x36, 0xea, 0xe2,
		0x6c, 0xd2, 0x8b, 0x6a, 0x4e, 0xca, 0x4c, 0x7a, 0x52, 0x59, 0x8b, 0xa1, 0xd4, 0x88, 0xa1, 0x10,
		0x43, 0x21, 0x86, 0x42, 0x0c, 0x05, 0x86, 0x86, 0xa1, 0x61, 0x68, 0x62, 0x28, 0xc4, 0x50, 0x88,
		0xa1, 0xa0, 0xff, 0xd1, 0xff, 0xe8, 0x7f, 0x62, 0x28, 0xc4, 0x50, 0x0a, 0x12, 0x43, 0x31, 0x68,
		0xfc, 0x98, 0x6f, 0x08, 0x65, 0xd0, 0x89, 0x4e, 0x2c, 0x84, 0x32, 0x18, 0x8e, 0x34, 0x14, 0x42,
		0x28, 0x84, 0x50, 0x8a, 0x10, 0x42, 0xe9, 0x37, 0xf6, 0x94, 0x47, 0x68, 0xbd, 0x76, 0xa1, 0x16,
		0x85, 0x1d, 0x84, 0x06, 0xa1, 0x41, 0x68, 0x59, 0xe5, 0x31, 0x1e, 0x50, 0x28, 0x59, 0x75, 0xa9,
		0x18, 0x88, 0x24, 0xaf, 0x5a, 0x56, 0x2c, 0xd6, 0x14, 0x8c, 0x4d, 0x45, 0x63, 0x5f, 0xe1, 0xd8,
		0x56, 0x3c, 0xce, 0x14, 0x90, 0x33, 0x45, 0xe4, 0x44, 0x21, 0xc9, 0x2a, 0x26, 0x61, 0x05, 0x65,
		0x4d, 0x51, 0x8d, 0x07, 0xd6, 0xb8, 0x85, 0xad, 0x2c, 0x4a, 0xca, 0x77, 0xb4, 0x55, 0x15, 0xd7,
		0x9e, 0xa5, 0xe1, 0x6d, 0x29, 0x30, 0x17, 0x8a, 0xcc, 0x9d, 0x42, 0x73, 0xa5, 0xd8, 0x9c, 0x2b,
		0x38, 0xe7, 0x8a, 0xce, 0xa9, 0xc2, 0xb3, 0xa3, 0xf8, 0x2c, 0x29, 0xc0, 0xf1, 0xcc, 0x88, 0x07,
		0x3d, 0x97, 0xca, 0x8b, 0xfc, 0x21, 0xd8, 0x52, 0xee, 0x3a, 0xb6, 0xf8, 0x8e, 0x95, 0x87, 0x64,
		0xab, 0x8e, 0xca, 0xfe, 0x0e, 0xbd, 0xb6, 0xff, 0xbf, 0x8d, 0x6e, 0x1c, 0xfb, 0x61, 0xfa, 0xc3,
		0x8f, 0xb3, 0x4f, 0x4c, 0x4e, 0xd1, 0xee, 0x76, 0xfb, 0x81, 0xac, 0xfe, 0xff, 0x8f, 0xfe, 0x3e,
		0x68, 0xda, 0xd9, 0xae, 0xdf, 0xb7, 0xcc, 0xea, 0x0b, 0x87, 0x73, 0xe7, 0xc6, 0xb7, 0x11, 0xde,
		0x9d, 0xdb, 0x0d, 0xb2, 0x5b, 0x41, 0x6e, 0xc1, 0x04, 0x17, 0xcb, 0x06, 0x45, 0xd9, 0xa3, 0x27,
		0x4b, 0xd4, 0x84, 0xbb, 0x87, 0xbb, 0x87, 0xbb, 0x57, 0x70, 0xca, 0x71, 0x40, 0x37, 0x36, 0xa9,
		0x66, 0x41, 0x4b, 0x27, 0x69, 0xd6, 0x28, 0xa6, 0x81, 0x91, 0x49, 0xdf, 0x5e, 0xba, 0x1b, 0x24,
		0xd2, 0xb9, 0x97, 0xee, 0x03, 0x5b, 0x66, 0xa6, 0x86, 0x99, 0xc1, 0xcc, 0x60, 0x66, 0x0c, 0x66,
		0x80, 0xa8, 0xa2, 0x43, 0x3e, 0xb6, 0xce, 0xc9, 0x2e, 0x14, 0x99, 0x3b, 0x85, 0xe6, 0x4a, 0xb1,
		0x39, 0x57, 0x70, 0xce, 0x15, 0x9d, 0x53, 0x85, 0x67, 0x2f, 0x54, 0xf3, 0x82, 0xa8, 0x62, 0xee,
		0xfc, 0xbd, 0x88, 0xc3, 0x89, 0x2a, 0xba, 0xd8, 0xa6, 0x95, 0xb6, 0x97, 0x36, 0x3e, 0xf9, 0xcd,
		0x6a, 0xd4, 0x48, 0xfd, 0x34, 0xb1, 0x6f, 0x5e, 0x9f, 0xbd, 0x0f, 0x53, 0x8b, 0xa9, 0xc5, 0xd4,
		0x62, 0x6a, 0x4b, 0x64, 0x6a, 0x1b, 0x51, 0x37, 0x4c, 0xfd, 0xf8, 0xe8, 0xc0, 0x81, 0xb1, 0x3d,
		0xb1, 0xf8, 0x0a, 0xb3, 0xee, 0xaf, 0x59, 0x7f, 0xd9, 0x15, 0xf9, 0x17, 0x52, 0xdd, 0x64, 0x0b,
		0x62, 0x59, 0xe6, 0x5e, 0x27, 0xd4, 0x9d, 0x36, 0xf3, 0xfb, 0x04, 0x1b, 0xad, 0xe6, 0xac, 0x11,
		0x66, 0xb7, 0x88, 0xf7, 0x6d, 0xe3, 0xb7, 0xc8, 0xfe, 0xc9, 0xc1, 0xc1, 0xd1, 0xf1, 0xc1, 0xc1,
		0xde, 0xf1, 0xeb, 0xe3, 0xbd, 0x37, 0x87, 0x87, 0xfb, 0x47, 0xfb, 0x87, 0x1b, 0xbc, 0x6b, 0x76,
		0xca, 0x39, 0xfa, 0x1d, 0xbe, 0x46, 0xb5, 0xe3, 0x35, 0x3e, 0x3b, 0x75, 0x36, 0x46, 0x2f, 0xc4,
		0xdb, 0xc0, 0xdb, 0xc0, 0xdb, 0xc0, 0xdb, 0xc0, 0xdb, 0xc0, 0xdb, 0xc0, 0xdb, 0xc0, 0xdb, 0xc0,
		0xdb, 0xc0, 0xdb, 0xc0, 0xdb, 0x28, 0x82, 0xb7, 0x41, 0xbe, 0xb4, 0xbd, 0x7c, 0x69, 0x81, 0xca,
		0x18, 0xf6, 0xd6, 0xab, 0x58, 0x17, 0x77, 0x87, 0xdd, 0xdd, 0xc5, 0x72, 0x40, 0xd4, 0x7a, 0xc0,
		0xab, 0x30, 0x88, 0x72, 0xdb, 0x77, 0x15, 0xeb, 0x65, 0x6f, 0x70, 0xa5, 0xde, 0xf3, 0xae, 0x57,
		0xdf, 0x92, 0x9c, 0x5b, 0x96, 0xef, 0x8a, 0x68, 0x3e, 0xe8, 0xf3, 0xae, 0xf9, 0x17, 0xa3, 0x8f,
		0x53, 0xbf, 0xe8, 0x7d, 0x9c, 0xfa, 0xd9, 0xf8, 0x23, 0xd4, 0x6f, 0x7b, 0x2f, 0xa7, 0x3e, 0x52,
		0x49, 0xea, 0x23, 0x0d, 0xea, 0x02, 0x95, 0xb1, 0x3e, 0x92, 0x84, 0xaf, 0x2d, 0x59, 0x7b, 0x50,
		0x08, 0xb9, 0xa9, 0x8e, 0x54, 0xac, 0xb8, 0x1b, 0xd5, 0x91, 0x72, 0x88, 0x7f, 0x59, 0x48, 0x60,
		0x93, 0x4c, 0x54, 0x5b, 0x70, 0x31, 0xa4, 0xaf, 0x40, 0xf2, 0x52, 0xa3, 0x4e, 0x5b, 0x2c, 0x0e,
		0x61, 0xd8, 0x40, 0x63, 0xca, 0xe0, 0xaf, 0x28, 0xee, 0x8a, 0xe2, 0xad, 0x0c, 0xce, 0xea, 0xae,
		0x8f, 0x10, 0x75, 0xd8, 0xa0, 0x8d, 0x8a, 0x51, 0x4b, 0x89, 0xec, 0x0c, 0xaa, 0x27, 0x88, 0xdf,
		0x0b, 0xd6, 0x44, 0xd8, 0x70, 0x21, 0xc5, 0x16, 0xb0, 0x62, 0xab, 0xb9, 0xbf, 0x42, 0x9f, 0x76,
		0xcd, 0x4a, 0x57, 0x66, 0x95, 0xac, 0x68, 0x14, 0x9e, 0x0b, 0x81, 0x6d, 0x53, 0xa3, 0xf0, 0x7c,
		0x65, 0x5c, 0xa3, 0x62, 0x82, 0x1d, 0xf1, 0xfe, 0xa7, 0xeb, 0x77, 0xfd, 0x44, 0x5f, 0xbc, 0x87,
		0xcf, 0x23, 0xde, 0x88, 0x77, 0xa1, 0xc4, 0x5b, 0xf7, 0xca, 0xe3, 0x60, 0x43, 0xeb, 0xaf, 0xd5,
		0x8c, 0x5c, 0xd0, 0xfd, 0x9f, 0xee, 0xff, 0x79, 0xc5, 0x25, 0xe8, 0xfe, 0x4f, 0xf7, 0x7f, 0x02,
		0x8b, 0x04, 0x16, 0xe9, 0x5c, 0xa7, 0x28, 0xec, 0x74, 0x2e, 0x12, 0x19, 0x99, 0xb2, 0xeb, 0x2e,
		0x95, 0x84, 0x8c, 0xb2, 0x10, 0x52, 0x1a, 0xe3, 0x6f, 0x6a, 0xaf, 0x73, 0x51, 0x92, 0xc6, 0x41,
		0xf8, 0x68, 0xa3, 0x69, 0xd1, 0x09, 0x07, 0xe8, 0x45, 0x3b, 0x40, 0x1f, 0xc4, 0x18, 0x06, 0xff,
		0x2a, 0x71, 0x6b, 0x66, 0x11, 0x0b, 0x28, 0x69, 0xf9, 0x38, 0x37, 0x07, 0x6f, 0xb7, 0x1c, 0x6f,
		0xb7, 0xf8, 0xdc, 0xdc, 0xbc, 0x35, 0x2a, 0x1d, 0xee, 0x6d, 0xc5, 0x09, 0xe8, 0x70, 0x8f, 0x22,
		0xdd, 0xd2, 0x38, 0x81, 0xf7, 0xe5, 0xb1, 0xda, 0x27, 0xbd, 0x6a, 0xcb, 0x0f, 0xe5, 0x03, 0x06,
		0xb3, 0xc3, 0x13, 0x39, 0x20, 0x72, 0x40, 0xe4, 0x60, 0xab, 0x22, 0x07, 0x36, 0xee, 0xef, 0x5a,
		0xb8, 0xaf, 0x6b, 0xe9, 0x7e, 0xae, 0x85, 0xcb, 0x52, 0x36, 0xef, 0xdf, 0xda, 0xae, 0xe4, 0x60,
		0xf9, 0x7e, 0xad, 0x8b, 0x9b, 0x91, 0x36, 0xea, 0x82, 0xd8, 0xbc, 0x2f, 0xeb, 0x6a, 0x49, 0xdd,
		0xdd, 0x87, 0x75, 0xb2, 0xca, 0x05, 0xbd, 0x2d, 0x78, 0x57, 0x94, 0x68, 0xa9, 0x80, 0x5b, 0xd2,
		0x8c, 0xa3, 0x4e, 0xc7, 0x6f, 0x56, 0x3b, 0x9f, 0x05, 0x4b, 0xe1, 0x8c, 0xed, 0xce, 0xcc, 0xe8,
		0x70, 0x27, 0xdc, 0x09, 0x77, 0xc2, 0x9d, 0x70, 0x27, 0xdc, 0x09, 0x77, 0xc2, 0x9d, 0x70, 0xe7,
		0x16, 0x73, 0x67, 0xdb, 0xfb, 0x66, 0x33, 0xe2, 0x39, 0x3b, 0x3c, 0xe4, 0x09, 0x79, 0x42, 0x9e,
		0x90, 0x27, 0xe4, 0x09, 0x79, 0x42, 0x9e, 0x90, 0x27, 0xe4, 0xb9, 0xc5, 0xe4, 0x49, 0x4e, 0x3e,
		0x9c, 0x09, 0x67, 0xc2, 0x99, 0x32, 0xfb, 0x75, 0x0b, 0x72, 0xf2, 0x05, 0x74, 0x6e, 0x1a, 0x7b,
		0x61, 0xd2, 0x0e, 0x52, 0xe9, 0x06, 0x6f, 0x93, 0x82, 0x6a, 0xcf, 0x5e, 0x80, 0x26, 0x46, 0x13,
		0xa3, 0x89, 0xf1, 0xf8, 0xf1, 0xf8, 0xf1, 0xf8, 0xf1, 0xf8, 0xf1, 0xf8, 0xf1, 0xf8, 0xb7, 0xd8,
		0xe3, 0x1f, 0xc3, 0xa1, 0x9d, 0x24, 0xa7, 0xd9, 0xe1, 0x21, 0x4f, 0xc8, 0x13, 0xf2, 0x84, 0x3c,
		0x21, 0x4f, 0xc8, 0x13, 0xf2, 0x84, 0x3c, 0x21, 0xcf, 0xb2, 0x92, 0x27, 0xb5, 0x48, 0x16, 0xd6,
		0x22, 0x11, 0x68, 0xe4, 0x54, 0xb2, 0xda, 0xf3, 0x06, 0x67, 0x7b, 0xd4, 0x9e, 0xb7, 0xb9, 0x3e,
		0x85, 0xa8, 0x3d, 0x3f, 0x2d, 0x1c, 0x76, 0x2b, 0xce, 0xff, 0xde, 0x7f, 0x05, 0xc5, 0xe6, 0x65,
		0x56, 0xac, 0x08, 0x85, 0xa8, 0x7b, 0x5f, 0xa3, 0xd9, 0x6d, 0xf9, 0x71, 0xb5, 0x13, 0xb5, 0x82,
		0xc6, 0x93, 0x7e, 0x49, 0xea, 0xb9, 0x91, 0x28, 0x4e, 0x6d, 0x2f, 0x1e, 0x40, 0x71, 0x6a, 0x97,
		0xc5, 0xa9, 0x0d, 0xab, 0xe4, 0xca, 0x54, 0xc7, 0xa5, 0x3c, 0xb5, 0x8d, 0x80, 0x1a, 0xe5, 0xa9,
		0x2d, 0xd2, 0x91, 0x71, 0x79, 0x6a, 0x6a, 0xf7, 0x39, 0x10, 0x4a, 0x79, 0xe1, 0x94, 0x16, 0x52,
		0x6b, 0xc2, 0x6a, 0x4d, 0x68, 0xad, 0x08, 0x6f, 0x31, 0xe2, 0x02, 0xdb, 0x58, 0xbb, 0xef, 0xd9,
		0x3f, 0xcf, 0x50, 0x37, 0xf0, 0x93, 0xe7, 0x7f, 0xf5, 0x54, 0x88, 0x72, 0x7f, 0xdb, 0xe7, 0x0a,
		0x2f, 0x59, 0x06, 0x67, 0x2e, 0xeb, 0x4b, 0x3d, 0x47, 0xb2, 0xff, 0x91, 0x13, 0x73, 0xc0, 0x9c,
		0x1a, 0x2b, 0x67, 0xc8, 0xac, 0x01, 0x99, 0x40, 0x66, 0x39, 0x20, 0x73, 0x2c, 0x34, 0x82, 0xd5,
		0x4d, 0xc7, 0x43, 0xd2, 0x09, 0x05, 0xdc, 0x04, 0x37, 0x0d, 0xbe, 0x91, 0x58, 0x85, 0xd3, 0xc4,
		0xff, 0xa7, 0xeb, 0x87, 0x0d, 0x0b, 0x37, 0xaf, 0xc6, 0x23, 0x93, 0x79, 0x55, 0x1c, 0x65, 0x60,
		0x4b, 0x29, 0x58, 0x57, 0x0e, 0xd6, 0x95, 0x84, 0x55, 0x65, 0x21, 0xa3, 0x34, 0x84, 0x94, 0x87,
		0xbc, 0xcf, 0x6a, 0xd1, 0x77, 0xb5, 0xe1, 0xc3, 0x2e, 0xf2, 0x65, 0xfb, 0xa7, 0xe7, 0xbb, 0x63,
		0x9d, 0xb5, 0x41, 0x59, 0xb6, 0x32, 0x25, 0xea, 0xe7, 0xd5, 0xbb, 0x40, 0xa9, 0x7a, 0x61, 0xa0,
		0x43, 0xb7, 0xa3, 0xdb, 0xd1, 0xed, 0xb2, 0x80, 0x38, 0x1e, 0xb0, 0x11, 0x85, 0x0f, 0x51, 0xdc,
		0x0e, 0xc2, 0x47, 0xe9, 0xcb, 0xa2, 0x73, 0x12, 0x31, 0xff, 0x2a, 0xe1, 0x6d, 0x60, 0x27, 0x2f,
		0x51, 0x5c, 0xed, 0xd8, 0x54, 0x3f, 0xf6, 0xd5, 0x90, 0x6d, 0x75, 0xe4, 0x4c, 0x2d, 0x39, 0x53,
		0x4f, 0x4e, 0xd4, 0x94, 0xac, 0xba, 0x12, 0x56, 0x5b, 0xf6, 0xd0, 0x74, 0x81, 0x92, 0x91, 0xbf,
		0x1c, 0xf0, 0x5c, 0xc1, 0x9c, 0x58, 0x18, 0xda, 0xce, 0x65, 0x81, 0xd1, 0x2f, 0x3b, 0x22, 0xfa,
		0xc2, 0xf6, 0xe5, 0x01, 0xcb, 0x9a, 0x7d, 0xee, 0x35, 0x96, 0x2f, 0x13, 0x8c, 0xdf, 0xe3, 0x20,
		0xdd, 0xdc, 0x92, 0x04, 0xcf, 0x2e, 0xbd, 0xc5, 0x4b, 0x06, 0x79, 0x2d, 0xbd, 0xbb, 0x4b, 0x07,
		0xb9, 0xec, 0x86, 0x9d, 0x72, 0x8c, 0x7a, 0x57, 0xd0, 0xcb, 0x12, 0x82, 0xd2, 0x34, 0x8d, 0xc3,
		0xa2, 0x17, 0x65, 0x57, 0x71, 0xb7, 0xe0, 0x95, 0x59, 0xa8, 0x1b, 0xea, 0x86, 0xba, 0xa1, 0x6e,
		0xa8, 0x1b, 0xea, 0x86, 0xba, 0xa1, 0x6e, 0xa8, 0x1b, 0xea, 0x2e, 0x01, 0x75, 0xfb, 0xdf, 0x1a,
		0xbe, 0xdf, 0x74, 0x11, 0xee, 0x9e, 0x7b, 0x13, 0xdc, 0x0d, 0x77, 0xc3, 0xdd, 0x70, 0x37, 0xdc,
		0x0d, 0x77, 0xc3, 0xdd, 0x70, 0x37, 0xdc, 0x0d, 0x77, 0x6f, 0x21, 0x77, 0xdb, 0x0d, 0x76, 0x3f,
		0x7b, 0x0f, 0xcc, 0x0d, 0x73, 0xc3, 0xdc, 0x30, 0x37, 0xcc, 0x0d, 0x73, 0xc3, 0xdc, 0x30, 0x37,
		0xcc, 0x0d, 0x73, 0x6f, 0x0d, 0x73, 0x8b, 0x5f, 0x02, 0x9c, 0xb3, 0x85, 0xc2, 0x97, 0x01, 0xe1,
		0x6c, 0x38, 0x1b, 0xce, 0x86, 0xb3, 0x2d, 0x5d, 0x36, 0x7c, 0xae, 0x5e, 0x24, 0x2f, 0x1d, 0x4e,
		0x54, 0xc1, 0xd2, 0x42, 0x3a, 0x99, 0xcb, 0xe9, 0xfc, 0x1d, 0x7a, 0x6d, 0xff, 0x7f, 0x1b, 0xdd,
		0x38, 0xf6, 0xc3, 0xf4, 0x87, 0x1f, 0x67, 0x1e, 0x9f, 0xaa, 0xb4, 0x73, 0x37, 0x79, 0x70, 0x6a,
		0x8c, 0xd1, 0x4f, 0xc8, 0xde, 0x79, 0x2c, 0xb6, 0xa1, 0xfb, 0x12, 0x44, 0x2d, 0x2f, 0x75, 0x71,
		0xa8, 0x3b, 0xf7, 0x26, 0x0c, 0x1f, 0x86, 0x0f, 0xc3, 0x87, 0xe1, 0x23, 0xc0, 0x44, 0x80, 0x89,
		0x00, 0x13, 0x01, 0x26, 0x02, 0x4c, 0x04, 0x98, 0xb6, 0x26, 0xc0, 0x34, 0xa1, 0x61, 0xbb, 0x87,
		0xba, 0xcf, 0xde, 0x03, 0x73, 0xc3, 0xdc, 0x30, 0x37, 0xcc, 0x0d, 0x73, 0xc3, 0xdc, 0x30, 0x37,
		0xcc, 0x0d, 0x73, 0xc3, 0xdc, 0xc5, 0x66, 0xee, 0x42, 0xd5, 0x10, 0x13, 0xee, 0x75, 0x38, 0x1e,
		0x57, 0xb6, 0x96, 0xfd, 0xc2, 0xb3, 0x0d, 0x81, 0x66, 0x88, 0x72, 0x6b, 0x92, 0x6f, 0xa9, 0xe0,
		0x61, 0xb3, 0x44, 0xa1, 0x13, 0x78, 0x99, 0xc6, 0x89, 0xd3, 0xd6, 0x5d, 0xac, 0xe7, 0xe1, 0xb4,
		0xdd, 0x90, 0x1f, 0x54, 0xa4, 0xa1, 0xa2, 0xd4, 0x9a, 0x16, 0xaa, 0x0b, 0x69, 0x26, 0x89, 0xac,
		0x88, 0x54, 0x32, 0x5d, 0xd7, 0x89, 0xf1, 0x66, 0xf4, 0xba, 0xab, 0xfe, 0x27, 0x99, 0xfc, 0x99,
		0x66, 0x23, 0x45, 0xd8, 0x0e, 0x85, 0x6e, 0x38, 0x62, 0x54, 0x26, 0x57, 0xa4, 0x2c, 0x2e, 0x6d,
		0x46, 0x6c, 0x04, 0x80, 0x68, 0x33, 0x62, 0x51, 0xe3, 0xd0, 0xcb, 0x6e, 0xad, 0x30, 0xd2, 0x5c,
		0x24, 0x4f, 0x61, 0xb5, 0x26, 0xb4, 0x56, 0x84, 0xb7, 0x18, 0x1e, 0x03, 0xbd, 0xec, 0xe8, 0x65,
		0x57, 0x22, 0xbc, 0xd4, 0x77, 0xf5, 0xe9, 0xbe, 0xbe, 0x62, 0x62, 0x2b, 0x5a, 0x10, 0xad, 0xe8,
		0xa1, 0x15, 0xa2, 0xd9, 0xbb, 0x16, 0xf9, 0x1b, 0x11, 0xbf, 0x71, 0x5b, 0xf7, 0x1a, 0x6d, 0xdd,
		0xf3, 0x84, 0x80, 0x12, 0xb4, 0x75, 0xcf, 0x57, 0x97, 0xa8, 0xeb, 0x64, 0x3b, 0xb2, 0xfd, 0x25,
		0x88, 0xd3, 0xae, 0xd7, 0xaa, 0x46, 0xdd, 0xb4, 0xd3, 0x4d, 0xab, 0xff, 0x74, 0xfd, 0xae, 0x9f,
		0xe8, 0xcb, 0xfa, 0xe2, 0xe1, 0x1c, 0xcb, 0xfe, 0x1e, 0xb2, 0x8f, 0xec, 0x5b, 0xf1, 0xca, 0x2b,
		0x5f, 0xa2, 0x7f, 0xaa, 0x63, 0x59, 0x36, 0x0f, 0x86, 0xcd, 0x0e, 0x97, 0x73, 0x50, 0x6c, 0x8f,
		0xa0, 0x18, 0x41, 0xb1, 0x72, 0x04, 0xc5, 0x1a, 0xa3, 0x3d, 0x2b, 0x14, 0x16, 0x1b, 0x8e, 0x47,
		0xd7, 0x5d, 0x02, 0x63, 0x04, 0xc6, 0x0c, 0xbe, 0x91, 0x58, 0xd7, 0x5d, 0x91, 0xa8, 0xf7, 0xdc,
		0xe6, 0x15, 0x88, 0x7e, 0x3f, 0x17, 0x76, 0xba, 0xed, 0x8a, 0x8c, 0x4c, 0x47, 0x46, 0x97, 0x4a,
		0x42, 0x46, 0x59, 0x08, 0x29, 0x8d, 0xf1, 0x37, 0xb5, 0xd7, 0x6d, 0x37, 0x49, 0xe3, 0x20, 0x7c,
		0xb4, 0xd1, 0x6c, 0xf7, 0x84, 0x0c, 0xaa, 0xa2, 0x65, 0xdb, 0x2c, 0x0c, 0x41, 0xec, 0xce, 0x78,
		0x5a, 0xc3, 0x93, 0x89, 0xdc, 0x0e, 0x25, 0x5e, 0x72, 0x1c, 0x0c, 0xf5, 0x42, 0xbd, 0x1c, 0x07,
		0x2f, 0xdb, 0x6f, 0xc5, 0x3f, 0x0e, 0x2e, 0xc2, 0xd9, 0xae, 0x81, 0x1a, 0xd5, 0x8c, 0x73, 0x2f,
		0x5d, 0x30, 0xad, 0x40, 0x37, 0x01, 0x04, 0x54, 0x29, 0xaa, 0xd4, 0x4e, 0x00, 0xa1, 0x2f, 0x90,
		0xf2, 0x11, 0x84, 0xc1, 0xb0, 0xb2, 0x21, 0x84, 0x7d, 0x42, 0x08, 0x84, 0x10, 0x08, 0x21, 0x48,
		0x7c, 0x53, 0x29, 0xf5, 0x31, 0x1e, 0x50, 0xe8, 0xa0, 0x61, 0xa9, 0x18, 0x88, 0x1c, 0x3c, 0x58,
		0x56, 0x2c, 0xd6, 0x14, 0x8c, 0x4d, 0x45, 0x63, 0x5f, 0xe1, 0xd8, 0x56, 0x3c, 0xce, 0x14, 0x90,
		0x33, 0x45, 0xe4, 0x44, 0x21, 0xc9, 0x2a, 0x26, 0x61, 0x05, 0x65, 0x4d, 0x51, 0xc9, 0xc6, 0x87,
		0x5c, 0xc4, 0x8d, 0x2c, 0xc7, 0x93, 0x9c, 0x2b, 0x31, 0x17, 0xca, 0xcc, 0x9d, 0x52, 0x73, 0xa5,
		0xdc, 0x9c, 0x2b, 0x39, 0xe7, 0xca, 0xce, 0xa9, 0xd2, 0xb3, 0xa3, 0xfc, 0x2c, 0x29, 0x41, 0xf9,
		0xf8, 0xd9, 0x5a, 0x79, 0x11, 0x3f, 0x08, 0x5a, 0x8a, 0x5e, 0x27, 0x25, 0x29, 0xf4, 0x50, 0x6c,
		0x33, 0x69, 0xa9, 0xc0, 0xc2, 0x78, 0x7c, 0xeb, 0x07, 0x4d, 0xc3, 0xbf, 0xec, 0xff, 0x4b, 0xe4,
		0xd4, 0xc9, 0xde, 0xfa, 0x49, 0x96, 0xb3, 0xb3, 0x42, 0x21, 0x36, 0xe9, 0x83, 0xd2, 0x75, 0xb8,
		0x4c, 0xb8, 0x4c, 0xf4, 0x49, 0x28, 0x79, 0x9f, 0x04, 0xb1, 0x53, 0xb9, 0x72, 0x98, 0x19, 0xb3,
		0x92, 0x14, 0x19, 0x68, 0x51, 0xbf, 0x54, 0xc5, 0xda, 0x9d, 0x60, 0xcb, 0xd0, 0xd4, 0x30, 0x34,
		0x18, 0x1a, 0x0c, 0x8d, 0xc1, 0x0c, 0x58, 0x8b, 0xcd, 0x79, 0x5f, 0x1e, 0x07, 0x5e, 0x42, 0xb5,
		0xe5, 0x87, 0xf6, 0x83, 0x74, 0xb3, 0xaf, 0x23, 0x5a, 0xe7, 0x5a, 0xbd, 0xb9, 0x53, 0x73, 0xae,
		0xd4, 0x9d, 0x73, 0xb5, 0xe7, 0x5c, 0xfd, 0x39, 0x55, 0x83, 0xf6, 0xa2, 0x3a, 0x2f, 0x36, 0x22,
		0x5a, 0x67, 0xb3, 0x94, 0xf4, 0x73, 0x05, 0x76, 0x62, 0xf1, 0x15, 0x76, 0x4b, 0x4b, 0x8f, 0x7e,
		0xd9, 0x15, 0xf9, 0x17, 0xae, 0x4a, 0x4d, 0x3b, 0xb2, 0x2c, 0x73, 0xaf, 0x73, 0x54, 0x7a, 0x7a,
		0xfc, 0x3e, 0x87, 0x45, 0x87, 0x2d, 0x6b, 0x84, 0xd9, 0x2d, 0xe2, 0xa0, 0x24, 0x75, 0xde, 0x5b,
		0xc4, 0x7d, 0x89, 0xea, 0x5c, 0x77, 0xcd, 0x4e, 0x39, 0x47, 0xbf, 0x2b, 0xcb, 0x09, 0x8c, 0x05,
		0xb7, 0xb7, 0x19, 0x47, 0x9d, 0x8e, 0xdf, 0xb4, 0xd3, 0x4c, 0x66, 0xce, 0x4e, 0xcf, 0xbc, 0x0d,
		0x3f, 0x03, 0x3f, 0x03, 0x3f, 0x03, 0x3f, 0x03, 0x3f, 0x03, 0x3f, 0x03, 0x3f, 0x03, 0x3f, 0x03,
		0x3f, 0x03, 0x3f, 0x03, 0x3f, 0x63, 0x43, 0xfd, 0x8c, 0xb6, 0xf7, 0xcd, 0xe5, 0x89, 0xc6, 0xec,
		0xeb, 0xf0, 0x34, 0xf0, 0x34, 0xf0, 0x34, 0xf0, 0x34, 0xf0, 0x34, 0xf0, 0x34, 0xf0, 0x34, 0xf0,
		0x34, 0xf0, 0x34, 0xf0, 0x34, 0xf0, 0x34, 0x36, 0xd4, 0xd3, 0xe0, 0x5e, 0x23, 0x7e, 0x05, 0x7e,
		0x05, 0x7e, 0x05, 0x7e, 0xc5, 0x22, 0x79, 0xe1, 0x5e, 0xa3, 0x0b, 0x1b, 0x94, 0xc6, 0x5e, 0x98,
		0xb4, 0x83, 0xb4, 0x1a, 0x35, 0x52, 0xdf, 0xc5, 0xc1, 0xfa, 0xf3, 0x17, 0x62, 0x99, 0xb0, 0x4c,
		0x58, 0x26, 0x2c, 0x53, 0x89, 0x2c, 0x13, 0x11, 0x2f, 0x95, 0x5f, 0x44, 0xbc, 0x44, 0xc2, 0x19,
		0x44, 0xbc, 0xcc, 0xb6, 0x08, 0x11, 0xaf, 0x4d, 0xdb, 0x35, 0x44, 0xbc, 0xca, 0xeb, 0x6d, 0xb8,
		0x49, 0xe2, 0x9d, 0x7d, 0x1d, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e,
		0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x46, 0x11, 0x3c, 0x0d, 0xea, 0x35,
		0x3a, 0xab, 0xd7, 0xa8, 0xd1, 0xa4, 0xdd, 0xdd, 0xf2, 0x15, 0xab, 0xf0, 0xfe, 0x6f, 0xfe, 0x93,
		0x74, 0x83, 0xcd, 0xf7, 0x41, 0x92, 0x9e, 0xa6, 0xa9, 0x70, 0x41, 0xff, 0x0f, 0x41, 0x78, 0xde,
		0xf2, 0x7b, 0xac, 0xde, 0xd3, 0x87, 0x61, 0xb7, 0xd5, 0x12, 0xac, 0x47, 0xf6, 0xc1, 0xfb, 0x66,
		0x6f, 0xf0, 0xcb, 0xb8, 0xe9, 0xc7, 0x7e, 0xf3, 0xed, 0xd3, 0x70, 0xe8, 0x42, 0xad, 0xbf, 0x25,
		0xc1, 0x77, 0x2b, 0xf0, 0x15, 0xd1, 0xd2, 0x74, 0x71, 0xb7, 0x91, 0x0e, 0xb3, 0x96, 0x2a, 0xbf,
		0x47, 0x49, 0xfd, 0x62, 0xf4, 0xce, 0xfa, 0x45, 0xef, 0xd3, 0xd5, 0xff, 0x8c, 0xfe, 0x99, 0xfc,
		0xd5, 0xef, 0xfd, 0xf7, 0xd3, 0x4c, 0xb2, 0x8c, 0xcd, 0x24, 0x87, 0xbd, 0xbf, 0x4a, 0xd8, 0x05,
		0x4d, 0xa6, 0x7e, 0xa2, 0x68, 0xbd, 0x44, 0xf1, 0x1e, 0x68, 0x35, 0x7a, 0xa0, 0x15, 0x20, 0x54,
		0x47, 0x0f, 0xb4, 0xec, 0xdf, 0x88, 0x26, 0xea, 0xc6, 0x42, 0x4f, 0x07, 0x34, 0xd1, 0xc0, 0x09,
		0x1d, 0xd0, 0x4a, 0xe3, 0x88, 0xd1, 0x44, 0x1d, 0xee, 0x75, 0xc4, 0xbd, 0x02, 0xe1, 0x11, 0x03,
		0xec, 0xdd, 0x71, 0xb8, 0x46, 0x02, 0xe1, 0x0d, 0x99, 0x70, 0x86, 0x68, 0xf8, 0x42, 0x34, 0x5c,
		0x21, 0x13, 0x9e, 0xd0, 0x5d, 0x1f, 0x21, 0xd9, 0xb1, 0x2e, 0x33, 0x15, 0x23, 0x67, 0x4d, 0x25,
		0xa2, 0xa0, 0x27, 0x97, 0xea, 0x52, 0xa5, 0xf6, 0x84, 0xe2, 0xfa, 0x9a, 0xae, 0xab, 0x85, 0xf5,
		0x54, 0x9b, 0xd7, 0xec, 0xb3, 0x93, 0xed, 0x27, 0x33, 0xce, 0x9f, 0xee, 0xbc, 0x19, 0xcd, 0x97,
		0xc2, 0xde, 0x5e, 0xbf, 0x97, 0xb3, 0x4d, 0xf3, 0xfa, 0x49, 0xcb, 0x30, 0x61, 0x95, 0xf1, 0xf7,
		0xa8, 0x06, 0xcd, 0xcc, 0xd3, 0x35, 0xc6, 0xa2, 0x99, 0xa7, 0x33, 0x2e, 0x8f, 0x9a, 0xdb, 0xa3,
		0xec, 0xd6, 0xe8, 0xb8, 0x2d, 0xfa, 0x6e, 0x89, 0xae, 0xdb, 0x61, 0xec, 0x56, 0x18, 0xbb, 0x0d,
		0x46, 0x6e, 0x81, 0xac, 0xc0, 0x2a, 0x63, 0xbb, 0x41, 0xd3, 0x1a, 0x9d, 0x66, 0x34, 0x0b, 0x9a,
		0xcc, 0xcc, 0x6c, 0xfc, 0x5c, 0xc4, 0xb5, 0xf7, 0xb5, 0x0d, 0xe4, 0x35, 0xfb, 0xac, 0x29, 0x06,
		0x25, 0x9d, 0x0b, 0x6c, 0xf0, 0xb0, 0x95, 0xf2, 0x1a, 0x3c, 0xe4, 0x25, 0xae, 0xaa, 0x21, 0x3a,
		0xdd, 0x3e, 0xe2, 0x66, 0x7d, 0xc2, 0x35, 0x63, 0xe9, 0xda, 0x61, 0x34, 0x93, 0x70, 0x99, 0xf6,
		0x76, 0x96, 0x8a, 0x7e, 0x89, 0x45, 0xb9, 0xc4, 0xa2, 0x59, 0x26, 0xdb, 0xdd, 0x0d, 0x9e, 0xeb,
		0x46, 0xaa, 0x27, 0x4a, 0x58, 0x7f, 0xb9, 0xe6, 0xf4, 0xb9, 0xee, 0x72, 0x99, 0xc5, 0xa0, 0x8d,
		0x63, 0xce, 0x12, 0x31, 0x66, 0x63, 0xe1, 0x91, 0x0e, 0x21, 0x8b, 0x87, 0x8c, 0xc5, 0x43, 0xc4,
		0x12, 0xc2, 0x95, 0x4f, 0x2c, 0xca, 0x38, 0xc2, 0x2b, 0xd8, 0xef, 0x50, 0xa2, 0xaf, 0xe1, 0x18,
		0x2d, 0x77, 0xfb, 0xcb, 0xf0, 0xd3, 0x94, 0x87, 0xf9, 0xec, 0x2f, 0x86, 0x7f, 0xd6, 0xef, 0x6e,
		0xa8, 0x11, 0xde, 0xd0, 0x30, 0x44, 0x49, 0xf7, 0x5e, 0x50, 0xbf, 0xcd, 0x8c, 0x86, 0x8a, 0x43,
		0xc5, 0xa1, 0xe2, 0x36, 0x58, 0xc5, 0xfd, 0x3d, 0x51, 0x71, 0xff, 0xdb, 0xe8, 0xc6, 0xb1, 0x1f,
		0xa6, 0x3f, 0xfc, 0xb8, 0xfb, 0xea, 0xd5, 0xc4, 0xdb, 0xbe, 0x1b, 0x3e, 0x32, 0xad, 0x17, 0x92,
		0x05, 0x7f, 0x37, 0x1e, 0xb9, 0xe9, 0x7f, 0xdb, 0x8c, 0x60, 0xf0, 0xf9, 0xb7, 0xfe, 0x39, 0x85,
		0xfa, 0xbd, 0x18, 0x73, 0x87, 0x20, 0x6a, 0x54, 0xfd, 0x6f, 0xe9, 0x4f, 0xa9, 0xdf, 0xf2, 0xdb,
		0x7e, 0x1a, 0x3f, 0x55, 0xa3, 0xb0, 0xda, 0xf8, 0xd4, 0xbf, 0xa8, 0x23, 0xe2, 0x24, 0x3c, 0x78,
		0xad, 0x44, 0xc2, 0x4b, 0xb0, 0xed, 0x20, 0xdc, 0x95, 0x25, 0x7e, 0x3f, 0x15, 0xe3, 0xd1, 0x6a,
		0xbb, 0xaf, 0x10, 0xb8, 0x57, 0x0a, 0x7b, 0xeb, 0xe4, 0xdb, 0x19, 0xe5, 0xd7, 0x19, 0xc7, 0x00,
		0x6a, 0xc4, 0x00, 0x88, 0x01, 0x10, 0x03, 0x00, 0x90, 0x01, 0x64, 0x00, 0x99, 0x18, 0x00, 0x31,
		0x00, 0x54, 0x1c, 0x2a, 0x0e, 0x15, 0x47, 0x0c, 0x20, 0x17, 0xda, 0x2c, 0x84, 0x43, 0xa9, 0x91,
		0xf8, 0xba, 0x35, 0x89, 0x60, 0xea, 0xc9, 0x15, 0x2f, 0xd6, 0x27, 0x84, 0x0d, 0x7f, 0x77, 0xed,
		0x3f, 0xb8, 0x4c, 0x34, 0x19, 0xe4, 0xfd, 0xa9, 0x67, 0x98, 0x0c, 0x9f, 0xdb, 0x8c, 0xd4, 0x12,
		0x72, 0xc1, 0x9c, 0xcb, 0xac, 0x7a, 0x72, 0x49, 0xcb, 0x4b, 0x92, 0xe0, 0x21, 0xf0, 0xe3, 0xc4,
		0x20, 0xc3, 0x64, 0x6a, 0x90, 0xed, 0x48, 0x33, 0xd1, 0xbb, 0x7d, 0xb5, 0xf9, 0x31, 0x26, 0xad,
		0xdb, 0x51, 0x05, 0x0d, 0x32, 0x4d, 0x76, 0xb5, 0xb9, 0x17, 0x36, 0x35, 0x96, 0x99, 0x0f, 0xb6,
		0xbf, 0x21, 0x3e, 0x98, 0xd9, 0xf5, 0xc5, 0xed, 0x75, 0xc2, 0x8c, 0xae, 0x1f, 0xba, 0xf5, 0xc2,
		0x4c, 0xef, 0x22, 0xeb, 0x26, 0x3e, 0x2e, 0x17, 0x42, 0x9d, 0x44, 0x48, 0x61, 0x41, 0x14, 0x13,
		0x48, 0x49, 0xc1, 0x94, 0x17, 0x50, 0x69, 0x41, 0xb5, 0x26, 0xb0, 0xd6, 0x04, 0xd7, 0x8a, 0x00,
		0x9b, 0x09, 0xb2, 0xa1, 0x40, 0x8b, 0x09, 0xf6, 0x78, 0x20, 0x8a, 0x0c, 0x98, 0x0e, 0x48, 0x91,
		0x01, 0x8a, 0x0c, 0xd8, 0x55, 0x16, 0x42, 0x4a, 0x43, 0x2e, 0x36, 0x6b, 0x31, 0x56, 0x6b, 0x23,
		0x76, 0xbb, 0x34, 0x96, 0xfb, 0xea, 0xd5, 0xee, 0xfc, 0x3f, 0x53, 0x9e, 0xf4, 0xd4, 0xef, 0x47,
		0xd7, 0xa6, 0xf4, 0x4f, 0xae, 0xe4, 0xf7, 0x84, 0xc0, 0x7e, 0xa8, 0xa4, 0x92, 0x7b, 0x61, 0x52,
		0x8d, 0xbe, 0x37, 0x2a, 0xfa, 0x1f, 0xfd, 0x8f, 0xfe, 0xdf, 0x2a, 0xfd, 0xef, 0x87, 0xdd, 0xb6,
		0x1f, 0x0f, 0x0e, 0x2c, 0x2c, 0xd8, 0x80, 0x03, 0xc1, 0x31, 0xcf, 0xc3, 0x6e, 0xbb, 0x37, 0x09,
		0xdf, 0xa9, 0x5e, 0x53, 0x9c, 0xea, 0x35, 0x83, 0xb3, 0x97, 0xd5, 0x26, 0x98, 0x4a, 0x8d, 0x54,
		0x6a, 0x24, 0x88, 0x42, 0x10, 0x85, 0x20, 0x0a, 0x10, 0x0d, 0x44, 0x03, 0xd1, 0x04, 0x51, 0x08,
		0xa2, 0x10, 0x44, 0x41, 0xff, 0xa3, 0xff, 0xd1, 0xff, 0x04, 0x51, 0x08, 0xa2, 0x10, 0x44, 0x59,
		0x19, 0x44, 0xc9, 0xb7, 0xec, 0xaf, 0x41, 0x0c, 0x25, 0xf5, 0xe3, 0x76, 0x22, 0x17, 0x43, 0x19,
		0x0c, 0x47, 0x22, 0x0a, 0x31, 0x14, 0x62, 0x28, 0x45, 0x88, 0xa1, 0xf4, 0xe4, 0xd1, 0x02, 0x43,
		0xf7, 0x46, 0x95, 0x65, 0xe8, 0x7d, 0x18, 0x1a, 0x86, 0x86, 0xa1, 0x25, 0xbe, 0xa9, 0x94, 0xf2,
		0x18, 0x0f, 0x28, 0x94, 0xae, 0xba, 0x54, 0x0c, 0x44, 0xd2, 0x57, 0x2d, 0x2b, 0x16, 0x6b, 0x0a,
		0xc6, 0xa6, 0xa2, 0xb1, 0xaf, 0x70, 0x6c, 0x2b, 0x1e, 0x67, 0x0a, 0xc8, 0x99, 0x22, 0x72, 0xa2,
		0x90, 0x64, 0x15, 0x93, 0xb0, 0x82, 0xb2, 0xa6, 0xa8, 0xc6, 0x03, 0x2b, 0x94, 0xac, 0xd7, 0x16,
		0xa5, 0xcc, 0x85, 0xed, 0x75, 0x15, 0x97, 0xa5, 0x96, 0xdc, 0xd6, 0x14, 0x98, 0x0b, 0x45, 0xe6,
		0x4e, 0xa1, 0xb9, 0x52, 0x6c, 0xce, 0x15, 0x9c, 0x73, 0x45, 0xe7, 0x54, 0xe1, 0xd9, 0x51, 0x7c,
		0x96, 0x14, 0xe0, 0x78, 0x66, 0xc4, 0xa3, 0x9e, 0x4b, 0xe5, 0x45, 0xfe, 0x14, 0x6c, 0x29, 0x77,
		0x1d, 0x5b, 0x7c, 0xc7, 0xca, 0x53, 0xb2, 0x55, 0x67, 0x65, 0x7f, 0xcf, 0x17, 0x90, 0x98, 0x3c,
		0x31, 0x39, 0x46, 0xbb, 0xdb, 0xed, 0x07, 0xb2, 0xfa, 0xff, 0x3f, 0x6e, 0xed, 0xd0, 0xac, 0xd0,
		0x0e, 0x5f, 0x42, 0x0d, 0x14, 0xb3, 0x1d, 0xfe, 0xea, 0xf8, 0xee, 0xdc, 0x76, 0x28, 0x6c, 0x07,
		0x7c, 0xc1, 0x60, 0x82, 0x05, 0x8c, 0xb2, 0x87, 0x4f, 0x96, 0xb0, 0x09, 0x7f, 0x0f, 0x7f, 0x0f,
		0x7f, 0xaf, 0xe0, 0x98, 0xe3, 0x00, 0x6f, 0x6c, 0x62, 0xcd, 0xa2, 0x3e, 0x52, 0xcd, 0x6d, 0x30,
		0x30, 0x32, 0x09, 0xdc, 0x4b, 0x77, 0x83, 0x44, 0x42, 0xf7, 0xd2, 0x7d, 0x60, 0xcb, 0xcc, 0xd4,
		0x30, 0x33, 0x98, 0x19, 0xcc, 0x8c, 0xc1, 0x0c, 0x10, 0x56, 0x74, 0xc8, 0xc7, 0xd6, 0x39, 0xd9,
		0x85, 0x22, 0x73, 0xa7, 0xd0, 0x5c, 0x29, 0x36, 0xe7, 0x0a, 0xce, 0xb9, 0xa2, 0x73, 0xaa, 0xf0,
		0xec, 0xc5, 0x6a, 0x5e, 0x10, 0x56, 0xcc, 0x9d, 0xbf, 0x17, 0x71, 0x38, 0x61, 0x45, 0x17, 0xdb,
		0xb4, 0xd2, 0xf6, 0xd2, 0xc6, 0x27, 0xbf, 0x59, 0x8d, 0x1a, 0xa9, 0x9f, 0x26, 0xf6, 0xcd, 0xeb,
		0xb3, 0xf7, 0x61, 0x6a, 0x31, 0xb5, 0x98, 0x5a, 0x4c, 0x6d, 0x89, 0x4c, 0x6d, 0x23, 0xea, 0x86,
		0xa9, 0x1f, 0x1f, 0x1d, 0x38, 0x30, 0xb6, 0x27, 0x16, 0x5f, 0x71, 0xdd, 0x6f, 0x14, 0xa6, 0xd3,
		0xb9, 0x4c, 0xe5, 0x97, 0x5d, 0x91, 0xef, 0x7f, 0x91, 0x0f, 0x41, 0x68, 0x5d, 0xb7, 0x38, 0xb2,
		0x2c, 0x73, 0xaf, 0xfb, 0xd3, 0x6b, 0x75, 0x7d, 0x87, 0xef, 0xfb, 0x39, 0xf6, 0x1a, 0x69, 0x10,
		0x85, 0xef, 0x82, 0xc7, 0xa0, 0x8f, 0x03, 0x7b, 0xd6, 0xdf, 0xfb, 0xfd, 0xa5, 0x83, 0x2d, 0xe2,
		0x7d, 0xdb, 0xf8, 0x2d, 0xb2, 0x7f, 0x72, 0x70, 0x70, 0x74, 0x7c, 0x70, 0xb0, 0x77, 0xfc, 0xfa,
		0x78, 0xef, 0xcd, 0xe1, 0xe1, 0xfe, 0xd1, 0xfe, 0xe1, 0x06, 0xef, 0x9a, 0x9d, 0x72, 0x8e, 0x7e,
		0x87, 0xaf, 0x51, 0xed, 0x78, 0x8d, 0xcf, 0x4e, 0x9d, 0x8d, 0xd1, 0x0b, 0xf1, 0x36, 0xf0, 0x36,
		0xf0, 0x36, 0xf0, 0x36, 0xf0, 0x36, 0xf0, 0x36, 0xf0, 0x36, 0xf0, 0x36, 0xf0, 0x36, 0xf0, 0x36,
		0xf0, 0x36, 0x8a, 0xe0, 0x6d, 0x90, 0x30, 0x6d, 0x31, 0x61, 0x5a, 0xa0, 0x36, 0x86, 0xbd, 0x05,
		0x2b, 0xd6, 0xd5, 0xdd, 0xdf, 0xfc, 0x27, 0xd1, 0x24, 0x90, 0xca, 0xfb, 0x20, 0x49, 0x4f, 0xd3,
		0x54, 0xf8, 0x42, 0xf0, 0x87, 0x20, 0x3c, 0x6f, 0xf9, 0x3d, 0x36, 0xef, 0xe9, 0xbf, 0xb0, 0xdb,
		0x6a, 0x09, 0x26, 0x05, 0x7e, 0xf0, 0xbe, 0xd9, 0x1b, 0xfc, 0x32, 0x6e, 0xfa, 0xb1, 0xdf, 0x7c,
		0xfb, 0x34, 0x1c, 0xba, 0x50, 0xab, 0x6f, 0x49, 0xd0, 0x6d, 0x0b, 0x78, 0x45, 0x34, 0x23, 0x74,
		0x79, 0xcb, 0xcb, 0xcb, 0xfe, 0xe7, 0xa9, 0x9f, 0x8d, 0x3f, 0x43, 0xfd, 0xb6, 0xf7, 0x76, 0x8a,
		0x24, 0x95, 0xa5, 0x48, 0xd2, 0xa0, 0x38, 0x50, 0x19, 0x8b, 0x24, 0x49, 0xf8, 0xdb, 0x92, 0x15,
		0x08, 0x85, 0xb0, 0x9b, 0x12, 0x49, 0xc5, 0x8a, 0xbd, 0x51, 0x22, 0x29, 0x87, 0x18, 0x98, 0x85,
		0x24, 0x36, 0xc9, 0x64, 0xb5, 0x05, 0x97, 0x43, 0xfa, 0x0a, 0x24, 0x2f, 0x35, 0xea, 0xb4, 0xd3,
		0xe2, 0x90, 0x87, 0x0d, 0x34, 0xa6, 0x0c, 0x01, 0x8b, 0x12, 0xaf, 0x28, 0xe1, 0xca, 0x10, 0xad,
		0xee, 0xfa, 0x08, 0x61, 0x87, 0x15, 0xdc, 0xa8, 0x18, 0x75, 0x96, 0x50, 0xc0, 0x50, 0x3d, 0x51,
		0xfc, 0x5e, 0xb0, 0x6e, 0xc2, 0x86, 0x4b, 0x29, 0xb7, 0x84, 0x6a, 0xd3, 0x99, 0x7d, 0x52, 0x14,
		0x26, 0x44, 0xb7, 0xe2, 0x95, 0x59, 0x45, 0x2b, 0x5a, 0x86, 0xe7, 0x02, 0x61, 0xdb, 0xd4, 0x32,
		0x3c, 0x67, 0x21, 0xd7, 0xa8, 0x9c, 0x60, 0x47, 0xbe, 0xc7, 0x1f, 0xad, 0xda, 0x03, 0x3e, 0x6d,
		0x31, 0x9f, 0x1d, 0x66, 0x3b, 0xa4, 0x3d, 0x78, 0x40, 0xd8, 0x17, 0x08, 0x7b, 0xf0, 0x50, 0x34,
		0x59, 0xd7, 0xbd, 0x06, 0x69, 0x5a, 0xee, 0x51, 0xa6, 0xac, 0xa3, 0xe1, 0x3d, 0x6b, 0xe3, 0xc8,
		0x86, 0x44, 0x44, 0xc3, 0x58, 0x6c, 0xa4, 0x03, 0x18, 0xe2, 0x81, 0x0b, 0xf1, 0x80, 0x85, 0x84,
		0x58, 0xe5, 0xe3, 0xaa, 0x9a, 0xde, 0x3a, 0x9e, 0x18, 0x13, 0xb9, 0x48, 0xe3, 0x64, 0x48, 0xc2,
		0x8d, 0xd6, 0x85, 0x94, 0x68, 0xa3, 0x0d, 0x21, 0x26, 0xd8, 0x98, 0x4b, 0xb0, 0x71, 0xb7, 0xbf,
		0x6c, 0x3f, 0x4d, 0xd1, 0xfc, 0xb3, 0xbf, 0x18, 0xfe, 0xd9, 0xbc, 0xe7, 0x54, 0x4e, 0xad, 0x43,
		0xbb, 0xf7, 0x16, 0xf4, 0xed, 0xcc, 0xa8, 0xa8, 0x5c, 0x54, 0x2e, 0x2a, 0x17, 0x95, 0x2b, 0xa6,
		0x72, 0xff, 0x9e, 0xa8, 0xdc, 0xd9, 0x52, 0x03, 0xe3, 0x9f, 0xb8, 0x1b, 0x3e, 0x32, 0xad, 0x87,
		0x92, 0x05, 0x7f, 0x37, 0x1e, 0xb9, 0xe9, 0x7f, 0xdb, 0x8e, 0x83, 0xa4, 0xf3, 0x6f, 0xfd, 0xb3,
		0x16, 0xfd, 0xf4, 0x6f, 0x39, 0xc7, 0x2b, 0x6a, 0x54, 0xfd, 0x6f, 0xe9, 0x4f, 0xa9, 0xdf, 0xf2,
		0xdb, 0x7e, 0x1a, 0x3f, 0x55, 0xa3, 0xb0, 0xda, 0xf8, 0xd4, 0xcf, 0x4f, 0x17, 0x75, 0xc6, 0x1e,
		0xbc, 0x56, 0x22, 0xe9, 0x8d, 0xb9, 0x76, 0xc4, 0xee, 0x4a, 0x7d, 0x26, 0x35, 0x13, 0x1a, 0x34,
		0xaa, 0x19, 0xab, 0x71, 0x50, 0xa4, 0x11, 0xa0, 0x33, 0x2b, 0xc5, 0x27, 0x52, 0x72, 0x4f, 0x2c,
		0xe4, 0x53, 0x23, 0xe4, 0x43, 0xc8, 0x87, 0x90, 0x0f, 0xfe, 0x07, 0xfe, 0x07, 0xfe, 0x07, 0xfe,
		0x07, 0x21, 0x1f, 0x42, 0x3e, 0xa8, 0x5c, 0x54, 0x2e, 0x2a, 0x97, 0x90, 0xcf, 0x16, 0x85, 0x7c,
		0x8a, 0x18, 0x07, 0x30, 0xb8, 0x0a, 0x49, 0xbe, 0xe8, 0xd2, 0x69, 0xad, 0x68, 0xc5, 0x3b, 0xd6,
		0x66, 0xf8, 0x8e, 0xff, 0xe2, 0xda, 0x7f, 0x28, 0x42, 0xd2, 0xda, 0x3f, 0x5d, 0xbf, 0xeb, 0x27,
		0xfa, 0xd9, 0x6a, 0xc3, 0xe7, 0x49, 0x4a, 0xb5, 0x47, 0x15, 0x24, 0xa5, 0xba, 0x4c, 0x54, 0xeb,
		0x6f, 0x68, 0xf3, 0x98, 0xe5, 0x60, 0x18, 0xd2, 0xd4, 0xcc, 0x2f, 0xdc, 0x6d, 0x6f, 0xd0, 0xd2,
		0xe8, 0x42, 0x5d, 0xc9, 0xa2, 0x96, 0x42, 0xed, 0xc0, 0x65, 0xdb, 0x7f, 0x0b, 0xf5, 0xe5, 0xe1,
		0x46, 0xec, 0x96, 0x7a, 0xcf, 0x1b, 0x70, 0x23, 0x56, 0xaa, 0xef, 0x4d, 0x65, 0x48, 0xc5, 0x42,
		0x5b, 0x63, 0xb4, 0x79, 0xfb, 0xa3, 0x4a, 0xd5, 0x49, 0x11, 0xad, 0x3a, 0x25, 0x5e, 0xe2, 0xd2,
		0x46, 0x49, 0x4b, 0x7b, 0x25, 0x2c, 0x6d, 0x95, 0xac, 0xb4, 0x5e, 0xa2, 0xd2, 0x7a, 0x49, 0x4a,
		0xab, 0x25, 0x28, 0x8b, 0x55, 0x79, 0x48, 0xbc, 0xa4, 0xe4, 0x54, 0x4a, 0x40, 0x1c, 0x84, 0x8f,
		0x92, 0xfb, 0x75, 0x64, 0xea, 0x4f, 0x28, 0xfd, 0x52, 0xb8, 0xd2, 0x2f, 0x83, 0x20, 0xc3, 0xe0,
		0x5f, 0x22, 0xad, 0x92, 0xf3, 0x39, 0x2c, 0x12, 0x31, 0x81, 0x92, 0xa6, 0x8f, 0x8a, 0x2f, 0xf0,
		0xed, 0x96, 0xf3, 0xed, 0x16, 0x57, 0x7c, 0x29, 0xed, 0x99, 0xbb, 0x48, 0x83, 0x5f, 0xd1, 0x86,
		0xbe, 0xe2, 0x81, 0x82, 0x1a, 0x8a, 0x14, 0x45, 0xba, 0x9d, 0x81, 0x02, 0xef, 0xcb, 0x63, 0xb5,
		0x4f, 0x7a, 0xd5, 0x96, 0x1f, 0xca, 0x47, 0x0c, 0x66, 0x87, 0x27, 0x74, 0x40, 0xe8, 0x80, 0xd0,
		0xc1, 0x56, 0x85, 0x0e, 0x6c, 0x74, 0x9f, 0xb0, 0xd0, 0x6d, 0xc2, 0x52, 0x77, 0x09, 0x0b, 0xa5,
		0xbe, 0x6d, 0x76, 0x8f, 0xb0, 0xdd, 0x87, 0xc8, 0x72, 0x77, 0x08, 0x17, 0x75, 0xfd, 0x6d, 0x74,
		0xb5, 0xb2, 0xd9, 0xed, 0xc1, 0xd5, 0x92, 0xba, 0xeb, 0xe6, 0xe0, 0x64, 0x95, 0x0b, 0x5a, 0xea,
		0xfe, 0xae, 0x28, 0xe1, 0x52, 0x01, 0xb7, 0xa4, 0x19, 0x47, 0x9d, 0x8e, 0xdf, 0xac, 0x76, 0x3e,
		0x0b, 0x36, 0x72, 0x1b, 0xdb, 0x9d, 0x99, 0xd1, 0xe1, 0x4e, 0xb8, 0x13, 0xee, 0x84, 0x3b, 0xe1,
		0x4e, 0xb8, 0x13, 0xee, 0x84, 0x3b, 0xe1, 0xce, 0x2d, 0xe6, 0xce, 0xb6, 0xf7, 0xcd, 0x66, 0xc4,
		0x73, 0x76, 0x78, 0xc8, 0x13, 0xf2, 0x84, 0x3c, 0x21, 0x4f, 0xc8, 0x13, 0xf2, 0x84, 0x3c, 0x21,
		0x4f, 0xc8, 0x73, 0x8b, 0xc9, 0x93, 0xa4, 0x7c, 0x38, 0x13, 0xce, 0x84, 0x33, 0x65, 0xf6, 0xeb,
		0x16, 0x24, 0xe5, 0x0b, 0xe8, 0xdc, 0x34, 0xf6, 0xc2, 0xa4, 0x1d, 0xa4, 0xd5, 0xa8, 0x91, 0xfa,
		0x36, 0x0e, 0x9a, 0x9e, 0xbf, 0x00, 0x4d, 0x8c, 0x26, 0x46, 0x13, 0xe3, 0xf1, 0xe3, 0xf1, 0xe3,
		0xf1, 0xe3, 0xf1, 0xe3, 0xf1, 0xe3, 0xf1, 0x6f, 0xb1, 0xc7, 0x3f, 0x86, 0x43, 0x3b, 0x49, 0x4e,
		0xb3, 0xc3, 0x43, 0x9e, 0x90, 0x27, 0xe4, 0x09, 0x79, 0x42, 0x9e, 0x90, 0x27, 0xe4, 0x09, 0x79,
		0x42, 0x9e, 0x65, 0x25, 0x4f, 0x8a, 0x91, 0x2c, 0x2e, 0x46, 0x62, 0x50, 0x7b, 0xd7, 0x7c, 0x6e,
		0xdd, 0x96, 0xf8, 0xfb, 0xcd, 0x7f, 0x32, 0x3c, 0xdc, 0xab, 0xbc, 0x0f, 0x92, 0xf4, 0x34, 0x4d,
		0x0d, 0x4b, 0x05, 0x7e, 0x08, 0xc2, 0xf3, 0x96, 0xdf, 0x03, 0xb5, 0x9e, 0x32, 0x08, 0xbb, 0xad,
		0x96, 0x41, 0x31, 0x81, 0x0f, 0xde, 0x37, 0xb9, 0xc1, 0x2e, 0xe3, 0xa6, 0x1f, 0xfb, 0xcd, 0xb7,
		0x4f, 0xc3, 0xa1, 0xb6, 0xb0, 0x34, 0xf5, 0xb4, 0x74, 0x54, 0x8c, 0x8a, 0x3c, 0xac, 0x2d, 0xa5,
		0xfc, 0x7b, 0xff, 0x1d, 0xd4, 0xbd, 0x16, 0x5a, 0xb3, 0x22, 0x54, 0xa3, 0xee, 0x7d, 0x8f, 0x66,
		0xb7, 0xe5, 0xc7, 0xd5, 0x4e, 0xd4, 0x0a, 0x1a, 0x4f, 0xfa, 0x75, 0xa9, 0xe7, 0x46, 0xa2, 0x42,
		0xb5, 0xbd, 0x98, 0x00, 0x15, 0xaa, 0x5d, 0x56, 0xa8, 0x36, 0x2c, 0x95, 0x2b, 0x53, 0x22, 0x97,
		0x1a, 0xd5, 0x36, 0x82, 0x6a, 0xd4, 0xa8, 0xb6, 0x08, 0x48, 0xc6, 0x35, 0xaa, 0xa9, 0xdf, 0xe7,
		0x40, 0x28, 0xe5, 0x85, 0x53, 0x5a, 0x48, 0xad, 0x09, 0xab, 0x35, 0xa1, 0xb5, 0x22, 0xbc, 0xc5,
		0x88, 0x0d, 0x6c, 0x63, 0xfd, 0xbe, 0x67, 0xff, 0x3c, 0x43, 0xdd, 0xc0, 0x4f, 0x9e, 0xff, 0xd5,
		0x53, 0x21, 0x4a, 0xfe, 0x6d, 0xa1, 0x37, 0xbc, 0x64, 0x1d, 0x0a, 0xdd, 0xb3, 0x79, 0xf4, 0x91,
		0x13, 0x81, 0xc6, 0xcd, 0x93, 0xb1, 0xe8, 0xde, 0x0c, 0x65, 0x42, 0x99, 0x4a, 0x02, 0x28, 0x58,
		0xe2, 0x74, 0x3c, 0x24, 0xfd, 0x50, 0xe0, 0x4d, 0x78, 0xd3, 0xe0, 0x1b, 0x89, 0x95, 0x39, 0x4d,
		0xfc, 0x7f, 0xba, 0x7e, 0xd8, 0xb0, 0x70, 0xfd, 0x6a, 0x3c, 0x32, 0xe9, 0x57, 0xc5, 0x51, 0x06,
		0xb6, 0x94, 0x82, 0x75, 0xe5, 0x60, 0x5d, 0x49, 0x58, 0x55, 0x16, 0x32, 0x4a, 0x43, 0x48, 0x79,
		0xc8, 0x3b, 0xad, 0x16, 0x9d, 0x57, 0x1b, 0x4e, 0xec, 0x22, 0x67, 0xb6, 0x7f, 0x82, 0xbe, 0x3b,
		0xd6, 0x59, 0x1b, 0x94, 0x6a, 0x2b, 0x53, 0xa7, 0x7e, 0x5e, 0xbd, 0x0b, 0xd4, 0xab, 0x17, 0x06,
		0x3a, 0x74, 0x3b, 0xba, 0x1d, 0xdd, 0x2e, 0x0b, 0x88, 0xe3, 0x01, 0x1b, 0x51, 0xf8, 0x10, 0xc5,
		0xed, 0x20, 0x7c, 0x94, 0xbe, 0x31, 0x3a, 0x27, 0x11, 0xf3, 0xaf, 0x12, 0xde, 0x06, 0x76, 0x92,
		0x13, 0xc5, 0xd5, 0x8e, 0x4d, 0xf5, 0x63, 0x5f, 0x0d, 0xd9, 0x56, 0x47, 0xce, 0xd4, 0x92, 0x33,
		0xf5, 0xe4, 0x44, 0x4d, 0xc9, 0xaa, 0x2b, 0x61, 0xb5, 0x65, 0x0f, 0x4d, 0x17, 0x28, 0x19, 0xf9,
		0x1b, 0x02, 0xcf, 0x15, 0xcc, 0x89, 0x85, 0xa1, 0xed, 0xdc, 0x18, 0x18, 0xfd, 0xb2, 0x23, 0xa2,
		0x2f, 0x6c, 0xdf, 0x20, 0xb0, 0xac, 0xd9, 0xe7, 0x5e, 0x63, 0xf9, 0x46, 0xc1, 0xf8, 0x3d, 0x0e,
		0x72, 0xce, 0x2d, 0x49, 0xf0, 0xec, 0xd2, 0x5b, 0xbc, 0x69, 0x90, 0xd7, 0xd2, 0xbb, 0xbb, 0x79,
		0x90, 0xcb, 0x6e, 0xd8, 0x29, 0xc7, 0xa8, 0x77, 0x05, 0xbd, 0x31, 0x21, 0x28, 0x4d, 0xd3, 0x38,
		0x2c, 0x7a, 0x5b, 0x76, 0x15, 0x77, 0x0b, 0xde, 0x9b, 0x85, 0xba, 0xa1, 0x6e, 0xa8, 0x1b, 0xea,
		0x86, 0xba, 0xa1, 0x6e, 0xa8, 0x1b, 0xea, 0x86, 0xba, 0xa1, 0xee, 0x12, 0x50, 0xb7, 0xff, 0xad,
		0xe1, 0xfb, 0x4d, 0x17, 0xe1, 0xee, 0xb9, 0x37, 0xc1, 0xdd, 0x70, 0x37, 0xdc, 0x0d, 0x77, 0xc3,
		0xdd, 0x70, 0x37, 0xdc, 0x0d, 0x77, 0xc3, 0xdd, 0x70, 0xf7, 0x16, 0x72, 0xb7, 0xdd, 0x60, 0xf7,
		0xb3, 0xf7, 0xc0, 0xdc, 0x30, 0x37, 0xcc, 0x0d, 0x73, 0xc3, 0xdc, 0x30, 0x37, 0xcc, 0x0d, 0x73,
		0xc3, 0xdc, 0x30, 0xf7, 0xd6, 0x30, 0xb7, 0xf8, 0x25, 0xc0, 0x39, 0x5b, 0x28, 0x7c, 0x19, 0x10,
		0xce, 0x86, 0xb3, 0xe1, 0x6c, 0x38, 0xdb, 0xd2, 0x65, 0xc3, 0xe7, 0xea, 0x45, 0xf2, 0xd2, 0xe1,
		0x44, 0x15, 0x2c, 0xad, 0xa4, 0x93, 0xb9, 0x9e, 0xce, 0xdf, 0xa1, 0xd7, 0xf6, 0xff, 0xb7, 0xd1,
		0x8d, 0x63, 0x3f, 0x4c, 0x7f, 0xf8, 0x71, 0xe6, 0xf1, 0xa9, 0x52, 0x3b, 0x77, 0x93, 0x07, 0xa7,
		0xc6, 0x18, 0xfd, 0x84, 0xec, 0x9d, 0xc7, 0x62, 0x1b, 0xba, 0x2f, 0x41, 0xd4, 0xf2, 0x52, 0x17,
		0x87, 0xba, 0x73, 0x6f, 0xc2, 0xf0, 0x61, 0xf8, 0x30, 0x7c, 0x18, 0x3e, 0x02, 0x4c, 0x04, 0x98,
		0x08, 0x30, 0x11, 0x60, 0x22, 0xc0, 0x44, 0x80, 0x69, 0x6b, 0x02, 0x4c, 0x13, 0x1a, 0xb6, 0x7b,
		0xa8, 0xfb, 0xec, 0x3d, 0x30, 0x37, 0xcc, 0x0d, 0x73, 0xc3, 0xdc, 0x30, 0x37, 0xcc, 0x0d, 0x73,
		0xc3, 0xdc, 0x30, 0x37, 0xcc, 0x5d, 0x6c, 0xe6, 0x2e, 0x54, 0x0d, 0x31, 0xe1, 0x86, 0x87, 0xe3,
		0x71, 0x85, 0x8b, 0xd9, 0x2f, 0x3c, 0xdc, 0x10, 0xe8, 0x88, 0x28, 0xb7, 0x28, 0xf9, 0xd6, 0x0a,
		0x1e, 0x76, 0x4c, 0x14, 0x3a, 0x82, 0x97, 0xe9, 0x9e, 0x38, 0x6d, 0xde, 0xc5, 0x1a, 0x1f, 0x4e,
		0x1b, 0x0e, 0xf9, 0x41, 0x45, 0xba, 0x2a, 0x4a, 0xad, 0x69, 0xb1, 0x7a, 0x91, 0x66, 0x12, 0xc9,
		0x8a, 0x48, 0x2d, 0xd3, 0xb5, 0xed, 0x18, 0x6f, 0x46, 0xef, 0xbb, 0xea, 0x7f, 0x94, 0xc9, 0x9f,
		0x69, 0x38, 0x52, 0x88, 0x0d, 0x51, 0xe8, 0xa6, 0x23, 0x46, 0xa5, 0x72, 0x45, 0x4a, 0xe3, 0xd2,
		0x6a, 0xc4, 0x46, 0x10, 0x88, 0x56, 0x23, 0x16, 0x55, 0x0e, 0x0d, 0xed, 0xd6, 0x0a, 0x23, 0x0d,
		0x46, 0xf2, 0x14, 0x56, 0x6b, 0x42, 0x6b, 0x45, 0x78, 0x8b, 0xe1, 0x34, 0xd0, 0xd0, 0x8e, 0x86,
		0x76, 0x65, 0xe2, 0x4b, 0x7d, 0x77, 0x9f, 0x26, 0xec, 0xab, 0x66, 0xb6, 0xa2, 0x85, 0xd1, 0xaa,
		0x5e, 0x5a, 0x21, 0x9a, 0xbe, 0x6b, 0xc1, 0xbf, 0x11, 0xf4, 0x1b, 0xb7, 0x77, 0xaf, 0xd1, 0xde,
		0x3d, 0x4f, 0x0e, 0x28, 0x41, 0x7b, 0xf7, 0x9c, 0xb5, 0x89, 0xba, 0x5a, 0x56, 0x10, 0xee, 0x1d,
		0xc1, 0x09, 0xd3, 0x9d, 0x28, 0xb3, 0x09, 0xaa, 0x28, 0xe9, 0xa7, 0x75, 0x5a, 0x35, 0xdb, 0x44,
		0xaf, 0x9f, 0xb6, 0x0c, 0x53, 0xa6, 0xa8, 0x2d, 0xb5, 0xb4, 0xa4, 0xa2, 0x76, 0x54, 0xd6, 0x8a,
		0x3a, 0xda, 0x50, 0x5f, 0x0b, 0xea, 0x6a, 0x3f, 0x63, 0xad, 0x67, 0xac, 0xed, 0x8c, 0xb4, 0x9c,
		0xac, 0x90, 0xaa, 0x86, 0x1a, 0x2a, 0x63, 0x81, 0xab, 0x06, 0x4d, 0x7d, 0xdb, 0x3e, 0x33, 0x8a,
		0x9e, 0x89, 0xdf, 0xd3, 0x35, 0xf1, 0x7b, 0x98, 0x78, 0x4c, 0xbc, 0x1d, 0x57, 0x7d, 0x4a, 0x2b,
		0xc7, 0x41, 0xf8, 0xa8, 0xb3, 0xde, 0x23, 0x15, 0x7d, 0x82, 0x8d, 0x9f, 0xb7, 0xf1, 0x0a, 0xf4,
		0x93, 0xc1, 0x28, 0xef, 0x18, 0xcc, 0xc0, 0xe8, 0x0c, 0x58, 0x41, 0x91, 0xa9, 0x9d, 0xf3, 0x6a,
		0x9d, 0xe3, 0x6a, 0x9d, 0xd3, 0xaa, 0x9d, 0xc3, 0xae, 0x9b, 0x17, 0xc5, 0x1d, 0xa1, 0xb9, 0x13,
		0x2a, 0x99, 0x80, 0x6a, 0x29, 0xde, 0xad, 0xde, 0x42, 0xcb, 0x37, 0xc6, 0xe2, 0xff, 0xb2, 0x64,
		0x4a, 0xb2, 0x4e, 0x85, 0xd2, 0x14, 0x2c, 0xfe, 0xe4, 0xf3, 0x9f, 0x6b, 0xc1, 0x67, 0xaa, 0xfc,
		0xd3, 0xf5, 0xbb, 0xfe, 0xf2, 0x5c, 0xf1, 0xb1, 0xf2, 0x1a, 0xfe, 0xdc, 0x92, 0x6f, 0xb5, 0x9a,
		0x21, 0xd7, 0x9a, 0xd9, 0x2c, 0xe6, 0x34, 0xbb, 0xd9, 0xcc, 0x6a, 0x1e, 0x95, 0xcd, 0xa0, 0xb2,
		0xb9, 0x53, 0x32, 0x6b, 0x6a, 0xfb, 0x68, 0x1d, 0xa3, 0x0d, 0x16, 0x6c, 0xfd, 0x1c, 0xcc, 0xac,
		0xef, 0xba, 0xef, 0x9f, 0xcd, 0x55, 0xc8, 0x4c, 0x55, 0x2a, 0x14, 0xa5, 0x4e, 0x4d, 0xaa, 0x94,
		0xa4, 0x4d, 0x45, 0xda, 0x14, 0xa4, 0x45, 0x3d, 0x66, 0x16, 0x2a, 0x2b, 0xda, 0x57, 0x1a, 0xa3,
		0x35, 0x54, 0x74, 0x3d, 0x87, 0xcf, 0x59, 0xf6, 0x3d, 0xf7, 0xf0, 0x3d, 0xf1, 0x3d, 0x07, 0x0f,
		0x68, 0x1d, 0x6b, 0x9b, 0x1c, 0x63, 0xe3, 0x6b, 0xe2, 0x6b, 0xe2, 0x6b, 0xea, 0xfb, 0x9a, 0x0a,
		0x0a, 0xb5, 0x0f, 0x25, 0xd5, 0x54, 0x67, 0x36, 0x66, 0xc1, 0x66, 0x30, 0x06, 0x72, 0x8e, 0x9c,
		0x6f, 0x98, 0x9c, 0x07, 0x4d, 0x3f, 0x4c, 0x83, 0xf4, 0x49, 0x2f, 0xe5, 0x63, 0x2c, 0xec, 0x1a,
		0x97, 0x63, 0x2a, 0x17, 0xc3, 0x57, 0xbf, 0xf5, 0x12, 0x81, 0x6c, 0xce, 0xdf, 0x2f, 0x6f, 0xea,
		0xbf, 0xff, 0x71, 0xfe, 0xc7, 0x79, 0xfd, 0xf6, 0x5f, 0x57, 0xe7, 0xba, 0x7b, 0xa7, 0x7f, 0xff,
		0x27, 0x31, 0xba, 0x80, 0x27, 0x94, 0x1f, 0x77, 0x7d, 0xfe, 0xce, 0x20, 0xb3, 0xf0, 0x65, 0xde,
		0x1f, 0xff, 0xdd, 0xf5, 0xe5, 0x55, 0xfd, 0xf6, 0xf4, 0xe2, 0x7d, 0x99, 0xbf, 0xc4, 0x5f, 0x66,
		0x8b, 0xa0, 0xf5, 0xe4, 0x9d, 0x6d, 0x15, 0xb3, 0x71, 0x41, 0xdd, 0x41, 0x64, 0x69, 0xf0, 0xaf,
		0x61, 0xa6, 0x97, 0xcb, 0x23, 0x56, 0x25, 0xff, 0x41, 0xc7, 0x6f, 0x50, 0xe4, 0x08, 0x9c, 0xdc,
		0xcd, 0x77, 0x72, 0x95, 0xed, 0xbe, 0x41, 0x7a, 0xa7, 0x4e, 0x1a, 0xe7, 0x74, 0xba, 0xa6, 0x72,
		0xee, 0xa5, 0x8c, 0x58, 0xc6, 0x7e, 0x53, 0x5d, 0x2a, 0x7b, 0x0f, 0x11, 0x79, 0x42, 0x28, 0xdd,
		0x44, 0x9e, 0x14, 0x43, 0xa4, 0x66, 0xa1, 0x52, 0xcd, 0x8d, 0x8b, 0x57, 0x8a, 0x57, 0xaa, 0xea,
		0x95, 0xea, 0xde, 0x34, 0xaa, 0xb4, 0xbd, 0x6f, 0x7d, 0xb3, 0x61, 0xe8, 0x0a, 0x0e, 0x86, 0x31,
		0xbb, 0xd8, 0xb7, 0x67, 0x7a, 0xb1, 0x6f, 0x8f, 0x8b, 0x7d, 0x16, 0xc4, 0x48, 0x5c, 0x9c, 0x44,
		0xc5, 0xca, 0xcc, 0xf3, 0xd3, 0xbd, 0xeb, 0x61, 0x7c, 0x07, 0x68, 0xbc, 0x5f, 0xba, 0x41, 0x98,
		0x1a, 0x95, 0x4c, 0x12, 0x28, 0x8d, 0x24, 0x54, 0x02, 0x49, 0xa6, 0xe6, 0x81, 0xe0, 0x65, 0x39,
		0xd1, 0xfa, 0x35, 0xd2, 0x25, 0x8a, 0x6c, 0x14, 0x9f, 0xf9, 0x2e, 0x53, 0x21, 0xa2, 0xf0, 0x4b,
		0x60, 0xaf, 0x54, 0x90, 0x95, 0x55, 0xc9, 0xe9, 0xfa, 0xdb, 0x5d, 0x81, 0xeb, 0x09, 0xb4, 0x83,
		0x50, 0x04, 0x3b, 0xfa, 0xc3, 0x80, 0x1d, 0x60, 0x07, 0xd8, 0x01, 0x76, 0x80, 0x1d, 0x60, 0x07,
		0xd8, 0xb1, 0x35, 0xd8, 0x51, 0xf2, 0xdb, 0xa1, 0x33, 0x67, 0x68, 0xb1, 0xdf, 0x54, 0x3a, 0x47,
		0x53, 0x9f, 0x04, 0x2e, 0x7c, 0x8b, 0xd1, 0x17, 0x31, 0x52, 0x4b, 0x54, 0x45, 0x8c, 0x14, 0x67,
		0x05, 0x67, 0x05, 0x67, 0x05, 0x67, 0x05, 0x67, 0x05, 0x67, 0x05, 0x67, 0x65, 0x83, 0x9c, 0x15,
		0x62, 0xa4, 0x60, 0x07, 0xd8, 0x01, 0x76, 0x80, 0x1d, 0x60, 0x07, 0xd8, 0x01, 0x76, 0x38, 0xc2,
		0x8e, 0x4d, 0x8b, 0x91, 0x52, 0x36, 0x6f, 0xc1, 0xac, 0x98, 0xd5, 0xca, 0xfb, 0xbd, 0x37, 0x4c,
		0xfd, 0xda, 0x6f, 0x52, 0x24, 0x8f, 0x22, 0x79, 0x16, 0xd8, 0x92, 0x42, 0x05, 0xf6, 0xcd, 0x32,
		0xa9, 0xe2, 0x1c, 0x83, 0x58, 0x77, 0x90, 0x28, 0x54, 0x30, 0x37, 0x13, 0x14, 0x2a, 0x40, 0xce,
		0x29, 0x54, 0xb0, 0x46, 0xd8, 0x29, 0x54, 0x20, 0x14, 0x87, 0xa1, 0x50, 0x41, 0x81, 0xbe, 0x04,
		0x85, 0x0a, 0x4a, 0xe7, 0x2a, 0xcb, 0x56, 0x9d, 0xcd, 0xe0, 0xe5, 0x7e, 0xd5, 0xba, 0x11, 0xfd,
		0x95, 0x2b, 0xd1, 0xf8, 0xb8, 0xee, 0x7c, 0x5c, 0xae, 0x44, 0xc3, 0xbf, 0x9b, 0xc8, 0xbf, 0x8e,
		0xa3, 0xd3, 0x5f, 0x49, 0xe1, 0x25, 0x85, 0x17, 0x99, 0xde, 0x3c, 0x99, 0xe6, 0xc8, 0x69, 0xd1,
		0xb4, 0x48, 0x9c, 0x39, 0xfd, 0x15, 0x0b, 0x1e, 0x3a, 0x49, 0x34, 0x81, 0xc8, 0x10, 0xb0, 0xa7,
		0xf9, 0x83, 0xf9, 0x06, 0xd2, 0x6b, 0xfa, 0xd0, 0xdf, 0x33, 0x65, 0x6b, 0xf8, 0x30, 0x6c, 0xc1,
		0x60, 0xd0, 0xec, 0x61, 0xbe, 0xd7, 0xea, 0xfa, 0xc6, 0x0f, 0x0b, 0x9e, 0xa1, 0x09, 0x44, 0x59,
		0x9a, 0x40, 0xcc, 0xf5, 0x19, 0xcd, 0xdc, 0x0f, 0x42, 0xb1, 0x43, 0x29, 0xad, 0x21, 0x64, 0x79,
		0x8a, 0xd6, 0x10, 0x44, 0xa3, 0x88, 0x46, 0x19, 0x46, 0xa3, 0xc8, 0xb8, 0xc0, 0x6b, 0xdd, 0x34,
		0xaf, 0x95, 0x36, 0x84, 0xf9, 0x3b, 0xb0, 0xf3, 0x48, 0x3c, 0xdf, 0x2a, 0x9f, 0x42, 0xd6, 0x98,
		0xe4, 0xcd, 0x37, 0xc9, 0x14, 0xb2, 0xce, 0xa4, 0x4e, 0xfa, 0x9a, 0x21, 0xd1, 0x48, 0x51, 0x9e,
		0x3c, 0x0b, 0x35, 0x23, 0xa2, 0x6e, 0xa8, 0x79, 0xbc, 0xe9, 0x0c, 0x4e, 0x7c, 0xc6, 0x43, 0x70,
		0x92, 0x0b, 0x3f, 0x17, 0x8a, 0x9f, 0xb5, 0x0b, 0xb7, 0x68, 0xa6, 0x36, 0x98, 0x45, 0x41, 0x84,
		0x04, 0xc4, 0x58, 0x50, 0x24, 0x04, 0x46, 0x4e, 0x70, 0xa4, 0x04, 0x48, 0x5c, 0x90, 0xc4, 0x05,
		0x4a, 0x54, 0xb0, 0xf4, 0x04, 0x4c, 0x53, 0xd0, 0x8c, 0x05, 0x6e, 0x3c, 0x40, 0x27, 0x0e, 0xa2,
		0x38, 0x48, 0x9f, 0xcc, 0x97, 0x79, 0xb4, 0xf1, 0xc6, 0x23, 0x1a, 0x2e, 0x8a, 0xcc, 0xb5, 0x57,
		0x63, 0xa1, 0x94, 0x14, 0x4e, 0x79, 0x21, 0x95, 0x16, 0x56, 0x6b, 0x42, 0x6b, 0x4d, 0x78, 0xad,
		0x08, 0xb1, 0x99, 0x30, 0x1b, 0x0a, 0xb5, 0x79, 0x34, 0x6a, 0xe9, 0x7e, 0xf3, 0xc3, 0x6e, 0xdb,
		0x8f, 0x07, 0x61, 0x1b, 0x81, 0x4d, 0x37, 0xb2, 0x97, 0x07, 0x02, 0x63, 0x9d, 0x87, 0xdd, 0x76,
		0xef, 0xcb, 0xe6, 0x75, 0xd1, 0xdb, 0x60, 0xb1, 0x2a, 0x89, 0xff, 0x4f, 0xd7, 0x0f, 0x25, 0x6c,
		0xe5, 0x98, 0xf1, 0x47, 0x23, 0xa2, 0x44, 0x51, 0xa2, 0x28, 0xd1, 0x42, 0x29, 0xd1, 0x6e, 0x10,
		0xa6, 0xaf, 0x6b, 0x82, 0xfa, 0xf3, 0x58, 0x60, 0x28, 0x99, 0xea, 0x33, 0xa3, 0x5f, 0x32, 0xfb,
		0xff, 0x85, 0x74, 0x35, 0x1a, 0x61, 0xb5, 0x36, 0x37, 0xac, 0x70, 0x75, 0x9a, 0xf1, 0xb8, 0x16,
		0xea, 0xa1, 0x08, 0x89, 0xc7, 0xec, 0x52, 0x09, 0x56, 0xad, 0x71, 0xb5, 0x54, 0x07, 0xb5, 0x37,
		0x07, 0x6f, 0x8e, 0x8e, 0x6b, 0x6f, 0x0e, 0x4b, 0xb4, 0x66, 0x3b, 0xc5, 0x18, 0xe5, 0xae, 0x84,
		0xa8, 0x95, 0x4a, 0xa8, 0xf3, 0xb1, 0x2a, 0xd7, 0xb8, 0x0f, 0x0e, 0x62, 0x81, 0x58, 0x20, 0x96,
		0x65, 0xc4, 0x32, 0xbb, 0xcf, 0xbe, 0xd4, 0x4f, 0x15, 0xb0, 0x11, 0x32, 0xf7, 0xdd, 0x97, 0x7e,
		0xf1, 0xdf, 0x2f, 0x6f, 0xea, 0x37, 0x67, 0xbf, 0x9e, 0xbf, 0xfb, 0xe3, 0xfd, 0xf9, 0xb5, 0xc9,
		0x1d, 0xf8, 0xc5, 0x06, 0x33, 0x11, 0x23, 0x44, 0x59, 0x4a, 0x9c, 0x99, 0x83, 0xcb, 0x8f, 0xe7,
		0xf5, 0xeb, 0xd3, 0xdb, 0xf3, 0xfa, 0xed, 0x5f, 0x97, 0xf5, 0xb3, 0xcb, 0xf7, 0x97, 0xd7, 0x95,
		0x22, 0xe2, 0x92, 0xa5, 0x6f, 0xdf, 0xfb, 0xd2, 0x83, 0x6f, 0xff, 0xeb, 0xf5, 0xf9, 0xb9, 0xf8,
		0xf7, 0x17, 0x19, 0xe9, 0xae, 0xb4, 0xe5, 0xfc, 0xdc, 0x46, 0xe7, 0x0d, 0x2f, 0x41, 0x4d, 0xe2,
		0x4b, 0x22, 0x49, 0x53, 0x93, 0x7c, 0x87, 0xc9, 0x6f, 0xb5, 0xee, 0x41, 0xea, 0x4f, 0xa6, 0x4e,
		0x71, 0xe5, 0x20, 0xec, 0x74, 0xd3, 0xc4, 0xfc, 0x68, 0x70, 0x38, 0x0e, 0x47, 0x83, 0x1c, 0x0d,
		0xe6, 0x44, 0x6b, 0x25, 0x3b, 0x1a, 0xec, 0x0b, 0x8c, 0x9c, 0xaf, 0x35, 0x18, 0x4e, 0xc6, 0xd9,
		0xda, 0xc7, 0xd9, 0xc2, 0xd9, 0xda, 0x4e, 0x67, 0xcb, 0x54, 0xac, 0xc7, 0x03, 0x19, 0xa6, 0xdc,
		0x2c, 0xdd, 0xbe, 0x46, 0x29, 0x38, 0x96, 0x04, 0x5e, 0x5c, 0xf0, 0x6d, 0x28, 0x00, 0x7b, 0x8a,
		0xc0, 0x96, 0x42, 0xb0, 0xae, 0x18, 0xac, 0x2b, 0x08, 0xab, 0x8a, 0x42, 0xd6, 0xe9, 0x12, 0x72,
		0x5d, 0xc5, 0x14, 0xc8, 0x84, 0x13, 0x9a, 0xf2, 0x1b, 0x6a, 0x12, 0x08, 0x92, 0xde, 0x49, 0x96,
		0xce, 0x23, 0xa4, 0x15, 0x8b, 0x4d, 0x05, 0x63, 0x5f, 0xd1, 0xd8, 0x56, 0x38, 0xce, 0x14, 0x8f,
		0x33, 0x05, 0xe4, 0x44, 0x11, 0xc9, 0x2a, 0x24, 0x0b, 0x31, 0xb5, 0x17, 0xa2, 0xe1, 0xe4, 0xa5,
		0xfb, 0x5d, 0xfb, 0x92, 0x5e, 0x66, 0x5c, 0x39, 0xd9, 0x29, 0xe6, 0x7a, 0x49, 0x1e, 0x17, 0xf7,
		0x1d, 0xba, 0x6a, 0x6a, 0x63, 0xb5, 0x66, 0x9d, 0xc6, 0xaa, 0xc0, 0x31, 0x1d, 0x76, 0x00, 0x3b,
		0x80, 0x1d, 0xc0, 0x0e, 0xbc, 0xb0, 0x97, 0x0e, 0xbb, 0xd4, 0x18, 0x1c, 0x58, 0x18, 0x5b, 0x26,
		0x5d, 0xb6, 0x1c, 0x86, 0x66, 0x50, 0x8a, 0xca, 0x9a, 0x8d, 0xc9, 0x5a, 0xe9, 0x0a, 0xf3, 0x82,
		0x79, 0xc1, 0xbc, 0x60, 0x5e, 0x32, 0xef, 0x77, 0xf5, 0x5b, 0xf8, 0xca, 0xa6, 0xe5, 0xd8, 0xc2,
		0xd8, 0x53, 0xb7, 0xfa, 0x17, 0xfe, 0x33, 0x53, 0x61, 0x32, 0xfb, 0x85, 0xff, 0x72, 0xdb, 0xa0,
		0xaf, 0x7e, 0xf0, 0xf8, 0x29, 0xb5, 0x67, 0x84, 0x86, 0xe3, 0x63, 0x85, 0xb0, 0x42, 0x58, 0x21,
		0xac, 0x90, 0xe0, 0x7e, 0x37, 0x6e, 0x8e, 0xbc, 0x4e, 0xbb, 0x9c, 0x58, 0x18, 0x5a, 0xf6, 0x3a,
		0xcb, 0xf3, 0x5f, 0x76, 0xe4, 0xf3, 0x85, 0xad, 0xeb, 0x2e, 0x8e, 0xd4, 0xfa, 0xdc, 0x6b, 0x2c,
		0x5d, 0x87, 0x99, 0x7b, 0x8f, 0xc5, 0xab, 0x16, 0x96, 0xc5, 0x77, 0x76, 0xe9, 0xbd, 0x6f, 0x1b,
		0xb7, 0xf4, 0xf6, 0x9a, 0x44, 0x17, 0x62, 0x37, 0xec, 0x94, 0x63, 0xd4, 0xbb, 0xa2, 0x02, 0x76,
		0xa1, 0x0e, 0xb6, 0x85, 0xb2, 0x6d, 0xe7, 0xc6, 0xb5, 0x98, 0x7d, 0x3b, 0xc8, 0x49, 0x1d, 0xfc,
		0xcb, 0x28, 0x15, 0x57, 0x7e, 0x65, 0x24, 0xda, 0xe0, 0x0b, 0x66, 0x06, 0xc8, 0x67, 0x04, 0x48,
		0xf7, 0xd5, 0x27, 0xb5, 0x88, 0xd4, 0x22, 0xe7, 0x4e, 0x4e, 0xb1, 0x34, 0xb0, 0xb8, 0x33, 0x63,
		0x31, 0x94, 0x66, 0x23, 0x84, 0xb6, 0xa0, 0x20, 0x66, 0xd0, 0xdc, 0x24, 0x85, 0xae, 0xd7, 0xab,
		0x6a, 0xed, 0xea, 0xea, 0xf4, 0xb0, 0x5a, 0xbb, 0xae, 0xd2, 0x6a, 0xbd, 0x86, 0x5a, 0x47, 0xad,
		0x6f, 0xa5, 0x5a, 0x27, 0x63, 0x94, 0x20, 0xba, 0x6d, 0x45, 0x63, 0x5b, 0xe1, 0x38, 0x53, 0x3c,
		0xce, 0x14, 0x90, 0x13, 0x45, 0x64, 0x27, 0xa6, 0x41, 0xc6, 0xe8, 0x3c, 0xae, 0x90, 0x31, 0x2a,
		0xa4, 0xff, 0xc9, 0x18, 0xc5, 0x0e, 0x60, 0x07, 0xb0, 0x03, 0x56, 0xf6, 0x3b, 0x19, 0xa3, 0xa5,
		0x30, 0x34, 0x64, 0x8c, 0x62, 0x5e, 0x30, 0x2f, 0x98, 0x17, 0x32, 0x46, 0xe7, 0x4c, 0x0b, 0x19,
		0xa3, 0x8e, 0x6c, 0x10, 0x19, 0xa3, 0x58, 0x21, 0xac, 0x10, 0x56, 0x88, 0x8c, 0xd1, 0x39, 0xed,
		0x42, 0xc6, 0xe8, 0xd4, 0x07, 0x27, 0x63, 0x54, 0xfd, 0x3d, 0x64, 0x8c, 0x16, 0x76, 0xe9, 0xc9,
		0x18, 0x2d, 0xc2, 0xa8, 0x64, 0x8c, 0x66, 0x82, 0x89, 0x92, 0x67, 0x8c, 0x0e, 0xf2, 0x66, 0x8a,
		0x92, 0x5f, 0x94, 0x6b, 0x59, 0xbc, 0xdf, 0xfc, 0x27, 0x91, 0xd3, 0xff, 0xca, 0xfb, 0x20, 0x49,
		0x4f, 0xd3, 0x54, 0xa8, 0xc8, 0xde, 0x87, 0x20, 0x3c, 0x6f, 0xf9, 0x3d, 0x60, 0xed, 0xe9, 0xa5,
		0xb0, 0xdb, 0x6a, 0x09, 0x64, 0x61, 0x7d, 0xf0, 0xbe, 0xc9, 0x0f, 0x7a, 0x19, 0x37, 0xfd, 0xd8,
		0x6f, 0xbe, 0x7d, 0x1a, 0x0e, 0x99, 0xeb, 0x6a, 0x0a, 0x0b, 0xa6, 0x2b, 0x81, 0xac, 0x88, 0xa4,
		0xd8, 0xc5, 0xdd, 0x46, 0x1a, 0x8e, 0xea, 0xc1, 0x47, 0x49, 0xfd, 0x66, 0xf4, 0xae, 0xab, 0xfe,
		0xc7, 0x98, 0xfc, 0xb9, 0x7e, 0xd1, 0x7f, 0x29, 0xa5, 0xb4, 0x8b, 0xb4, 0x13, 0x8a, 0x5c, 0x4a,
		0x3b, 0x0a, 0xfd, 0x6a, 0xec, 0xa5, 0x7e, 0x35, 0xfd, 0x1a, 0x55, 0x1b, 0x51, 0x2b, 0x8a, 0xcd,
		0xcb, 0x6a, 0x2f, 0x18, 0x93, 0x12, 0xdb, 0x94, 0xd8, 0xce, 0x29, 0xa4, 0x53, 0xb2, 0x12, 0xdb,
		0x42, 0x35, 0x78, 0x65, 0x6b, 0xef, 0x52, 0x64, 0x3b, 0x0f, 0x41, 0xb5, 0x26, 0xb0, 0xd6, 0x04,
		0xd7, 0x8a, 0x00, 0x17, 0xc3, 0x9b, 0x10, 0x2b, 0xb2, 0x7d, 0xdf, 0x90, 0xbf, 0x2d, 0x71, 0xdf,
		0xe0, 0x06, 0x5c, 0x81, 0x14, 0x80, 0x2d, 0x45, 0x60, 0x5d, 0x21, 0x58, 0x57, 0x0c, 0x56, 0x15,
		0x44, 0x31, 0x23, 0x4a, 0xf6, 0x6e, 0xc0, 0x89, 0x75, 0x9d, 0x7d, 0x2e, 0xfd, 0x92, 0xf7, 0xdf,
		0xec, 0x1c, 0xc2, 0x58, 0x38, 0xea, 0xb2, 0x79, 0xe8, 0x62, 0x39, 0xe2, 0x6e, 0xfb, 0x90, 0xc5,
		0x45, 0x38, 0xdd, 0xc2, 0xa1, 0x8a, 0xd5, 0xc3, 0x14, 0x57, 0x4b, 0x6a, 0xab, 0x9b, 0xad, 0xd3,
		0xb5, 0x2d, 0xe8, 0xd1, 0xc3, 0xdd, 0x06, 0xdd, 0xc3, 0x6d, 0x08, 0xde, 0xc8, 0x9b, 0x38, 0x8f,
		0x41, 0x0c, 0x58, 0x02, 0x96, 0x80, 0xe5, 0xf6, 0x81, 0xa5, 0x68, 0xb6, 0x8f, 0x85, 0x2c, 0x1f,
		0xc0, 0x12, 0xb0, 0x04, 0x2c, 0x0d, 0x96, 0xd4, 0x5d, 0x56, 0x0e, 0x88, 0xb9, 0x31, 0x88, 0x59,
		0xed, 0x34, 0x52, 0x2b, 0x98, 0xd9, 0x1f, 0x18, 0xd4, 0x04, 0x35, 0x41, 0xcd, 0xad, 0x42, 0xcd,
		0x8e, 0x1f, 0x37, 0xfc, 0x30, 0xf5, 0x1e, 0x7d, 0x0b, 0xb8, 0x79, 0x08, 0x6e, 0x82, 0x9b, 0xe0,
		0x66, 0x31, 0x70, 0x73, 0x6f, 0x0f, 0xba, 0x84, 0x2e, 0xd7, 0xd2, 0x65, 0x35, 0xf6, 0xdb, 0x5e,
		0x10, 0x06, 0xe1, 0xa3, 0x35, 0xce, 0x9c, 0x7a, 0x05, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27,
		0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0xb9, 0x45, 0xc4, 0xd9, 0xf6, 0xbe, 0x55, 0xfb,
		0x05, 0x48, 0xaa, 0x4d, 0xbf, 0x93, 0x7e, 0xaa, 0xde, 0x3f, 0xa5, 0x7e, 0x22, 0x4f, 0x9d, 0x8b,
		0x5f, 0x03, 0x79, 0x42, 0x9e, 0x90, 0xe7, 0x56, 0x91, 0x27, 0xf9, 0x9a, 0x50, 0x27, 0xd4, 0xb9,
		0xe1, 0xd4, 0x49, 0xbe, 0x26, 0xf0, 0xa9, 0x03, 0x9f, 0x1d, 0xaf, 0xf1, 0xd9, 0x4f, 0x1d, 0xe0,
		0xe7, 0xe8, 0x45, 0x00, 0x28, 0x00, 0x0a, 0x80, 0x02, 0xa0, 0x00, 0x28, 0x00, 0x0a, 0x80, 0x02,
		0xa0, 0x00, 0xe8, 0x96, 0x03, 0xe8, 0xe0, 0x5c, 0xcc, 0x01, 0x80, 0x0e, 0x5f, 0x04, 0x80, 0x02,
		0xa0, 0x00, 0xe8, 0x56, 0x01, 0x28, 0x67, 0xef, 0x40, 0x28, 0x10, 0xba, 0x05, 0x10, 0xca, 0xd9,
		0x3b, 0xf4, 0xb9, 0x72, 0x19, 0x7b, 0x40, 0x18, 0x84, 0x8f, 0xd5, 0x7b, 0xff, 0x93, 0xf7, 0x25,
		0x88, 0x2c, 0xdc, 0x5d, 0x9f, 0x7b, 0x03, 0xbc, 0x09, 0x6f, 0xc2, 0x9b, 0x5b, 0xc5, 0x9b, 0x03,
		0xb7, 0x53, 0x58, 0x03, 0xbc, 0xb0, 0xd4, 0x96, 0x4f, 0xb8, 0x1d, 0x5f, 0xd9, 0xcb, 0x77, 0x97,
		0xa8, 0xe0, 0xf3, 0x7c, 0xc1, 0xdb, 0xdd, 0x61, 0xd9, 0xcd, 0xbc, 0x0a, 0x31, 0xbf, 0x34, 0x2b,
		0x40, 0x1a, 0xc5, 0xed, 0xea, 0x00, 0xb3, 0x64, 0x0b, 0x91, 0x4e, 0x8d, 0x4b, 0x41, 0x52, 0x77,
		0xd6, 0x96, 0x82, 0xa4, 0x14, 0x24, 0x5d, 0x2d, 0xf0, 0x81, 0x8d, 0xdb, 0x56, 0x12, 0x95, 0x87,
		0x85, 0x05, 0x1e, 0xec, 0x06, 0xbb, 0xc1, 0x6e, 0x59, 0x05, 0x32, 0x21, 0x2c, 0x3f, 0xad, 0x36,
		0xa3, 0x74, 0xbf, 0x63, 0xaf, 0xc3, 0xe5, 0xe4, 0x15, 0x34, 0xb9, 0xa4, 0xc9, 0x65, 0x6e, 0x6a,
		0xc8, 0x99, 0x3a, 0x72, 0xa2, 0x96, 0x64, 0xd5, 0x93, 0xb0, 0x9a, 0xb2, 0x17, 0x25, 0x98, 0xdb,
		0xef, 0xdd, 0x20, 0x4c, 0x4f, 0x2c, 0xf6, 0xb8, 0x3c, 0xa4, 0xc7, 0xe5, 0xe4, 0x83, 0xd3, 0xe3,
		0x52, 0xfd, 0x3d, 0xf4, 0xb8, 0x2c, 0xec, 0xd2, 0xd7, 0x0e, 0x69, 0x69, 0xe9, 0x7c, 0xd4, 0xbb,
		0x2d, 0xe8, 0x19, 0xdf, 0x27, 0xde, 0xa4, 0x61, 0x9b, 0xa9, 0x7b, 0x6f, 0x00, 0xa9, 0x41, 0x6a,
		0x90, 0x1a, 0xa4, 0x06, 0xa9, 0x41, 0x6a, 0x90, 0x1a, 0xa4, 0x06, 0xa9, 0x41, 0xea, 0x4d, 0x45,
		0xea, 0x76, 0xa7, 0x95, 0x54, 0xd3, 0x86, 0x5d, 0xaa, 0x1e, 0xbd, 0x04, 0xb0, 0x06, 0xac, 0x01,
		0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x0b, 0x03, 0xd6,
		0x85, 0xca, 0x49, 0x11, 0x4e, 0xfa, 0x9d, 0x20, 0xbf, 0xf3, 0xe4, 0xdf, 0x49, 0xaa, 0xab, 0x48,
		0x2e, 0xb0, 0xdc, 0x72, 0x49, 0xdc, 0xde, 0x49, 0x52, 0x2f, 0xf5, 0xe5, 0x33, 0x06, 0x07, 0xc3,
		0x16, 0x3c, 0x61, 0xb0, 0x46, 0xc2, 0x60, 0x89, 0xbc, 0x1f, 0x12, 0x06, 0x49, 0x18, 0x24, 0x61,
		0x90, 0x20, 0x0c, 0x41, 0x18, 0x82, 0x30, 0x04, 0x61, 0x08, 0xc2, 0x10, 0x84, 0x21, 0x08, 0x43,
		0x10, 0x86, 0x20, 0x4c, 0xc1, 0x82, 0x30, 0x24, 0x0c, 0x82, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52,
		0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x20, 0x75, 0x91, 0x90, 0x9a, 0x84, 0x41,
		0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x7a,
		0x3b, 0xc1, 0x9a, 0x84, 0x41, 0xdb, 0x09, 0x83, 0x83, 0x3c, 0x38, 0xaa, 0xc0, 0x6e, 0x44, 0x15,
		0x58, 0xb1, 0x9a, 0xa7, 0x83, 0xcf, 0x9f, 0xc6, 0xdd, 0x46, 0x1a, 0x0e, 0xa1, 0xee, 0xf7, 0x28,
		0xa9, 0xdf, 0x8c, 0x3e, 0xc0, 0x55, 0xff, 0xb3, 0x4d, 0xfe, 0x5c, 0xbf, 0x0c, 0xfd, 0x6b, 0x2f,
		0xf5, 0x6f, 0xbf, 0x46, 0x67, 0xbd, 0x4f, 0x53, 0x3f, 0x1b, 0x7c, 0x9a, 0xd3, 0xc1, 0x87, 0x29,
		0x61, 0x69, 0x5a, 0xff, 0x5b, 0xc3, 0xf7, 0x9b, 0xe2, 0x95, 0x69, 0x67, 0x87, 0xa5, 0x30, 0xad,
		0x3b, 0xdf, 0x99, 0xc2, 0xb4, 0x14, 0xa6, 0x5d, 0x3e, 0x10, 0x85, 0x69, 0x0b, 0x1a, 0x4c, 0x23,
		0xcf, 0xdc, 0x7d, 0xb0, 0x8c, 0x3c, 0x73, 0xfd, 0x01, 0x9b, 0x71, 0x64, 0x31, 0x1d, 0xa6, 0x3f,
		0x3a, 0x11, 0x7b, 0x22, 0xf6, 0xb9, 0x29, 0x1f, 0x67, 0x4a, 0xc8, 0x89, 0x32, 0xb2, 0x13, 0x52,
		0x29, 0x5f, 0xc4, 0xfe, 0x3e, 0x8a, 0x5a, 0xbe, 0x17, 0x5a, 0x8c, 0xd9, 0xef, 0xef, 0x6f, 0x4b,
		0x3e, 0x24, 0x97, 0x8c, 0x30, 0x03, 0x98, 0x01, 0xcc, 0x00, 0x07, 0xb7, 0x73, 0xca, 0x85, 0x83,
		0xdb, 0xa9, 0x0f, 0xce, 0xc1, 0xad, 0xfa, 0x7b, 0x38, 0xb8, 0x2d, 0xec, 0xd2, 0x73, 0x70, 0x9b,
		0xc3, 0xa8, 0x5c, 0x32, 0x12, 0x63, 0x6a, 0x2e, 0x19, 0x81, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52,
		0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x9b, 0x8c, 0xd4, 0x5c, 0x32, 0x02, 0xac,
		0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0xb7, 0x13,
		0xac, 0xb9, 0x64, 0x24, 0x7e, 0x19, 0x65, 0xe6, 0x9a, 0x03, 0x45, 0xc9, 0x33, 0xbb, 0x4c, 0x14,
		0x25, 0x2f, 0xa8, 0x33, 0x44, 0xb2, 0x78, 0x2e, 0xce, 0x0e, 0xc9, 0xe2, 0x06, 0x42, 0x40, 0xb2,
		0x38, 0x91, 0x17, 0x22, 0x2f, 0x44, 0x5e, 0xa4, 0xf7, 0x3b, 0xc9, 0xe2, 0x32, 0x44, 0x4e, 0xb2,
		0x38, 0x66, 0x00, 0x33, 0x80, 0x19, 0x28, 0xa9, 0x19, 0x20, 0x00, 0xff, 0xfc, 0x17, 0x01, 0xf8,
		0x4c, 0xaf, 0x21, 0x00, 0xaf, 0xb6, 0xf4, 0x04, 0xe0, 0x0b, 0xbe, 0xf8, 0x04, 0xe0, 0x8b, 0x05,
		0xd5, 0x24, 0x8b, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d,
		0x52, 0x83, 0xd4, 0x20, 0xb5, 0x09, 0x52, 0x93, 0x2c, 0x0e, 0x58, 0x03, 0xd6, 0x80, 0x35, 0x60,
		0x0d, 0x58, 0x03, 0xd6, 0x80, 0x35, 0x60, 0x0d, 0x58, 0x6f, 0x27, 0x58, 0x93, 0x2c, 0x6e, 0x39,
		0x59, 0x9c, 0x86, 0x14, 0xb6, 0x96, 0x37, 0xcf, 0x65, 0xcd, 0xbb, 0x1f, 0xc5, 0x79, 0xff, 0xc3,
		0x94, 0xb7, 0x1d, 0x85, 0xcc, 0x85, 0x03, 0xd1, 0x8b, 0x06, 0xe2, 0xed, 0x27, 0x6a, 0xb4, 0x9f,
		0x28, 0x80, 0x23, 0x4c, 0xfb, 0x89, 0xec, 0xdf, 0x48, 0xac, 0xfd, 0xc4, 0x7d, 0x43, 0xfe, 0x32,
		0xd1, 0x7d, 0x43, 0xf8, 0x26, 0xd1, 0x1e, 0x6d, 0x27, 0x0a, 0x1c, 0x21, 0xe3, 0x26, 0x51, 0x89,
		0xc0, 0x5d, 0x3c, 0xe2, 0x35, 0x13, 0xe9, 0x7a, 0x5d, 0x93, 0xdc, 0xaf, 0x43, 0xe9, 0x3f, 0x16,
		0x1c, 0xd2, 0x4e, 0x68, 0xcb, 0x42, 0xfc, 0xd0, 0x66, 0x28, 0xcb, 0x72, 0x1c, 0xc3, 0x76, 0xe8,
		0xca, 0x45, 0xd4, 0xc2, 0x42, 0xa8, 0xca, 0x6a, 0x88, 0xca, 0xd5, 0x92, 0x1e, 0xd4, 0xde, 0x1c,
		0xbc, 0x39, 0x3a, 0xae, 0xbd, 0x39, 0x2c, 0xf1, 0xda, 0x16, 0x34, 0xc2, 0x73, 0xb7, 0x41, 0xd7,
		0xd4, 0x1b, 0x82, 0x17, 0x56, 0x27, 0x2d, 0xcd, 0x82, 0x18, 0xb0, 0x04, 0x2c, 0x01, 0xcb, 0xed,
		0x03, 0xcb, 0xa3, 0x03, 0x0b, 0x60, 0x79, 0x02, 0x58, 0x02, 0x96, 0x80, 0x65, 0x21, 0x96, 0x74,
		0xff, 0xe4, 0xe0, 0xe0, 0xe8, 0xf8, 0xe0, 0x60, 0xef, 0xf8, 0xf5, 0xf1, 0xde, 0x9b, 0xc3, 0xc3,
		0xfd, 0xa3, 0x7d, 0x10, 0x13, 0xc4, 0x5c, 0x8d, 0x98, 0xd5, 0x4e, 0x23, 0xb5, 0x82, 0x99, 0xfd,
		0x81, 0x41, 0x4d, 0x50, 0x13, 0xd4, 0xdc, 0x2a, 0xd4, 0xec, 0xf8, 0x71, 0xc3, 0x0f, 0x53, 0xef,
		0xd1, 0xb7, 0x80, 0x9b, 0x87, 0xe0, 0x26, 0xb8, 0x09, 0x6e, 0x16, 0x03, 0x37, 0xf7, 0xf6, 0xa0,
		0x4b, 0xe8, 0x72, 0x2d, 0x5d, 0x56, 0x63, 0xbf, 0xed, 0x05, 0x61, 0x10, 0x3e, 0x5a, 0xe3, 0xcc,
		0xa9, 0x57, 0x40, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71,
		0x42, 0x9c, 0x5b, 0x44, 0x9c, 0x6d, 0xef, 0x5b, 0xf5, 0x9f, 0xae, 0xdf, 0xf5, 0xab, 0x4d, 0xbf,
		0x93, 0x7e, 0xaa, 0xde, 0x3f, 0xa5, 0x7e, 0x22, 0x4f, 0x9d, 0x8b, 0x5f, 0x03, 0x79, 0x42, 0x9e,
		0x90, 0xe7, 0x56, 0x91, 0x27, 0xf9, 0x9a, 0x50, 0x27, 0xd4, 0xb9, 0xe1, 0xd4, 0x49, 0xbe, 0x26,
		0xf0, 0xa9, 0x03, 0x9f, 0x1d, 0xaf, 0xf1, 0xd9, 0x4f, 0x1d, 0xe0, 0xe7, 0xe8, 0x45, 0x00, 0x28,
		0x00, 0x0a, 0x80, 0x02, 0xa0, 0x00, 0x28, 0x00, 0x0a, 0x80, 0x02, 0xa0, 0x00, 0xe8, 0x96, 0x03,
		0xe8, 0xe0, 0x5c, 0xcc, 0x01, 0x80, 0x0e, 0x5f, 0x04, 0x80, 0x02, 0xa0, 0x00, 0xe8, 0x56, 0x01,
		0x28, 0x67, 0xef, 0x40, 0x28, 0x10, 0xba, 0x05, 0x10, 0xca, 0xd9, 0x3b, 0xf4, 0xb9, 0x72, 0x19,
		0x7b, 0x40, 0x18, 0x84, 0x8f, 0xd5, 0x7b, 0xff, 0x93, 0xf7, 0x25, 0x88, 0x2c, 0xdc, 0x5d, 0x9f,
		0x7b, 0x03, 0xbc, 0x09, 0x6f, 0xc2, 0x9b, 0x5b, 0xc5, 0x9b, 0x03, 0xb7, 0x53, 0x58, 0x03, 0x4c,
		0x6b, 0x81, 0xfd, 0x03, 0xc1, 0x31, 0xcf, 0xc3, 0x6e, 0xbb, 0x37, 0x0f, 0xdf, 0xa9, 0x88, 0x5a,
		0xfa, 0x8a, 0xa8, 0x02, 0xa5, 0x6d, 0x0d, 0xaa, 0x8f, 0xee, 0x38, 0x5c, 0x30, 0xa9, 0x85, 0x72,
		0xbb, 0x40, 0x15, 0xa3, 0x02, 0xad, 0xda, 0xc5, 0x69, 0xf5, 0x76, 0x84, 0xfa, 0x7a, 0x6a, 0xac,
		0x65, 0x25, 0xea, 0xa6, 0x9d, 0xae, 0x7e, 0xfc, 0x6f, 0x02, 0x09, 0x83, 0x71, 0x34, 0x77, 0x93,
		0x59, 0xa5, 0x59, 0x63, 0x9c, 0x92, 0xc0, 0x27, 0x39, 0x5c, 0x92, 0xc2, 0x23, 0x71, 0x1c, 0x12,
		0xc7, 0x1f, 0x51, 0xdc, 0x71, 0xab, 0xff, 0x4c, 0x2b, 0xc3, 0x56, 0x1a, 0xa3, 0x3d, 0x2b, 0x54,
		0xf1, 0x79, 0x38, 0x5e, 0xc1, 0x4a, 0x3e, 0xef, 0x51, 0xf2, 0xb9, 0x00, 0xfe, 0x0b, 0x25, 0x9f,
		0xdd, 0x09, 0xf6, 0x44, 0xc0, 0x3f, 0x05, 0xad, 0x66, 0x75, 0x8c, 0x23, 0x16, 0x2e, 0xb6, 0x3e,
		0x7b, 0x01, 0xa1, 0x0e, 0x42, 0x1d, 0x84, 0x3a, 0xb6, 0x2a, 0xd4, 0xd1, 0xf2, 0xbd, 0x87, 0xd8,
		0x7f, 0xb0, 0x11, 0xe3, 0x90, 0xcc, 0xee, 0xba, 0x1a, 0xba, 0x77, 0xaf, 0x5e, 0xed, 0xce, 0xff,
		0x93, 0xc5, 0xbf, 0x1b, 0xc0, 0xcd, 0x6e, 0xdf, 0xfb, 0xda, 0xa0, 0x78, 0xf8, 0xc0, 0x69, 0xaa,
		0x3e, 0x7c, 0x6d, 0x56, 0x1f, 0xe3, 0xa8, 0xdb, 0x91, 0xb7, 0x11, 0x73, 0x6f, 0xc0, 0x48, 0x60,
		0x24, 0x30, 0x12, 0x18, 0x89, 0x92, 0x19, 0x89, 0x87, 0x28, 0xfe, 0xea, 0xc5, 0xcd, 0x20, 0x7c,
		0x1c, 0xe8, 0xb1, 0x64, 0xee, 0x6f, 0x36, 0xdc, 0x46, 0xa4, 0x92, 0xdb, 0xe3, 0xb9, 0x79, 0xe8,
		0x0f, 0x8e, 0x65, 0xc0, 0x32, 0x60, 0x19, 0xb6, 0xca, 0x32, 0xf8, 0x61, 0xb7, 0xed, 0xc7, 0x9e,
		0x50, 0xff, 0xbe, 0x39, 0xeb, 0xc0, 0x31, 0xa9, 0xad, 0x20, 0x55, 0x99, 0x8e, 0x49, 0xfb, 0x26,
		0x66, 0x68, 0x9d, 0xe9, 0xcc, 0x48, 0x67, 0x46, 0xe7, 0xc6, 0x94, 0x30, 0x3d, 0x61, 0xfa, 0xe5,
		0x03, 0x11, 0xa6, 0x87, 0xb3, 0xe1, 0x6c, 0x38, 0x9b, 0x08, 0x0c, 0x61, 0xfa, 0xd5, 0x21, 0x18,
		0xc2, 0xf4, 0x18, 0x09, 0x8c, 0x04, 0x46, 0x02, 0x23, 0x41, 0x98, 0x7e, 0x99, 0x8d, 0x20, 0x4c,
		0x8f, 0x65, 0xc0, 0x32, 0x60, 0x19, 0x44, 0xf7, 0x2b, 0x61, 0xfa, 0x92, 0x06, 0xa9, 0xca, 0x17,
		0xa6, 0xe7, 0x06, 0x53, 0xf1, 0x16, 0xc5, 0xd9, 0xad, 0xa5, 0xc1, 0xdb, 0x0a, 0x7c, 0x59, 0x29,
		0xf1, 0xff, 0xe9, 0xfa, 0xa1, 0x81, 0xa1, 0x9d, 0x9c, 0xc2, 0x8c, 0x46, 0x32, 0xbb, 0xb0, 0xb4,
		0xc7, 0x85, 0x25, 0x2e, 0x2c, 0x95, 0x43, 0xdd, 0x19, 0xe3, 0x89, 0xa0, 0xa3, 0x2a, 0xe1, 0x98,
		0x4e, 0x3b, 0xa2, 0x43, 0x9f, 0x72, 0x2c, 0xd4, 0x45, 0x56, 0x61, 0x46, 0xa7, 0xc9, 0x22, 0xa7,
		0xc8, 0x62, 0xb7, 0x2d, 0x6b, 0x28, 0x2f, 0x94, 0x97, 0x13, 0xe5, 0x65, 0x7c, 0xdb, 0xb2, 0x13,
		0x07, 0x51, 0x1c, 0xa4, 0x4f, 0x72, 0x79, 0x1c, 0xe3, 0x11, 0x65, 0x52, 0x39, 0xf6, 0xb8, 0x71,
		0x99, 0x43, 0xa0, 0x85, 0x54, 0x8e, 0x02, 0x78, 0xc9, 0x62, 0x81, 0x13, 0x4b, 0x01, 0x13, 0xc9,
		0x40, 0x89, 0x50, 0x80, 0x24, 0xa7, 0x4c, 0x38, 0x53, 0xf7, 0x4b, 0xda, 0x0d, 0x43, 0x89, 0xa2,
		0x44, 0x51, 0xa2, 0x96, 0x94, 0xa8, 0x58, 0xdf, 0x00, 0xc1, 0x7e, 0x01, 0xc2, 0x25, 0x5a, 0x05,
		0x63, 0xf5, 0x36, 0x4a, 0xb2, 0x5a, 0xaa, 0xdb, 0x69, 0xab, 0x04, 0xab, 0xcd, 0x2a, 0x9d, 0x82,
		0x25, 0x57, 0xad, 0x94, 0x5a, 0xb5, 0xbd, 0x54, 0xb6, 0xea, 0xfb, 0x5b, 0x5d, 0xb3, 0x82, 0x9c,
		0x01, 0xdd, 0x95, 0x10, 0xb5, 0x44, 0xf2, 0x08, 0xc6, 0xaa, 0x5c, 0x20, 0x71, 0x00, 0xc4, 0x02,
		0xb1, 0x40, 0x2c, 0x61, 0xc4, 0x0a, 0x9a, 0x7e, 0x98, 0x06, 0xe9, 0x93, 0x4c, 0xda, 0xd7, 0xd8,
		0x4f, 0x15, 0xb0, 0x11, 0x95, 0x8b, 0xe1, 0x47, 0x7b, 0xeb, 0x25, 0x16, 0x12, 0x9a, 0x7e, 0xbf,
		0xbc, 0xa9, 0xdf, 0x9c, 0xfd, 0x7a, 0xfe, 0xee, 0x8f, 0xf7, 0xe7, 0xd7, 0xf5, 0xdb, 0x7f, 0x5d,
		0x9d, 0x4b, 0xed, 0xe7, 0xbe, 0xc1, 0x4c, 0x44, 0x8b, 0xf8, 0x0b, 0x93, 0xc2, 0x68, 0x0e, 0x2e,
		0x3f, 0x9e, 0xd7, 0xaf, 0x4f, 0x6f, 0xcf, 0xeb, 0xb7, 0x7f, 0x5d, 0xd6, 0xcf, 0x2e, 0xdf, 0x5f,
		0x5e, 0x57, 0x8a, 0x88, 0x4b, 0x96, 0xbe, 0x7d, 0xef, 0x4b, 0x0f, 0xbe, 0xfd, 0xaf, 0xd7, 0xe7,
		0xe7, 0xe2, 0xdf, 0x5f, 0x64, 0xa4, 0xbb, 0xbc, 0x15, 0x16, 0x99, 0x14, 0x52, 0x99, 0x14, 0x06,
		0x79, 0x2d, 0x6e, 0xce, 0x05, 0xd3, 0xaf, 0xd1, 0xb0, 0x58, 0xed, 0xa7, 0xd8, 0xf7, 0x87, 0xe5,
		0x6a, 0x8d, 0x8f, 0x09, 0x17, 0x8e, 0x4a, 0x8d, 0x56, 0x4e, 0x0d, 0x73, 0x02, 0x39, 0x6a, 0xb4,
		0x52, 0xa3, 0x15, 0x4f, 0x0c, 0x4f, 0xac, 0x28, 0x97, 0xbf, 0xef, 0x1b, 0xf2, 0xbe, 0xcd, 0x7d,
		0x83, 0x3b, 0x1a, 0x05, 0x52, 0x00, 0xb6, 0x14, 0x81, 0x75, 0x85, 0x60, 0x5d, 0x31, 0x58, 0x55,
		0x10, 0xb2, 0x9e, 0x18, 0x5d, 0xb6, 0x45, 0x86, 0xa4, 0xc1, 0x21, 0x0d, 0x0e, 0x1d, 0x87, 0x8f,
		0x26, 0x4b, 0x4a, 0x97, 0xed, 0x62, 0xac, 0x2d, 0x7d, 0x0e, 0x6d, 0xef, 0xfd, 0xca, 0xbd, 0x85,
		0x90, 0xf9, 0x3d, 0x57, 0x7f, 0xc1, 0x4a, 0xb0, 0x12, 0xac, 0x04, 0x2b, 0xc1, 0x4a, 0xb0, 0x12,
		0xac, 0x04, 0x2b, 0xb7, 0x0d, 0x2b, 0x1b, 0x81, 0x8d, 0xf2, 0x94, 0x01, 0x25, 0x29, 0x01, 0x4b,
		0xc0, 0x72, 0x0b, 0xc1, 0xf2, 0xe8, 0xc0, 0x02, 0x58, 0x9e, 0x00, 0x96, 0x80, 0x25, 0x60, 0x59,
		0x88, 0x25, 0xdd, 0x3f, 0x39, 0x38, 0x38, 0x3a, 0x3e, 0x38, 0xd8, 0x3b, 0x7e, 0x7d, 0xbc, 0xf7,
		0xe6, 0xf0, 0x70, 0xff, 0x68, 0x1f, 0xc4, 0x04, 0x31, 0x57, 0x23, 0x66, 0xb5, 0xd3, 0x48, 0xad,
		0x60, 0x66, 0x7f, 0x60, 0x50, 0x13, 0xd4, 0x04, 0x35, 0xb7, 0x0a, 0x35, 0x3b, 0x7e, 0xdc, 0xf0,
		0xc3, 0xd4, 0x7b, 0xf4, 0x2d, 0xe0, 0xe6, 0x21, 0xb8, 0x09, 0x6e, 0x82, 0x9b, 0xc5, 0xc0, 0xcd,
		0xbd, 0x3d, 0xe8, 0x12, 0xba, 0x5c, 0x4b, 0x97, 0xd5, 0xd8, 0x6f, 0x7b, 0x41, 0x18, 0x84, 0x8f,
		0xd6, 0x38, 0x73, 0xea, 0x15, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09,
		0x71, 0x42, 0x9c, 0x10, 0xe7, 0x16, 0x11, 0x67, 0xc7, 0xc6, 0x91, 0x79, 0x87, 0x23, 0x73, 0xa8,
		0x12, 0xaa, 0xdc, 0x36, 0xaa, 0xe4, 0xc8, 0x1c, 0xa2, 0x84, 0x28, 0x37, 0x9d, 0x28, 0x39, 0x32,
		0x07, 0x31, 0x55, 0x11, 0xd3, 0xce, 0x91, 0x79, 0x87, 0x23, 0x73, 0x50, 0x13, 0xd4, 0xdc, 0x46,
		0xd4, 0x24, 0x80, 0x09, 0x6e, 0x82, 0x9b, 0xdb, 0x80, 0x9b, 0x04, 0x30, 0xa1, 0xcb, 0x0c, 0x74,
		0x69, 0xf3, 0xc8, 0xbc, 0xc3, 0x91, 0x39, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09,
		0x71, 0x42, 0x9c, 0x10, 0x67, 0x69, 0x89, 0x93, 0x76, 0xf7, 0xd9, 0xea, 0x81, 0x2f, 0x2a, 0x8c,
		0x3d, 0x6c, 0x23, 0x5c, 0x29, 0x61, 0xbb, 0x98, 0xde, 0x27, 0x8f, 0xe2, 0x76, 0x75, 0x20, 0x80,
		0xb2, 0x05, 0x8b, 0xa7, 0xc6, 0xa5, 0x70, 0xb1, 0x3b, 0xee, 0xa7, 0x70, 0x31, 0x85, 0x8b, 0x57,
		0x0b, 0x7c, 0x60, 0x23, 0x7d, 0x5e, 0xa2, 0x42, 0xb9, 0xb0, 0xc0, 0x13, 0x00, 0x20, 0x00, 0x40,
		0x00, 0x40, 0x56, 0x81, 0x4c, 0x18, 0xcb, 0x4f, 0xab, 0xcd, 0x28, 0xdd, 0xef, 0xc8, 0xef, 0xab,
		0x49, 0x93, 0xdf, 0xd1, 0x2b, 0x5e, 0x96, 0xa2, 0xe7, 0xa2, 0xb4, 0x9a, 0xb1, 0xa9, 0x6e, 0xec,
		0xab, 0x1d, 0xdb, 0xea, 0xc7, 0x99, 0x1a, 0x72, 0xa6, 0x8e, 0x9c, 0xa8, 0x25, 0x4b, 0x1e, 0xb1,
		0xf0, 0x8e, 0x17, 0x8f, 0x57, 0xce, 0xed, 0xf7, 0x6e, 0x10, 0xa6, 0x27, 0x36, 0xb6, 0xbb, 0x7c,
		0xe8, 0x72, 0x3c, 0xb4, 0x9d, 0x10, 0xe6, 0xe8, 0x97, 0x1d, 0xf1, 0x7c, 0x61, 0x3b, 0xa4, 0xe9,
		0x28, 0x0e, 0x36, 0x17, 0x0f, 0xb3, 0xfd, 0x1e, 0x07, 0x51, 0x31, 0x4b, 0xd2, 0x3b, 0xbb, 0xf4,
		0x16, 0x43, 0x9f, 0x79, 0x2d, 0x7d, 0xed, 0xf0, 0x70, 0x83, 0x16, 0x7f, 0xa7, 0x1c, 0xa3, 0xde,
		0x15, 0x34, 0x84, 0x2b, 0xd9, 0x61, 0xbc, 0x4f, 0xbc, 0x49, 0xc3, 0x36, 0x53, 0xf7, 0xde, 0x00,
		0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83,
		0xd4, 0x9b, 0x8a, 0xd4, 0xed, 0x4e, 0x2b, 0xa9, 0xa6, 0x0d, 0xbb, 0x54, 0x3d, 0x7a, 0x09, 0x60,
		0x0d, 0x58, 0x03, 0xd6, 0x80, 0x35, 0x60, 0x0d, 0x58, 0x03, 0xd6, 0x80, 0x35, 0x60, 0x0d, 0x58,
		0x17, 0x06, 0xac, 0x0b, 0x95, 0x93, 0x22, 0x9c, 0xf6, 0x3b, 0x41, 0xfe, 0x1c, 0xd2, 0x7f, 0x27,
		0xc9, 0xae, 0x22, 0xd9, 0xc0, 0x72, 0x0b, 0x26, 0x71, 0x97, 0x30, 0x49, 0xbd, 0xd4, 0x42, 0x67,
		0xda, 0xc1, 0xb0, 0x05, 0x4f, 0x19, 0xac, 0x91, 0x32, 0x58, 0x22, 0xff, 0x87, 0x94, 0x41, 0x52,
		0x06, 0x49, 0x19, 0x24, 0x0c, 0x43, 0x18, 0x86, 0x30, 0x0c, 0x61, 0x18, 0xc2, 0x30, 0x84, 0x61,
		0x08, 0xc3, 0x10, 0x86, 0x21, 0x0c, 0x53, 0xb0, 0x30, 0x0c, 0x29, 0x83, 0x20, 0x35, 0x48, 0x0d,
		0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x5d, 0x24, 0xa4,
		0x26, 0x65, 0x10, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0,
		0x1a, 0xb0, 0xde, 0x4e, 0xb0, 0x26, 0x65, 0xd0, 0x7e, 0xca, 0xe0, 0x20, 0x13, 0x8e, 0x5a, 0xb0,
		0x1b, 0x52, 0x0b, 0x56, 0xac, 0xf2, 0xe9, 0xe0, 0x1b, 0xa4, 0x71, 0xb7, 0x91, 0x86, 0x43, 0xb0,
		0xfb, 0x3d, 0x4a, 0xea, 0x37, 0xa3, 0x8f, 0x70, 0xd5, 0xff, 0x74, 0x93, 0x3f, 0xd7, 0x6f, 0xbf,
		0x46, 0xd7, 0x5e, 0xea, 0xdf, 0xf6, 0x3e, 0xd0, 0x59, 0xef, 0xf3, 0xd4, 0xcf, 0x06, 0x9f, 0xe7,
		0x74, 0xf0, 0x71, 0x4a, 0x58, 0xa2, 0xd6, 0xff, 0xd6, 0xf0, 0xfd, 0xa6, 0x78, 0x85, 0xda, 0xd9,
		0x61, 0x29, 0x50, 0xeb, 0xce, 0x83, 0xa6, 0x40, 0x2d, 0x05, 0x6a, 0x97, 0x0f, 0x44, 0x81, 0xda,
		0x82, 0x86, 0xd4, 0xc8, 0x36, 0x77, 0x1f, 0x32, 0x23, 0xdb, 0x5c, 0x7f, 0xc0, 0x66, 0x1c, 0x59,
		0x4c, 0x8a, 0xe9, 0x8f, 0x4e, 0xdc, 0x9e, 0xb8, 0x7d, 0x6e, 0xca, 0xc7, 0x99, 0x12, 0x72, 0xa2,
		0x8c, 0xec, 0x04, 0x56, 0xca, 0x17, 0xb7, 0xbf, 0x8f, 0xa2, 0x96, 0xef, 0x85, 0x16, 0x23, 0xf7,
		0xfb, 0xfb, 0xdb, 0x92, 0x15, 0xc9, 0x55, 0x23, 0xcc, 0x00, 0x66, 0x00, 0x33, 0xc0, 0xf1, 0xed,
		0x9c, 0x72, 0xe1, 0xf8, 0x76, 0xea, 0x83, 0x73, 0x7c, 0xab, 0xfe, 0x1e, 0x8e, 0x6f, 0x0b, 0xbb,
		0xf4, 0x1c, 0xdf, 0xe6, 0x30, 0x2a, 0x57, 0x8d, 0xc4, 0x98, 0x9a, 0xab, 0x46, 0x20, 0x35, 0x48,
		0x0d, 0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x20, 0xf5, 0x26, 0x23, 0x35,
		0x57, 0x8d, 0x00, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac,
		0x01, 0xeb, 0xed, 0x04, 0x6b, 0xae, 0x1a, 0x59, 0xb8, 0x90, 0x32, 0x73, 0xd1, 0x81, 0xe2, 0xe4,
		0x99, 0x9d, 0x26, 0x8a, 0x93, 0x17, 0xd4, 0x1d, 0x22, 0x5d, 0x3c, 0x17, 0x77, 0x87, 0x74, 0x71,
		0x03, 0x21, 0x20, 0x5d, 0x9c, 0xd8, 0x0b, 0xb1, 0x17, 0x62, 0x2f, 0xd2, 0xfb, 0x9d, 0x74, 0x71,
		0x19, 0x26, 0x27, 0x5d, 0x1c, 0x33, 0x80, 0x19, 0xc0, 0x0c, 0x94, 0xd4, 0x0c, 0x10, 0x82, 0x7f,
		0xfe, 0x8b, 0x10, 0x7c, 0xa6, 0xd7, 0x10, 0x82, 0x57, 0x5b, 0x7a, 0x42, 0xf0, 0x05, 0x5f, 0x7c,
		0x42, 0xf0, 0xc5, 0x82, 0x6a, 0xd2, 0xc5, 0x41, 0x6a, 0x90, 0x1a, 0xa4, 0x06, 0xa9, 0x41, 0x6a,
		0x90, 0x1a, 0xa4, 0x06, 0xa9, 0x41, 0x6a, 0x90, 0xda, 0x04, 0xa9, 0x49, 0x17, 0x07, 0xac, 0x01,
		0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x01, 0x6b, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0xb7, 0x13, 0xac,
		0x49, 0x17, 0xb7, 0x9e, 0x2e, 0x4e, 0x63, 0x0a, 0x5b, 0x0b, 0x9c, 0xef, 0xc2, 0xe6, 0xdf, 0x97,
		0xe2, 0xbc, 0xff, 0x71, 0xca, 0xdb, 0x96, 0x42, 0xe6, 0xda, 0x81, 0xe8, 0x75, 0x03, 0xf1, 0x36,
		0x14, 0x35, 0xda, 0x50, 0x14, 0xc0, 0x1d, 0xa6, 0x0d, 0x45, 0xf6, 0x6f, 0x24, 0xd6, 0x86, 0xe2,
		0xbe, 0x21, 0x7f, 0xa5, 0xe8, 0xbe, 0x21, 0x7c, 0x9f, 0x68, 0x8f, 0xf6, 0x13, 0x05, 0x8e, 0x93,
		0x71, 0x9f, 0xa8, 0x44, 0xf8, 0x2e, 0x1e, 0xf7, 0x9a, 0x89, 0x77, 0xbd, 0xae, 0x49, 0xee, 0xd7,
		0xa1, 0xf4, 0x1f, 0x0b, 0x0e, 0x69, 0x27, 0xc0, 0x65, 0x21, 0x8a, 0x68, 0x33, 0xa0, 0x65, 0x39,
		0x9a, 0x61, 0x3b, 0x80, 0xe5, 0x22, 0x76, 0x61, 0x21, 0x60, 0x65, 0x35, 0x50, 0xe5, 0x6a, 0x49,
		0x0f, 0x6a, 0x6f, 0x0e, 0xde, 0x1c, 0x1d, 0xd7, 0xde, 0x1c, 0x96, 0x78, 0x6d, 0x0b, 0x1a, 0xe7,
		0xb9, 0xdb, 0xa0, 0xcb, 0xea, 0xf7, 0x16, 0x6e, 0xaa, 0xdf, 0xfb, 0x60, 0x25, 0x58, 0x09, 0x56,
		0x82, 0x95, 0x60, 0x25, 0x58, 0x09, 0x56, 0x82, 0x95, 0x60, 0xe5, 0x96, 0x61, 0x65, 0x43, 0xb0,
		0x1a, 0xca, 0xa4, 0x63, 0x6e, 0x10, 0x03, 0x96, 0x80, 0x25, 0x60, 0xb9, 0x7d, 0x60, 0x79, 0x74,
		0x60, 0x01, 0x2c, 0x4f, 0x00, 0x4b, 0xc0, 0x12, 0xb0, 0x2c, 0xc4, 0x92, 0xee, 0x9f, 0x1c, 0x1c,
		0x1c, 0x1d, 0x1f, 0x1c, 0xec, 0x1d, 0xbf, 0x3e, 0xde, 0x7b, 0x73, 0x78, 0xb8, 0x7f, 0xb4, 0x0f,
		0x62, 0x82, 0x98, 0xab, 0x11, 0xb3, 0xda, 0x69, 0xa4, 0x56, 0x30, 0xb3, 0x3f, 0x30, 0xa8, 0x09,
		0x6a, 0x82, 0x9a, 0x5b, 0x85, 0x9a, 0x1d, 0x3f, 0x6e, 0xf8, 0x61, 0xea, 0x3d, 0xfa, 0x16, 0x70,
		0xf3, 0x10, 0xdc, 0x04, 0x37, 0xc1, 0xcd, 0x62, 0xe0, 0xe6, 0xde, 0x1e, 0x74, 0x09, 0x5d, 0xae,
		0xa5, 0xcb, 0x6a, 0xec, 0xb7, 0xbd, 0x20, 0x0c, 0xc2, 0x47, 0x6b, 0x9c, 0x39, 0xf5, 0x0a, 0x88,
		0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x73, 0x8b,
		0x88, 0xb3, 0x63, 0xe3, 0xc8, 0xbc, 0xc3, 0x91, 0x39, 0x54, 0x09, 0x55, 0x6e, 0x1b, 0x55, 0x72,
		0x64, 0x0e, 0x51, 0x42, 0x94, 0x9b, 0x4e, 0x94, 0x1c, 0x99, 0x83, 0x98, 0xaa, 0x88, 0x69, 0xe7,
		0xc8, 0xbc, 0xc3, 0x91, 0x39, 0xa8, 0x09, 0x6a, 0x6e, 0x23, 0x6a, 0x12, 0xc0, 0x04, 0x37, 0xc1,
		0xcd, 0x6d, 0xc0, 0x4d, 0x02, 0x98, 0xd0, 0x65, 0x06, 0xba, 0xb4, 0x79, 0x64, 0xde, 0xe1, 0xc8,
		0x1c, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0xb3, 0xb4,
		0xc4, 0x49, 0xed, 0x64, 0x83, 0xda, 0xc9, 0x02, 0x65, 0xb0, 0xf3, 0xa9, 0x52, 0xfc, 0x25, 0x88,
		0x5a, 0xbd, 0x2f, 0x33, 0xac, 0xfa, 0x2c, 0x56, 0xae, 0xf8, 0xd9, 0xb8, 0x05, 0xab, 0x5b, 0xbc,
		0x47, 0xdd, 0xe2, 0x02, 0x60, 0x3e, 0x75, 0x8b, 0xb3, 0x7f, 0x23, 0xb1, 0xba, 0xc5, 0x8d, 0x91,
		0x0c, 0x48, 0x67, 0xcf, 0x0f, 0xc6, 0x95, 0xf5, 0xff, 0xf7, 0xf1, 0xff, 0xf1, 0xff, 0xf1, 0xff,
		0x25, 0xbe, 0xe9, 0x3b, 0xc1, 0x74, 0xc6, 0xfe, 0x80, 0xcd, 0x38, 0xb2, 0xd8, 0xb9, 0xbb, 0x3f,
		0x3a, 0xcd, 0x05, 0x69, 0x2e, 0x98, 0x9b, 0xf2, 0x71, 0xa6, 0x84, 0x9c, 0x28, 0x23, 0x4b, 0x6e,
		0x70, 0xe9, 0x9a, 0x0b, 0xde, 0x47, 0x51, 0xcb, 0xf7, 0x42, 0x8b, 0xed, 0x05, 0xf7, 0xf7, 0xb7,
		0xa4, 0xcf, 0x6c, 0x33, 0x4a, 0xf7, 0x3b, 0x76, 0xbb, 0xcc, 0x0e, 0x5e, 0x81, 0x19, 0xc0, 0x0c,
		0x60, 0x06, 0x30, 0x03, 0x82, 0xfb, 0x9d, 0x1e, 0xb3, 0xcf, 0x7f, 0xd1, 0x63, 0x36, 0xd3, 0x6b,
		0xe8, 0x31, 0xab, 0xb6, 0xf4, 0xf4, 0x98, 0x2d, 0xf8, 0xe2, 0xd3, 0x63, 0xb6, 0x58, 0x50, 0x9d,
		0x34, 0x6c, 0x33, 0x75, 0xef, 0x0d, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x20, 0x35, 0x48,
		0x0d, 0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0xbd, 0xa9, 0x48, 0xdd, 0xee, 0xb4, 0x92, 0x6a, 0xda,
		0xb0, 0x4b, 0xd5, 0xa3, 0x97, 0x00, 0xd6, 0x80, 0x35, 0x60, 0x0d, 0x58, 0x03, 0xd6, 0x80, 0x35,
		0x60, 0x0d, 0x58, 0x03, 0xd6, 0x80, 0x75, 0x61, 0xc0, 0xba, 0x50, 0x09, 0x89, 0xc2, 0x57, 0x3e,
		0x26, 0xc8, 0xef, 0xf8, 0xea, 0xc7, 0xec, 0x4d, 0x87, 0xdd, 0x61, 0x1e, 0xf4, 0x06, 0xdd, 0x23,
		0x1f, 0xdc, 0x6d, 0x11, 0x4f, 0x18, 0x1f, 0x0c, 0x5b, 0xf0, 0x7c, 0xf1, 0x1a, 0xf9, 0xe2, 0x25,
		0xf2, 0x7f, 0xc8, 0x17, 0x27, 0x5f, 0x9c, 0xe0, 0x0b, 0xc1, 0x17, 0x82, 0x2f, 0x04, 0x5f, 0x84,
		0xf6, 0x3b, 0xf9, 0xe2, 0x32, 0x50, 0x4e, 0xbe, 0x38, 0x66, 0x00, 0x33, 0x80, 0x19, 0x28, 0xa9,
		0x19, 0x20, 0x06, 0xff, 0xfc, 0x17, 0x31, 0xf8, 0x4c, 0xaf, 0x21, 0x06, 0xaf, 0xb6, 0xf4, 0xc4,
		0xe0, 0x0b, 0xbe, 0xf8, 0xc4, 0xe0, 0x8b, 0x05, 0xd5, 0xe4, 0x8b, 0x83, 0xd4, 0x20, 0x35, 0x48,
		0x0d, 0x52, 0x83, 0xd4, 0x20, 0x35, 0x48, 0x0d, 0x52, 0x83, 0xd4, 0x20, 0xb5, 0x09, 0x52, 0x93,
		0x2f, 0x0e, 0x58, 0x03, 0xd6, 0x80, 0x35, 0x60, 0x0d, 0x58, 0x03, 0xd6, 0x80, 0x35, 0x60, 0x0d,
		0x58, 0x6f, 0x27, 0x58, 0x93, 0x2f, 0x6e, 0x3f, 0x5f, 0x5c, 0xa0, 0x73, 0x80, 0xdc, 0x7a, 0xd1,
		0x04, 0x42, 0x6e, 0x65, 0x2b, 0x22, 0xa9, 0xf7, 0x71, 0xb7, 0x91, 0x86, 0x43, 0xb0, 0xfb, 0x3d,
		0x4a, 0xea, 0x37, 0xa3, 0x8f, 0x70, 0xd5, 0xff, 0x74, 0x93, 0x3f, 0xd7, 0x6f, 0xbf, 0x46, 0xd7,
		0x5e, 0xea, 0xdf, 0xf6, 0x3e, 0xd0, 0x59, 0xef, 0xf3, 0xd4, 0xff, 0x1c, 0x7c, 0x9e, 0xd3, 0xc1,
		0xc7, 0xc9, 0xab, 0x39, 0xc5, 0x8e, 0xc3, 0xad, 0x24, 0xb5, 0x85, 0x5c, 0x6f, 0x1d, 0x83, 0xbd,
		0x62, 0xb6, 0x47, 0xf4, 0x76, 0x85, 0xfa, 0x9a, 0xaa, 0x3d, 0xa1, 0xb8, 0xfa, 0x3d, 0x3f, 0x79,
		0x10, 0x57, 0xf9, 0xa7, 0xeb, 0x87, 0x0d, 0xd5, 0x4b, 0x25, 0x95, 0xf7, 0x41, 0x92, 0x9e, 0xa6,
		0xa9, 0x5e, 0xbe, 0x7b, 0xcf, 0x03, 0x38, 0x6f, 0xf9, 0x3d, 0xa7, 0xb6, 0x47, 0x33, 0x61, 0xb7,
		0xd5, 0x7a, 0xb9, 0xa3, 0xc3, 0x92, 0xe6, 0x83, 0x5c, 0xc6, 0x4d, 0x3f, 0xf6, 0x9b, 0x6f, 0x9f,
		0x86, 0x43, 0x58, 0x9d, 0x73, 0x43, 0x49, 0xb3, 0x28, 0x61, 0x1a, 0xc2, 0xa4, 0x22, 0x44, 0x6a,
		0x22, 0x93, 0x7d, 0xe3, 0x67, 0xfb, 0xc9, 0x8c, 0xcb, 0xa4, 0xbb, 0x3c, 0xe2, 0xcb, 0x92, 0x6d,
		0xb6, 0xd6, 0x7f, 0xf7, 0x0c, 0xdf, 0x5b, 0xf1, 0xa2, 0x9a, 0xd6, 0x45, 0x34, 0xc5, 0x8b, 0x66,
		0xca, 0x17, 0xc9, 0x74, 0x02, 0xa2, 0xfa, 0x81, 0x4e, 0xdd, 0x00, 0xa6, 0x71, 0x60, 0xd2, 0x38,
		0xe0, 0x68, 0x14, 0x48, 0x94, 0x95, 0x34, 0xd5, 0x8b, 0x52, 0x95, 0xa1, 0x96, 0x51, 0x9c, 0xf2,
		0xd1, 0x22, 0xf7, 0x9f, 0x56, 0xb5, 0x8f, 0x5a, 0x41, 0x04, 0xed, 0xa8, 0xbf, 0x49, 0x54, 0xdf,
		0x3c, 0x6a, 0x6f, 0x1a, 0x95, 0x17, 0x8b, 0xba, 0x8b, 0x45, 0xd5, 0x45, 0xa2, 0xe6, 0x76, 0x09,
		0x4c, 0x3b, 0xaa, 0x3d, 0xa5, 0x85, 0x63, 0xbd, 0xfe, 0xd1, 0x63, 0x95, 0x7c, 0x82, 0x61, 0x5e,
		0x6f, 0x98, 0xb3, 0x47, 0x1b, 0x32, 0xd8, 0xe4, 0x1d, 0x83, 0x09, 0x19, 0x41, 0x7b, 0x06, 0x7d,
		0xa6, 0x06, 0xe8, 0x5a, 0x40, 0xae, 0x05, 0xe0, 0x6a, 0xc0, 0xbd, 0x6e, 0x3e, 0x14, 0x37, 0x86,
		0xcc, 0x86, 0xa8, 0x64, 0xc2, 0xaa, 0x35, 0x6c, 0xbc, 0x7a, 0x3f, 0x2d, 0xdf, 0x25, 0x8b, 0xff,
		0xcb, 0x92, 0x79, 0xca, 0x3a, 0x3f, 0x5a, 0xf3, 0xb2, 0xf8, 0x1b, 0xcc, 0x7f, 0xbe, 0x05, 0x9f,
		0x6d, 0x0d, 0x75, 0x66, 0xa2, 0xcc, 0x35, 0x54, 0xb9, 0x96, 0x22, 0xb3, 0x18, 0xdc, 0xec, 0x86,
		0x35, 0xab, 0x01, 0x55, 0x36, 0x94, 0xca, 0x06, 0x51, 0xc9, 0xf0, 0xe5, 0xb6, 0x9b, 0x96, 0xab,
		0xd4, 0x05, 0x1b, 0x68, 0x67, 0xc5, 0x87, 0x5b, 0xf7, 0xa1, 0xd6, 0x7f, 0x98, 0xca, 0xc2, 0xfd,
		0xf9, 0x4c, 0x7c, 0x67, 0x3f, 0xeb, 0xe4, 0x13, 0x0d, 0x7e, 0x37, 0xfc, 0x4c, 0xcb, 0x3e, 0x4b,
		0x25, 0x48, 0xce, 0xa2, 0x76, 0x27, 0xf6, 0x93, 0xc4, 0x6f, 0xde, 0xf4, 0x3f, 0xcf, 0xdc, 0x52,
		0x56, 0x82, 0xe4, 0x67, 0xef, 0xb3, 0x7f, 0x1d, 0x45, 0xa3, 0x65, 0x1e, 0x8c, 0xbc, 0xf3, 0xfd,
		0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0x89, 0x3e, 0x15, 0x6c,
		0xb8, 0x0f, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/components/component/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS)(0)),
	},
	"/components/component/state/temperature/alarm-severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/components/component/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT)(0)),
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT)(0)),
	},
	"/interfaces/interface/config/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/qos/classifiers/classifier/config/type": []reflect.Type{
		reflect.TypeOf((E_Qos_Classifier_Type)(0)),
	},
	"/qos/classifiers/classifier/terms/term/conditions/ipv4/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/qos/classifiers/classifier/terms/term/conditions/ipv6/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/qos/classifiers/classifier/terms/term/conditions/l2/config/ethertype": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_ETHERTYPE)(0)),
	},
	"/qos/classifiers/classifier/terms/term/conditions/transport/config/destination-port": []reflect.Type{
		reflect.TypeOf((E_Transport_DestinationPort)(0)),
	},
	"/qos/classifiers/classifier/terms/term/conditions/transport/config/source-port": []reflect.Type{
		reflect.TypeOf((E_Transport_SourcePort)(0)),
	},
	"/qos/classifiers/classifier/terms/term/conditions/transport/config/tcp-flags": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_TCP_FLAGS)(0)),
	},
	"/qos/interfaces/interface/input/classifiers/classifier/config/type": []reflect.Type{
		reflect.TypeOf((E_Input_Classifier_Type)(0)),
	},
	"/qos/interfaces/interface/output/classifiers/classifier/config/type": []reflect.Type{
		reflect.TypeOf((E_Input_Classifier_Type)(0)),
	},
	"/qos/queues/queue/config/queue-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigQosTypes_QOS_QUEUE_TYPE)(0)),
	},
	"/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority": []reflect.Type{
		reflect.TypeOf((E_Scheduler_Priority)(0)),
	},
	"/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigQosTypes_QOS_SCHEDULER_TYPE)(0)),
	},
	"/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type": []reflect.Type{
		reflect.TypeOf((E_Input_InputType)(0)),
	},
	"/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior": []reflect.Type{
		reflect.TypeOf((E_OpenconfigQos_QueueBehavior)(0)),
	},
	"/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type": []reflect.Type{
		reflect.TypeOf((E_Output_OutputType)(0)),
	},
}

