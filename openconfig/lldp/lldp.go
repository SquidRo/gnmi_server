/*
Package lldp is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/sgk/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- public/release/models/lldp/openconfig-lldp-types.yang
	- public/release/models/lldp/openconfig-lldp.yang
Imported modules were sourced from:
	- public/release/models/acl/...
	- public/release/models/types/...
	- public/release/models/...
	- public/third_party/ietf/...
*/
package lldp

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	AdminStatus	E_Interface_AdminStatus	`path:"state/admin-status" module:"openconfig-interfaces"`
	Counters	*Interface_Counters	`path:"state/counters" module:"openconfig-interfaces"`
	Description	*string	`path:"config/description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-interfaces"`
	HoldTime	*Interface_HoldTime	`path:"hold-time" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"state/ifindex" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"state/last-change" module:"openconfig-interfaces"`
	Logical	*bool	`path:"state/logical" module:"openconfig-interfaces"`
	LoopbackMode	*bool	`path:"config/loopback-mode" module:"openconfig-interfaces"`
	Mtu	*uint16	`path:"config/mtu" module:"openconfig-interfaces"`
	Name	*string	`path:"config/name|name" module:"openconfig-interfaces"`
	OperStatus	E_Interface_OperStatus	`path:"state/oper-status" module:"openconfig-interfaces"`
	Subinterface	map[uint32]*Interface_Subinterface	`path:"subinterfaces/subinterface" module:"openconfig-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"config/type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) (*Interface_Subinterface){

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) (*Interface_Subinterface){

	if t == nil {
		return nil
	}

  key := Index

  if lm, ok := t.Subinterface[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	Down	*uint32	`path:"config/down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"config/up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	AdminStatus	E_Interface_AdminStatus	`path:"state/admin-status" module:"openconfig-interfaces"`
	Counters	*Interface_Subinterface_Counters	`path:"state/counters" module:"openconfig-interfaces"`
	Description	*string	`path:"config/description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"state/ifindex" module:"openconfig-interfaces"`
	Index	*uint32	`path:"config/index|index" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"state/last-change" module:"openconfig-interfaces"`
	Logical	*bool	`path:"state/logical" module:"openconfig-interfaces"`
	Name	*string	`path:"state/name" module:"openconfig-interfaces"`
	OperStatus	E_Interface_OperStatus	`path:"state/oper-status" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateCounters() *Interface_Subinterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetCounters() *Interface_Subinterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface_Subinterface struct, which is a YANG list entry.
func (t *Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Lldp represents the /openconfig-lldp/lldp YANG schema element.
type Lldp struct {
	ChassisId	*string	`path:"config/chassis-id" module:"openconfig-lldp"`
	ChassisIdType	E_OpenconfigLldp_ChassisIdType	`path:"config/chassis-id-type" module:"openconfig-lldp"`
	Counters	*Lldp_Counters	`path:"state/counters" module:"openconfig-lldp"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-lldp"`
	HelloTimer	*uint64	`path:"config/hello-timer" module:"openconfig-lldp"`
	Interface	map[string]*Lldp_Interface	`path:"interfaces/interface" module:"openconfig-lldp"`
	SuppressTlvAdvertisement	[]E_OpenconfigLldpTypes_LLDP_TLV	`path:"config/suppress-tlv-advertisement" module:"openconfig-lldp"`
	SystemDescription	*string	`path:"config/system-description" module:"openconfig-lldp"`
	SystemName	*string	`path:"config/system-name" module:"openconfig-lldp"`
}

// IsYANGGoStruct ensures that Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Lldp struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp) NewInterface(Name string) (*Lldp_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Lldp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Lldp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Lldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp) GetOrCreateInterface(Name string) (*Lldp_Interface){

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Lldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp) GetInterface(Name string) (*Lldp_Interface){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Interface[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lldp) GetOrCreateCounters() *Lldp_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lldp_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lldp. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lldp) GetCounters() *Lldp_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Lldp_Counters represents the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_Counters struct {
	EntriesAgedOut	*uint64	`path:"entries-aged-out" module:"openconfig-lldp"`
	FrameDiscard	*uint64	`path:"frame-discard" module:"openconfig-lldp"`
	FrameErrorIn	*uint64	`path:"frame-error-in" module:"openconfig-lldp"`
	FrameIn	*uint64	`path:"frame-in" module:"openconfig-lldp"`
	FrameOut	*uint64	`path:"frame-out" module:"openconfig-lldp"`
	LastClear	*string	`path:"last-clear" module:"openconfig-lldp"`
	TlvAccepted	*uint64	`path:"tlv-accepted" module:"openconfig-lldp"`
	TlvDiscard	*uint64	`path:"tlv-discard" module:"openconfig-lldp"`
	TlvUnknown	*uint64	`path:"tlv-unknown" module:"openconfig-lldp"`
}

// IsYANGGoStruct ensures that Lldp_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Lldp_Interface represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_Interface struct {
	Counters	*Lldp_Interface_Counters	`path:"state/counters" module:"openconfig-lldp"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-lldp"`
	Name	*string	`path:"config/name|name" module:"openconfig-lldp"`
	Neighbor	map[string]*Lldp_Interface_Neighbor	`path:"neighbors/neighbor" module:"openconfig-lldp"`
}

// IsYANGGoStruct ensures that Lldp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Lldp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp_Interface) NewNeighbor(Id string) (*Lldp_Interface_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Lldp_Interface_Neighbor)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Lldp_Interface_Neighbor{
		Id: &Id,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Lldp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp_Interface) GetOrCreateNeighbor(Id string) (*Lldp_Interface_Neighbor){

	key := Id

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Lldp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp_Interface) GetNeighbor(Id string) (*Lldp_Interface_Neighbor){

	if t == nil {
		return nil
	}

  key := Id

  if lm, ok := t.Neighbor[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lldp_Interface) GetOrCreateCounters() *Lldp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lldp_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lldp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lldp_Interface) GetCounters() *Lldp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// ΛListKeyMap returns the keys of the Lldp_Interface struct, which is a YANG list entry.
func (t *Lldp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Lldp_Interface_Counters represents the /openconfig-lldp/lldp/interfaces/interface/state/counters YANG schema element.
type Lldp_Interface_Counters struct {
	FrameDiscard	*uint64	`path:"frame-discard" module:"openconfig-lldp"`
	FrameErrorIn	*uint64	`path:"frame-error-in" module:"openconfig-lldp"`
	FrameErrorOut	*uint64	`path:"frame-error-out" module:"openconfig-lldp"`
	FrameIn	*uint64	`path:"frame-in" module:"openconfig-lldp"`
	FrameOut	*uint64	`path:"frame-out" module:"openconfig-lldp"`
	LastClear	*string	`path:"last-clear" module:"openconfig-lldp"`
	TlvDiscard	*uint64	`path:"tlv-discard" module:"openconfig-lldp"`
	TlvUnknown	*uint64	`path:"tlv-unknown" module:"openconfig-lldp"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Lldp_Interface_Neighbor represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_Neighbor struct {
	Age	*uint64	`path:"state/age" module:"openconfig-lldp"`
	Capability	map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*Lldp_Interface_Neighbor_Capability	`path:"capabilities/capability" module:"openconfig-lldp"`
	ChassisId	*string	`path:"state/chassis-id" module:"openconfig-lldp"`
	ChassisIdType	E_OpenconfigLldp_ChassisIdType	`path:"state/chassis-id-type" module:"openconfig-lldp"`
	Id	*string	`path:"state/id|id" module:"openconfig-lldp"`
	LastUpdate	*int64	`path:"state/last-update" module:"openconfig-lldp"`
	ManagementAddress	*string	`path:"state/management-address" module:"openconfig-lldp"`
	ManagementAddressType	*string	`path:"state/management-address-type" module:"openconfig-lldp"`
	PortDescription	*string	`path:"state/port-description" module:"openconfig-lldp"`
	PortId	*string	`path:"state/port-id" module:"openconfig-lldp"`
	PortIdType	E_OpenconfigLldp_PortIdType	`path:"state/port-id-type" module:"openconfig-lldp"`
	SystemDescription	*string	`path:"state/system-description" module:"openconfig-lldp"`
	SystemName	*string	`path:"state/system-name" module:"openconfig-lldp"`
	Tlv	map[Lldp_Interface_Neighbor_Tlv_Key]*Lldp_Interface_Neighbor_Tlv	`path:"custom-tlvs/tlv" module:"openconfig-lldp"`
	Ttl	*uint16	`path:"state/ttl" module:"openconfig-lldp"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Neighbor) IsYANGGoStruct() {}

// Lldp_Interface_Neighbor_Tlv_Key represents the key for list Tlv of element /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor.
type Lldp_Interface_Neighbor_Tlv_Key struct {
	Type	int32	`path:"type"`
	Oui	string	`path:"oui"`
	OuiSubtype	string	`path:"oui-subtype"`
}

// NewCapability creates a new entry in the Capability list of the
// Lldp_Interface_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp_Interface_Neighbor) NewCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) (*Lldp_Interface_Neighbor_Capability, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capability == nil {
		t.Capability = make(map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*Lldp_Interface_Neighbor_Capability)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Capability[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Capability", key)
	}

	t.Capability[key] = &Lldp_Interface_Neighbor_Capability{
		Name: Name,
	}

	return t.Capability[key], nil
}

// GetOrCreateCapability retrieves the value with the specified keys from
// the receiver Lldp_Interface_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp_Interface_Neighbor) GetOrCreateCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) (*Lldp_Interface_Neighbor_Capability){

	key := Name

	if v, ok := t.Capability[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCapability(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCapability got unexpected error: %v", err))
	}
	return v
}

// GetCapability retrieves the value with the specified key from
// the Capability map field of Lldp_Interface_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp_Interface_Neighbor) GetCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) (*Lldp_Interface_Neighbor_Capability){

	if t == nil {
		return nil
	}

  key := Name

  if lm, ok := t.Capability[key]; ok {
    return lm
  }
  return nil
}

// NewTlv creates a new entry in the Tlv list of the
// Lldp_Interface_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp_Interface_Neighbor) NewTlv(Type int32, Oui string, OuiSubtype string) (*Lldp_Interface_Neighbor_Tlv, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[Lldp_Interface_Neighbor_Tlv_Key]*Lldp_Interface_Neighbor_Tlv)
	}

	key := Lldp_Interface_Neighbor_Tlv_Key{
		Type: Type,
		Oui: Oui,
		OuiSubtype: OuiSubtype,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tlv", key)
	}

	t.Tlv[key] = &Lldp_Interface_Neighbor_Tlv{
		Type: &Type,
		Oui: &Oui,
		OuiSubtype: &OuiSubtype,
	}

	return t.Tlv[key], nil
}

// GetOrCreateTlv retrieves the value with the specified keys from
// the receiver Lldp_Interface_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp_Interface_Neighbor) GetOrCreateTlv(Type int32, Oui string, OuiSubtype string) (*Lldp_Interface_Neighbor_Tlv){

	key := Lldp_Interface_Neighbor_Tlv_Key{
		Type: Type,
		Oui: Oui,
		OuiSubtype: OuiSubtype,
	}

	if v, ok := t.Tlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTlv(Type, Oui, OuiSubtype)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTlv got unexpected error: %v", err))
	}
	return v
}

// GetTlv retrieves the value with the specified key from
// the Tlv map field of Lldp_Interface_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp_Interface_Neighbor) GetTlv(Type int32, Oui string, OuiSubtype string) (*Lldp_Interface_Neighbor_Tlv){

	if t == nil {
		return nil
	}

  key := Lldp_Interface_Neighbor_Tlv_Key{
		Type: Type,
		Oui: Oui,
		OuiSubtype: OuiSubtype,
	}

  if lm, ok := t.Tlv[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Lldp_Interface_Neighbor struct, which is a YANG list entry.
func (t *Lldp_Interface_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Lldp_Interface_Neighbor_Capability represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_Capability struct {
	Enabled	*bool	`path:"state/enabled" module:"openconfig-lldp"`
	Name	E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY	`path:"state/name|name" module:"openconfig-lldp"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Neighbor_Capability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Neighbor_Capability) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Lldp_Interface_Neighbor_Capability struct, which is a YANG list entry.
func (t *Lldp_Interface_Neighbor_Capability) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Neighbor_Capability) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Neighbor_Capability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Neighbor_Capability) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Lldp_Interface_Neighbor_Tlv represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_Tlv struct {
	Oui	*string	`path:"state/oui|oui" module:"openconfig-lldp"`
	OuiSubtype	*string	`path:"state/oui-subtype|oui-subtype" module:"openconfig-lldp"`
	Type	*int32	`path:"state/type|type" module:"openconfig-lldp"`
	Value	Binary	`path:"state/value" module:"openconfig-lldp"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Neighbor_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Neighbor_Tlv) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Lldp_Interface_Neighbor_Tlv struct, which is a YANG list entry.
func (t *Lldp_Interface_Neighbor_Tlv) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oui == nil {
		return nil, fmt.Errorf("nil value for key Oui")
	}

	if t.OuiSubtype == nil {
		return nil, fmt.Errorf("nil value for key OuiSubtype")
	}

	if t.Type == nil {
		return nil, fmt.Errorf("nil value for key Type")
	}

	return map[string]interface{}{
		"oui": *t.Oui,
		"oui-subtype": *t.OuiSubtype,
		"type": *t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Neighbor_Tlv) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Neighbor_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Neighbor_Tlv) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node Interface_AdminStatus. An additional value named
// Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_AdminStatus int64

// IsYANGGoEnum ensures that Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_AdminStatus.
func (E_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_AdminStatus.
func (e E_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_AdminStatus")
}

const (
	// Interface_AdminStatus_UNSET corresponds to the value UNSET of Interface_AdminStatus
	Interface_AdminStatus_UNSET E_Interface_AdminStatus = 0
	// Interface_AdminStatus_UP corresponds to the value UP of Interface_AdminStatus
	Interface_AdminStatus_UP E_Interface_AdminStatus = 1
	// Interface_AdminStatus_DOWN corresponds to the value DOWN of Interface_AdminStatus
	Interface_AdminStatus_DOWN E_Interface_AdminStatus = 2
	// Interface_AdminStatus_TESTING corresponds to the value TESTING of Interface_AdminStatus
	Interface_AdminStatus_TESTING E_Interface_AdminStatus = 3
)


// E_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node Interface_OperStatus. An additional value named
// Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_OperStatus int64

// IsYANGGoEnum ensures that Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_OperStatus.
func (E_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_OperStatus.
func (e E_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_OperStatus")
}

const (
	// Interface_OperStatus_UNSET corresponds to the value UNSET of Interface_OperStatus
	Interface_OperStatus_UNSET E_Interface_OperStatus = 0
	// Interface_OperStatus_UP corresponds to the value UP of Interface_OperStatus
	Interface_OperStatus_UP E_Interface_OperStatus = 2
	// Interface_OperStatus_DOWN corresponds to the value DOWN of Interface_OperStatus
	Interface_OperStatus_DOWN E_Interface_OperStatus = 3
	// Interface_OperStatus_TESTING corresponds to the value TESTING of Interface_OperStatus
	Interface_OperStatus_TESTING E_Interface_OperStatus = 4
	// Interface_OperStatus_UNKNOWN corresponds to the value UNKNOWN of Interface_OperStatus
	Interface_OperStatus_UNKNOWN E_Interface_OperStatus = 5
	// Interface_OperStatus_DORMANT corresponds to the value DORMANT of Interface_OperStatus
	Interface_OperStatus_DORMANT E_Interface_OperStatus = 6
	// Interface_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of Interface_OperStatus
	Interface_OperStatus_NOT_PRESENT E_Interface_OperStatus = 7
	// Interface_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of Interface_OperStatus
	Interface_OperStatus_LOWER_LAYER_DOWN E_Interface_OperStatus = 8
)


// E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY. An additional value named
// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY int64

// IsYANGGoEnum ensures that OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY.
func (E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY.
func (e E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY")
}

const (
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET corresponds to the value UNSET of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 0
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_C_VLAN corresponds to the value C_VLAN of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_C_VLAN E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 1
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_DOCSIS_CABLE_DEVICE corresponds to the value DOCSIS_CABLE_DEVICE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_DOCSIS_CABLE_DEVICE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 2
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_MAC_BRIDGE corresponds to the value MAC_BRIDGE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_MAC_BRIDGE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 3
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_OTHER corresponds to the value OTHER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_OTHER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 4
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_REPEATER corresponds to the value REPEATER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_REPEATER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 5
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_ROUTER corresponds to the value ROUTER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_ROUTER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 6
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_STATION_ONLY corresponds to the value STATION_ONLY of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_STATION_ONLY E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 7
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_S_VLAN corresponds to the value S_VLAN of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_S_VLAN E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 8
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TELEPHONE corresponds to the value TELEPHONE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TELEPHONE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 9
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TWO_PORT_MAC_RELAY corresponds to the value TWO_PORT_MAC_RELAY of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TWO_PORT_MAC_RELAY E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 10
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_WLAN_ACCESS_POINT corresponds to the value WLAN_ACCESS_POINT of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_WLAN_ACCESS_POINT E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 11
)


// E_OpenconfigLldpTypes_LLDP_TLV is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldpTypes_LLDP_TLV. An additional value named
// OpenconfigLldpTypes_LLDP_TLV_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldpTypes_LLDP_TLV int64

// IsYANGGoEnum ensures that OpenconfigLldpTypes_LLDP_TLV implements the yang.GoEnum
// interface. This ensures that OpenconfigLldpTypes_LLDP_TLV can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldpTypes_LLDP_TLV) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldpTypes_LLDP_TLV.
func (E_OpenconfigLldpTypes_LLDP_TLV) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigLldpTypes_LLDP_TLV.
func (e E_OpenconfigLldpTypes_LLDP_TLV) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigLldpTypes_LLDP_TLV")
}

const (
	// OpenconfigLldpTypes_LLDP_TLV_UNSET corresponds to the value UNSET of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_UNSET E_OpenconfigLldpTypes_LLDP_TLV = 0
	// OpenconfigLldpTypes_LLDP_TLV_CHASSIS_ID corresponds to the value CHASSIS_ID of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_CHASSIS_ID E_OpenconfigLldpTypes_LLDP_TLV = 1
	// OpenconfigLldpTypes_LLDP_TLV_MANAGEMENT_ADDRESS corresponds to the value MANAGEMENT_ADDRESS of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_MANAGEMENT_ADDRESS E_OpenconfigLldpTypes_LLDP_TLV = 2
	// OpenconfigLldpTypes_LLDP_TLV_PORT_DESCRIPTION corresponds to the value PORT_DESCRIPTION of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_PORT_DESCRIPTION E_OpenconfigLldpTypes_LLDP_TLV = 3
	// OpenconfigLldpTypes_LLDP_TLV_PORT_ID corresponds to the value PORT_ID of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_PORT_ID E_OpenconfigLldpTypes_LLDP_TLV = 4
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_CAPABILITIES corresponds to the value SYSTEM_CAPABILITIES of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_CAPABILITIES E_OpenconfigLldpTypes_LLDP_TLV = 5
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_DESCRIPTION corresponds to the value SYSTEM_DESCRIPTION of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_DESCRIPTION E_OpenconfigLldpTypes_LLDP_TLV = 6
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_NAME corresponds to the value SYSTEM_NAME of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_NAME E_OpenconfigLldpTypes_LLDP_TLV = 7
)


// E_OpenconfigLldp_ChassisIdType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldp_ChassisIdType. An additional value named
// OpenconfigLldp_ChassisIdType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldp_ChassisIdType int64

// IsYANGGoEnum ensures that OpenconfigLldp_ChassisIdType implements the yang.GoEnum
// interface. This ensures that OpenconfigLldp_ChassisIdType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldp_ChassisIdType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldp_ChassisIdType.
func (E_OpenconfigLldp_ChassisIdType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigLldp_ChassisIdType.
func (e E_OpenconfigLldp_ChassisIdType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigLldp_ChassisIdType")
}

const (
	// OpenconfigLldp_ChassisIdType_UNSET corresponds to the value UNSET of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_UNSET E_OpenconfigLldp_ChassisIdType = 0
	// OpenconfigLldp_ChassisIdType_CHASSIS_COMPONENT corresponds to the value CHASSIS_COMPONENT of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_CHASSIS_COMPONENT E_OpenconfigLldp_ChassisIdType = 1
	// OpenconfigLldp_ChassisIdType_INTERFACE_ALIAS corresponds to the value INTERFACE_ALIAS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_INTERFACE_ALIAS E_OpenconfigLldp_ChassisIdType = 2
	// OpenconfigLldp_ChassisIdType_PORT_COMPONENT corresponds to the value PORT_COMPONENT of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_PORT_COMPONENT E_OpenconfigLldp_ChassisIdType = 3
	// OpenconfigLldp_ChassisIdType_MAC_ADDRESS corresponds to the value MAC_ADDRESS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_MAC_ADDRESS E_OpenconfigLldp_ChassisIdType = 4
	// OpenconfigLldp_ChassisIdType_NETWORK_ADDRESS corresponds to the value NETWORK_ADDRESS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_NETWORK_ADDRESS E_OpenconfigLldp_ChassisIdType = 5
	// OpenconfigLldp_ChassisIdType_INTERFACE_NAME corresponds to the value INTERFACE_NAME of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_INTERFACE_NAME E_OpenconfigLldp_ChassisIdType = 6
	// OpenconfigLldp_ChassisIdType_LOCAL corresponds to the value LOCAL of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_LOCAL E_OpenconfigLldp_ChassisIdType = 7
)


// E_OpenconfigLldp_PortIdType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldp_PortIdType. An additional value named
// OpenconfigLldp_PortIdType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldp_PortIdType int64

// IsYANGGoEnum ensures that OpenconfigLldp_PortIdType implements the yang.GoEnum
// interface. This ensures that OpenconfigLldp_PortIdType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldp_PortIdType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldp_PortIdType.
func (E_OpenconfigLldp_PortIdType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigLldp_PortIdType.
func (e E_OpenconfigLldp_PortIdType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigLldp_PortIdType")
}

const (
	// OpenconfigLldp_PortIdType_UNSET corresponds to the value UNSET of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_UNSET E_OpenconfigLldp_PortIdType = 0
	// OpenconfigLldp_PortIdType_INTERFACE_ALIAS corresponds to the value INTERFACE_ALIAS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_INTERFACE_ALIAS E_OpenconfigLldp_PortIdType = 1
	// OpenconfigLldp_PortIdType_PORT_COMPONENT corresponds to the value PORT_COMPONENT of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_PORT_COMPONENT E_OpenconfigLldp_PortIdType = 2
	// OpenconfigLldp_PortIdType_MAC_ADDRESS corresponds to the value MAC_ADDRESS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_MAC_ADDRESS E_OpenconfigLldp_PortIdType = 3
	// OpenconfigLldp_PortIdType_NETWORK_ADDRESS corresponds to the value NETWORK_ADDRESS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_NETWORK_ADDRESS E_OpenconfigLldp_PortIdType = 4
	// OpenconfigLldp_PortIdType_INTERFACE_NAME corresponds to the value INTERFACE_NAME of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_INTERFACE_NAME E_OpenconfigLldp_PortIdType = 5
	// OpenconfigLldp_PortIdType_AGENT_CIRCUIT_ID corresponds to the value AGENT_CIRCUIT_ID of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_AGENT_CIRCUIT_ID E_OpenconfigLldp_PortIdType = 6
	// OpenconfigLldp_PortIdType_LOCAL corresponds to the value LOCAL of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_LOCAL E_OpenconfigLldp_PortIdType = 7
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_Interface_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_Interface_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY": {
		1: {Name: "C_VLAN", DefiningModule: "openconfig-lldp-types"},
		2: {Name: "DOCSIS_CABLE_DEVICE", DefiningModule: "openconfig-lldp-types"},
		3: {Name: "MAC_BRIDGE", DefiningModule: "openconfig-lldp-types"},
		4: {Name: "OTHER", DefiningModule: "openconfig-lldp-types"},
		5: {Name: "REPEATER", DefiningModule: "openconfig-lldp-types"},
		6: {Name: "ROUTER", DefiningModule: "openconfig-lldp-types"},
		7: {Name: "STATION_ONLY", DefiningModule: "openconfig-lldp-types"},
		8: {Name: "S_VLAN", DefiningModule: "openconfig-lldp-types"},
		9: {Name: "TELEPHONE", DefiningModule: "openconfig-lldp-types"},
		10: {Name: "TWO_PORT_MAC_RELAY", DefiningModule: "openconfig-lldp-types"},
		11: {Name: "WLAN_ACCESS_POINT", DefiningModule: "openconfig-lldp-types"},
	},
	"E_OpenconfigLldpTypes_LLDP_TLV": {
		1: {Name: "CHASSIS_ID", DefiningModule: "openconfig-lldp-types"},
		2: {Name: "MANAGEMENT_ADDRESS", DefiningModule: "openconfig-lldp-types"},
		3: {Name: "PORT_DESCRIPTION", DefiningModule: "openconfig-lldp-types"},
		4: {Name: "PORT_ID", DefiningModule: "openconfig-lldp-types"},
		5: {Name: "SYSTEM_CAPABILITIES", DefiningModule: "openconfig-lldp-types"},
		6: {Name: "SYSTEM_DESCRIPTION", DefiningModule: "openconfig-lldp-types"},
		7: {Name: "SYSTEM_NAME", DefiningModule: "openconfig-lldp-types"},
	},
	"E_OpenconfigLldp_ChassisIdType": {
		1: {Name: "CHASSIS_COMPONENT"},
		2: {Name: "INTERFACE_ALIAS"},
		3: {Name: "PORT_COMPONENT"},
		4: {Name: "MAC_ADDRESS"},
		5: {Name: "NETWORK_ADDRESS"},
		6: {Name: "INTERFACE_NAME"},
		7: {Name: "LOCAL"},
	},
	"E_OpenconfigLldp_PortIdType": {
		1: {Name: "INTERFACE_ALIAS"},
		2: {Name: "PORT_COMPONENT"},
		3: {Name: "MAC_ADDRESS"},
		4: {Name: "NETWORK_ADDRESS"},
		5: {Name: "INTERFACE_NAME"},
		6: {Name: "AGENT_CIRCUIT_ID"},
		7: {Name: "LOCAL"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0xdb, 0x6f, 0xe3, 0x38,
		0xd2, 0xfd, 0x7b, 0xfe, 0x8a, 0x40, 0x4f, 0xbb, 0xd8, 0xa8, 0x73, 0x73, 0x6e, 0xfd, 0xf2, 0x83,
		0x3b, 0xf1, 0xee, 0x18, 0xbf, 0xdc, 0x10, 0x67, 0x67, 0x31, 0xdf, 0xb6, 0x11, 0x28, 0x32, 0x9d,
		0x08, 0x2d, 0x4b, 0x86, 0x44, 0xf5, 0x74, 0x30, 0x5f, 0xfe, 0xf7, 0x0f, 0x76, 0x64, 0x5b, 0x8e,
		0x6f, 0x2c, 0xb2, 0x28, 0xcb, 0xc9, 0x99, 0x87, 0xe9, 0x4e, 0xda, 0x2c, 0x4b, 0x64, 0xd5, 0x39,
		0x87, 0x45, 0xb2, 0xf8, 0xd7, 0xd6, 0xf6, 0xf6, 0xf6, 0xb6, 0x73, 0xed, 0xf5, 0x84, 0xf3, 0x75,
		0xdb, 0x71, 0x76, 0xde, 0x7e, 0xfe, 0xff, 0x41, 0xd4, 0x71, 0xbe, 0x6e, 0xef, 0xe5, 0x3f, 0x9e,
		0xc7, 0x51, 0x37, 0x78, 0x2a, 0xfc, 0xe2, 0x22, 0x48, 0x9c, 0xaf, 0xdb, 0x6f, 0x8d, 0x87, 0xbf,
		0x08, 0x22, 0x29, 0x92, 0xae, 0xe7, 0x8b, 0x74, 0xea, 0xf7, 0x53, 0xc6, 0x0b, 0x9f, 0xd9, 0x99,
		0xfe, 0x44, 0xfe, 0x75, 0xfb, 0xef, 0x7e, 0xfd, 0xfe, 0x6b, 0xc7, 0xff, 0x70, 0x9b, 0x88, 0x6e,
		0xf0, 0x6b, 0xe6, 0x9b, 0xa6, 0xbe, 0x2d, 0xf6, 0xdd, 0xa0, 0xfb, 0xee, 0x8b, 0x86, 0x1f, 0x68,
		0xc5, 0x59, 0xe2, 0x8b, 0xb9, 0x8d, 0xdf, 0x1e, 0x46, 0xbc, 0xfc, 0x19, 0x27, 0x83, 0xe7, 0x71,
		0xfa, 0x6f, 0xdf, 0xb3, 0x33, 0xff, 0x83, 0xbf, 0x79, 0x69, 0x3d, 0x79, 0xca, 0x7a, 0x22, 0x92,
		0xce, 0xd7, 0x6d, 0x99, 0x64, 0x62, 0xc1, 0x07, 0x0b, 0x9f, 0xca, 0x1f, 0x6b, 0xe6, 0x73, 0xaf,
		0x53, 0xbf, 0x79, 0x7d, 0xf7, 0xbe, 0xef, 0xbb, 0x7b, 0xb6, 0xdb, 0x17, 0xbf, 0xce, 0x4c, 0xef,
		0x2f, 0x7a, 0x9d, 0xf9, 0x83, 0xb0, 0x72, 0x30, 0x54, 0x06, 0x45, 0x79, 0x70, 0x54, 0x07, 0x89,
		0x3c, 0x58, 0xe4, 0x41, 0xa3, 0x0c, 0xde, 0xfc, 0x41, 0x5c, 0x30, 0x98, 0x2b, 0x07, 0x75, 0xfc,
		0x01, 0x7f, 0xd4, 0xe3, 0x2b, 0xfa, 0x60, 0xd4, 0xa9, 0xf9, 0xe7, 0x57, 0xbc, 0xcf, 0xf2, 0x61,
		0x56, 0x1e, 0x6e, 0xca, 0xb0, 0x93, 0x87, 0x9f, 0xea, 0x06, 0xda, 0xee, 0xa0, 0xed, 0x16, 0x3a,
		0xee, 0xb1, 0xdc, 0x4d, 0x56, 0xb8, 0x8b, 0xb2, 0xdb, 0x8c, 0x3f, 0xd8, 0x11, 0xa9, 0x9f, 0x04,
		0x7d, 0x19, 0xc4, 0x91, 0x7a, 0x07, 0x8e, 0x46, 0xa8, 0xd8, 0x58, 0xb1, 0x27, 0xa6, 0x39, 0x63,
		0xe5, 0xc7, 0x55, 0x1d, 0x4c, 0xc7, 0xd1, 0xb4, 0x1d, 0x4e, 0xd7, 0xf1, 0x8c, 0x1d, 0xd0, 0xd8,
		0x11, 0x4d, 0x1c, 0x52, 0xcd, 0x31, 0x15, 0x1d, 0x74, 0xfc, 0x20, 0xf7, 0x2f, 0x7d, 0xa1, 0x37,
		0x5a, 0xa9, 0x4c, 0x82, 0xe8, 0x89, 0x32, 0x5c, 0x23, 0x50, 0x3b, 0xdd, 0xe2, 0x79, 0x4f, 0x85,
		0x77, 0x74, 0x44, 0xe4, 0x3d, 0x86, 0xa2, 0x43, 0x8f, 0xad, 0x51, 0x43, 0xc5, 0x7e, 0xbc, 0x10,
		0x5d, 0x2f, 0x0b, 0x87, 0xe3, 0x39, 0x70, 0x07, 0x84, 0x23, 0xc2, 0xb1, 0xdc, 0x70, 0x7c, 0x8c,
		0xe3, 0x50, 0x78, 0x91, 0x4e, 0x3c, 0xee, 0x97, 0x18, 0x8f, 0x61, 0x1c, 0xf7, 0x1f, 0x3d, 0xff,
		0x87, 0xdb, 0x8b, 0x3b, 0x82, 0x1e, 0x95, 0xd3, 0xcd, 0xe9, 0xb1, 0xd9, 0xf5, 0xc2, 0x14, 0xc1,
		0x89, 0xe0, 0x44, 0x70, 0xce, 0xfb, 0xce, 0x9e, 0xcc, 0xe8, 0x21, 0x39, 0x68, 0x84, 0x80, 0x42,
		0x40, 0x95, 0x1a, 0x50, 0x59, 0x10, 0xc9, 0xfd, 0x63, 0x8d, 0x78, 0x3a, 0x26, 0x34, 0xb9, 0xf3,
		0xa2, 0xa7, 0xc1, 0xb7, 0xfd, 0x97, 0xd4, 0xbd, 0x34, 0x77, 0x18, 0x7e, 0xd1, 0x55, 0x10, 0x91,
		0xfd, 0x48, 0x33, 0xa8, 0x66, 0x9a, 0xff, 0xee, 0x85, 0x99, 0x30, 0x68, 0xff, 0xcf, 0xc4, 0xf3,
		0x07, 0x13, 0xd0, 0x8b, 0xe0, 0x29, 0x90, 0xe9, 0xc0, 0x10, 0xd9, 0xce, 0xeb, 0x8e, 0x46, 0x97,
		0x79, 0xbf, 0xd6, 0xde, 0x65, 0xc7, 0x47, 0x47, 0x87, 0x47, 0x6b, 0xec, 0xb6, 0x2d, 0x3b, 0x9f,
		0x6e, 0x97, 0xc8, 0x38, 0xd1, 0x5b, 0x3c, 0x13, 0x29, 0x67, 0xd8, 0x0a, 0x9c, 0x03, 0xce, 0x41,
		0xc2, 0x63, 0xe6, 0x3b, 0x25, 0xe5, 0xfd, 0xc6, 0xef, 0x36, 0x6c, 0x85, 0x88, 0x42, 0x44, 0x95,
		0x1a, 0x51, 0x41, 0x47, 0x44, 0x32, 0x90, 0x2f, 0x89, 0xe8, 0xea, 0x84, 0x15, 0x81, 0x7b, 0x9d,
		0x66, 0xfe, 0x55, 0xdf, 0xbc, 0x54, 0x63, 0xb4, 0x67, 0x96, 0xe7, 0xdc, 0x61, 0xc0, 0x70, 0x77,
		0xb8, 0xe5, 0x45, 0x89, 0xc6, 0xaf, 0xa1, 0xd2, 0x58, 0x2d, 0x67, 0xe9, 0xeb, 0x38, 0xb1, 0xef,
		0x8a, 0x5f, 0xf2, 0xab, 0x14, 0xa1, 0xe8, 0x09, 0x99, 0xbc, 0xb8, 0x71, 0xe4, 0xfa, 0xcf, 0x43,
		0xfd, 0xac, 0xb5, 0xb6, 0x33, 0xcc, 0xd3, 0x68, 0x2c, 0xee, 0x98, 0xae, 0xeb, 0xb4, 0x57, 0xad,
		0x33, 0x46, 0x51, 0x2c, 0x3d, 0xe5, 0xd5, 0x1a, 0x27, 0xf5, 0x9f, 0x45, 0xcf, 0xeb, 0x7b, 0xf2,
		0x79, 0xf0, 0x74, 0xbb, 0x71, 0x5f, 0x44, 0x6f, 0x0b, 0x80, 0xee, 0x64, 0x9d, 0x7d, 0x77, 0xde,
		0x5f, 0x77, 0xf3, 0x75, 0xc2, 0x2d, 0xbd, 0x77, 0x59, 0xe2, 0x0a, 0xce, 0x73, 0x1c, 0x76, 0x5c,
		0x19, 0x28, 0x08, 0xaf, 0xb1, 0xdf, 0x4f, 0x9a, 0x60, 0xdd, 0x12, 0xeb, 0x96, 0x84, 0x65, 0xef,
		0x99, 0xc1, 0x51, 0x5a, 0xfe, 0x26, 0xba, 0x13, 0xa4, 0xc6, 0x67, 0x91, 0x1a, 0xaa, 0xee, 0x39,
		0x6e, 0xd0, 0x89, 0xff, 0x8c, 0xf4, 0xe9, 0x7e, 0xd8, 0x9a, 0xd8, 0x57, 0x85, 0xc5, 0x86, 0x3d,
		0x6a, 0x5b, 0xbd, 0xbc, 0x04, 0xd9, 0xed, 0x4d, 0xdc, 0xdf, 0x38, 0x0c, 0x4c, 0xc3, 0x81, 0x2d,
		0x2c, 0xd8, 0xc2, 0x83, 0x23, 0x4c, 0x34, 0x73, 0x3a, 0xc4, 0xf1, 0x26, 0x2b, 0xf5, 0xb9, 0x79,
		0xd7, 0xc3, 0x03, 0x9d, 0xe1, 0xce, 0x7d, 0xfb, 0x44, 0xa3, 0xa9, 0x5e, 0x1e, 0x56, 0x3f, 0x1f,
		0xcb, 0x92, 0x97, 0x65, 0x4a, 0x36, 0x72, 0xe5, 0x69, 0x39, 0x13, 0x8f, 0x06, 0x79, 0x5b, 0x96,
		0xfc, 0xad, 0xad, 0xae, 0xad, 0x1d, 0x9c, 0xd5, 0xce, 0x8e, 0x4f, 0x0e, 0xce, 0x8e, 0x2a, 0xd4,
		0xc7, 0x5b, 0xe5, 0xb4, 0x6a, 0x5b, 0x4a, 0x26, 0x13, 0x7c, 0xc4, 0xc9, 0xfa, 0xfa, 0x54, 0x9d,
		0xf5, 0x41, 0xd4, 0x20, 0x6a, 0x10, 0x35, 0x88, 0x1a, 0x44, 0x0d, 0xa2, 0x06, 0x51, 0xd3, 0x89,
		0x9a, 0x75, 0xa2, 0xae, 0x9c, 0x6a, 0xd6, 0x0b, 0x7e, 0xd6, 0xd4, 0xf3, 0x02, 0x7e, 0x21, 0xa4,
		0xa0, 0xe7, 0x12, 0x0b, 0x77, 0x8e, 0xa4, 0xad, 0x9a, 0x33, 0xa4, 0xa5, 0xa8, 0xc7, 0xed, 0xf4,
		0x53, 0xd5, 0xe3, 0xec, 0xb0, 0x52, 0xd2, 0x5a, 0xfd, 0xad, 0x55, 0x96, 0x3b, 0x53, 0xe9, 0x49,
		0x8d, 0xf5, 0xce, 0xb7, 0x66, 0x96, 0xb3, 0x90, 0x07, 0xc8, 0x42, 0x22, 0x0b, 0x89, 0x2c, 0x24,
		0x26, 0x37, 0x98, 0xdc, 0x60, 0x72, 0x83, 0xc9, 0x0d, 0x26, 0x37, 0x98, 0xdc, 0x20, 0x0b, 0x09,
		0xa2, 0x06, 0x51, 0x83, 0xa8, 0x41, 0xd4, 0x20, 0x6a, 0x10, 0x35, 0x88, 0xda, 0xee, 0x44, 0x7d,
		0x9d, 0xa9, 0xb0, 0xb7, 0x0c, 0x53, 0x25, 0xf6, 0xfd, 0x96, 0xb7, 0x69, 0x55, 0x75, 0x9f, 0x68,
		0x9e, 0xba, 0x4b, 0x32, 0x5f, 0xe6, 0x27, 0x80, 0x9c, 0xe6, 0xc8, 0xc8, 0xc3, 0x6f, 0x71, 0xd8,
		0xb9, 0x1f, 0xd8, 0xb0, 0xb0, 0xf7, 0x55, 0xe9, 0xbc, 0x11, 0xe5, 0x9c, 0x91, 0x22, 0xa8, 0x60,
		0xc7, 0x6b, 0x55, 0x77, 0xbc, 0x2a, 0x8b, 0x9c, 0x49, 0x0d, 0x02, 0xe1, 0x75, 0xd5, 0x4e, 0x2c,
		0x8c, 0x33, 0xc7, 0x0a, 0x32, 0xc6, 0xb9, 0xcd, 0xe3, 0xed, 0xcb, 0x97, 0x3c, 0x8d, 0xbe, 0x3b,
		0x74, 0x3f, 0x0b, 0x41, 0xa0, 0x96, 0x33, 0x27, 0xe5, 0xca, 0xc9, 0x1b, 0xbf, 0x0f, 0x10, 0x06,
		0x95, 0x0a, 0x03, 0xe5, 0x8d, 0xdf, 0x5e, 0xa7, 0x17, 0x44, 0xee, 0xc0, 0x27, 0xb2, 0x94, 0xbe,
		0xee, 0x32, 0xd5, 0x1a, 0xe7, 0xcd, 0xca, 0x9b, 0xbe, 0xe2, 0xbc, 0xd9, 0xb0, 0xa6, 0x53, 0xd6,
		0x13, 0x89, 0x47, 0xa8, 0x97, 0x36, 0x85, 0x6d, 0x35, 0x42, 0x9b, 0x46, 0x94, 0xf5, 0x06, 0x0f,
		0x89, 0x65, 0xf5, 0xf5, 0x2d, 0xab, 0xef, 0x94, 0xd7, 0x4d, 0x71, 0x3f, 0xf7, 0x2b, 0x2f, 0xfc,
		0x60, 0xbb, 0x0e, 0x58, 0x56, 0xe9, 0xfd, 0x38, 0x1b, 0xc8, 0xfb, 0x54, 0xe7, 0xbc, 0x50, 0xde,
		0x12, 0x27, 0x86, 0x40, 0x16, 0x1a, 0x88, 0x49, 0x5e, 0xab, 0xf7, 0xbd, 0x24, 0x09, 0x44, 0xe2,
		0xca, 0xc4, 0x8b, 0xd2, 0x60, 0x10, 0xd2, 0xa9, 0xfe, 0x7a, 0xc0, 0x3c, 0x63, 0x48, 0xf2, 0xb3,
		0x3b, 0x3c, 0x9b, 0xe3, 0xb3, 0x05, 0x00, 0x47, 0x20, 0xe8, 0x65, 0xe7, 0xca, 0x4f, 0xf2, 0xe7,
		0x10, 0x7d, 0x5c, 0x33, 0xc8, 0xf3, 0x9f, 0x22, 0xcf, 0x6f, 0x96, 0x8c, 0x46, 0x9e, 0xdf, 0x5a,
		0xd7, 0xee, 0x9f, 0xd6, 0x6a, 0xc7, 0x27, 0xb5, 0xda, 0xde, 0xc9, 0xe1, 0xc9, 0xde, 0xd9, 0xd1,
		0xd1, 0xfe, 0xf1, 0x3e, 0x32, 0xfe, 0xcc, 0x28, 0x44, 0x9e, 0xd8, 0x98, 0x85, 0xb1, 0x95, 0x89,
		0x0e, 0x9f, 0xa2, 0x37, 0x54, 0xf6, 0x7a, 0x83, 0xdc, 0xb6, 0xb2, 0x9b, 0x22, 0x88, 0xdc, 0xc7,
		0x24, 0xf6, 0x3a, 0xbe, 0x97, 0x4a, 0xb7, 0xff, 0x43, 0xa6, 0x26, 0xc5, 0x57, 0xde, 0x9b, 0x82,
		0x94, 0x82, 0x94, 0x82, 0x94, 0x82, 0x94, 0x82, 0x94, 0x82, 0x94, 0xc2, 0xe6, 0x09, 0x2a, 0x2f,
		0x77, 0x82, 0xd4, 0xf7, 0x92, 0x8e, 0x19, 0x23, 0x8f, 0x8d, 0x80, 0x8b, 0xc1, 0xc5, 0xe0, 0x62,
		0x70, 0x31, 0xb8, 0x18, 0x5c, 0x0c, 0x2e, 0xa6, 0x72, 0xb1, 0x48, 0x92, 0x38, 0x31, 0x63, 0xe2,
		0xdc, 0x04, 0x78, 0x18, 0x3c, 0x0c, 0x1e, 0x06, 0x0f, 0x83, 0x87, 0xc1, 0xc3, 0xe0, 0x61, 0x2a,
		0x0f, 0x77, 0xfd, 0x94, 0x83, 0x8b, 0x0b, 0x66, 0xc0, 0xc7, 0xe0, 0x63, 0xf0, 0x31, 0xf8, 0x18,
		0x7c, 0x0c, 0x3e, 0x06, 0x1f, 0x53, 0xf9, 0xb8, 0x97, 0x85, 0x32, 0xe0, 0x59, 0x3b, 0x7e, 0x67,
		0x0a, 0xbc, 0x0c, 0x5e, 0x06, 0x2f, 0x83, 0x97, 0xc1, 0xcb, 0xe0, 0x65, 0xf0, 0x32, 0x95, 0x97,
		0x63, 0x5f, 0x0a, 0x43, 0x3e, 0xce, 0x4d, 0x80, 0x87, 0xc1, 0xc3, 0xe0, 0x61, 0xf0, 0x30, 0x78,
		0x18, 0x3c, 0x0c, 0x1e, 0xa6, 0xf2, 0xb0, 0xf1, 0xac, 0x18, 0x73, 0x61, 0x70, 0x30, 0x38, 0x18,
		0x1c, 0x0c, 0x0e, 0x06, 0x07, 0x83, 0x83, 0xb5, 0x38, 0x38, 0x8b, 0x98, 0x32, 0xd4, 0x53, 0x86,
		0xc0, 0xc9, 0xe0, 0x64, 0x70, 0x32, 0x38, 0x19, 0x9c, 0x0c, 0x4e, 0x06, 0x27, 0xd3, 0x39, 0xf9,
		0x47, 0x14, 0xff, 0x19, 0xb9, 0xfd, 0x24, 0x96, 0xb1, 0x29, 0x2b, 0x4f, 0x99, 0x02, 0x2f, 0x83,
		0x97, 0xc1, 0xcb, 0xe0, 0x65, 0xf0, 0x32, 0x78, 0x19, 0xbc, 0x4c, 0xe2, 0xe5, 0x70, 0x30, 0xb9,
		0xf5, 0x43, 0xe1, 0x25, 0xfa, 0x84, 0x5c, 0xb0, 0x01, 0x26, 0x06, 0x13, 0x7f, 0x28, 0x26, 0x96,
		0x41, 0x4f, 0xc8, 0xc0, 0xff, 0x91, 0x96, 0xce, 0xc5, 0xff, 0x8e, 0xde, 0x70, 0xcc, 0x89, 0xbc,
		0x28, 0x4e, 0x85, 0x1f, 0x47, 0xe4, 0x13, 0xfd, 0xe0, 0x74, 0x70, 0x3a, 0x38, 0xbd, 0xca, 0x9c,
		0x8e, 0x92, 0x6c, 0x28, 0xc9, 0x36, 0x78, 0x83, 0x38, 0x93, 0x6c, 0x35, 0xd9, 0xe6, 0xd8, 0x82,
		0x2c, 0x83, 0x2c, 0x43, 0x82, 0x04, 0x09, 0x12, 0x88, 0x29, 0x88, 0x29, 0x24, 0x48, 0xc8, 0xcc,
		0x6c, 0x5e, 0x95, 0x6d, 0xca, 0x0a, 0xd8, 0x18, 0x6c, 0x0c, 0x36, 0x06, 0x1b, 0x83, 0x8d, 0xc1,
		0xc6, 0x60, 0x63, 0x32, 0x1b, 0x9b, 0xd6, 0x82, 0x29, 0xd8, 0x00, 0x13, 0x83, 0x89, 0xc1, 0xc4,
		0x60, 0x62, 0x30, 0x31, 0x98, 0x18, 0x4c, 0x4c, 0x66, 0x62, 0xae, 0x4a, 0x30, 0x73, 0x6c, 0x81,
		0x99, 0xc1, 0xcc, 0x60, 0x66, 0x30, 0x33, 0x98, 0x19, 0xcc, 0x0c, 0x66, 0x26, 0x33, 0xb3, 0x69,
		0x2d, 0x98, 0x82, 0x0d, 0x30, 0x31, 0x98, 0x18, 0x4c, 0x0c, 0x26, 0x06, 0x13, 0x83, 0x89, 0xc1,
		0xc4, 0x64, 0x26, 0x36, 0x9f, 0x19, 0x63, 0x3e, 0x0c, 0x16, 0x06, 0x0b, 0x83, 0x85, 0xc1, 0xc2,
		0x60, 0x61, 0xb0, 0xb0, 0x1e, 0x0b, 0xf3, 0xd4, 0x83, 0x99, 0xb1, 0x04, 0x56, 0x06, 0x2b, 0x83,
		0x95, 0xc1, 0xca, 0x60, 0x65, 0xb0, 0x32, 0x58, 0x59, 0xf1, 0x93, 0x8a, 0x3e, 0x45, 0x3f, 0xec,
		0x46, 0x64, 0xf5, 0xd9, 0xc3, 0x6d, 0x71, 0x5f, 0x24, 0xde, 0x60, 0x2c, 0xbd, 0x90, 0x4a, 0xed,
		0xc6, 0x87, 0xd9, 0x34, 0x0f, 0xb1, 0xa9, 0x75, 0x79, 0x5b, 0xb1, 0xcb, 0xeb, 0x51, 0x14, 0xcb,
		0x61, 0x0f, 0x90, 0x22, 0xd7, 0x49, 0xfd, 0x67, 0xd1, 0xf3, 0xfa, 0x9e, 0x7c, 0x1e, 0x3c, 0xfd,
		0x6e, 0xdc, 0x17, 0x91, 0x3f, 0x14, 0x2d, 0x6e, 0x30, 0xa0, 0x93, 0xae, 0xe7, 0x8b, 0x74, 0x77,
		0xde, 0x5f, 0x77, 0x53, 0xe9, 0x49, 0xb1, 0x9b, 0xd3, 0x0e, 0x45, 0x50, 0x39, 0xa9, 0x4c, 0x32,
		0x5f, 0x46, 0x39, 0x71, 0x35, 0x47, 0x16, 0x1f, 0xce, 0x47, 0xb6, 0xb6, 0x78, 0xfa, 0x4f, 0xc1,
		0x5d, 0x9d, 0x8e, 0x48, 0xfd, 0x24, 0xe8, 0x93, 0x3a, 0x6e, 0xcc, 0xb9, 0xc5, 0xc6, 0x8a, 0xe3,
		0x44, 0x43, 0x45, 0xb2, 0x80, 0xd4, 0x11, 0x8e, 0xda, 0x82, 0x51, 0x57, 0x28, 0x1a, 0x0b, 0x44,
		0x63, 0x61, 0x68, 0x22, 0x08, 0x79, 0xa1, 0x92, 0x2c, 0xfc, 0xc6, 0xa3, 0x95, 0xca, 0x24, 0x88,
		0x9e, 0x28, 0xc3, 0x95, 0xfb, 0xde, 0xfe, 0x69, 0x89, 0xf1, 0x25, 0x22, 0xef, 0x31, 0x14, 0x1d,
		0x7a, 0x6c, 0x8d, 0x1a, 0x2a, 0xf6, 0xe3, 0x85, 0xe8, 0x7a, 0x59, 0x38, 0x1c, 0xcf, 0x81, 0x3b,
		0x20, 0x1c, 0x11, 0x8e, 0xe5, 0x86, 0xe3, 0x63, 0x1c, 0x87, 0xc2, 0x8b, 0x74, 0xe2, 0x71, 0xbf,
		0xc4, 0x78, 0x0c, 0xba, 0x41, 0xd4, 0x11, 0xbf, 0xe8, 0xf1, 0x38, 0x6a, 0x88, 0xc0, 0x42, 0x60,
		0x95, 0x1a, 0x58, 0x59, 0x10, 0xc9, 0xc3, 0x03, 0x8d, 0xb8, 0x3a, 0x21, 0x34, 0xd1, 0xcb, 0x62,
		0x68, 0xa4, 0x6b, 0x4c, 0xb2, 0x16, 0x86, 0x53, 0x6a, 0xd3, 0x2c, 0x05, 0xc7, 0x7c, 0x59, 0x23,
		0x2b, 0x61, 0x94, 0x8d, 0xe0, 0xea, 0xb2, 0xda, 0xc1, 0x59, 0xed, 0xec, 0xf8, 0xe4, 0xe0, 0xec,
		0x68, 0x8d, 0x7d, 0x67, 0x69, 0xee, 0xdf, 0xde, 0xf0, 0xb9, 0xbf, 0x79, 0x61, 0x9b, 0xf5, 0xe5,
		0x00, 0x76, 0x90, 0x22, 0x31, 0x4f, 0x91, 0xb0, 0x08, 0xa3, 0xb7, 0x52, 0x88, 0xcf, 0x39, 0x0f,
		0x10, 0xc5, 0x51, 0xb1, 0x31, 0x04, 0x12, 0x04, 0x52, 0xa9, 0x02, 0x49, 0xaf, 0xd0, 0xa1, 0xc6,
		0x9a, 0x8f, 0x69, 0x61, 0x43, 0xa8, 0x2c, 0xa8, 0xac, 0xa5, 0x5d, 0xc6, 0xb7, 0xc6, 0x03, 0xbd,
		0x05, 0xbd, 0x05, 0xbd, 0x55, 0x69, 0xbd, 0x15, 0x3f, 0x05, 0xbe, 0x17, 0x6a, 0x68, 0xad, 0xbc,
		0x21, 0x74, 0x16, 0x74, 0xd6, 0x07, 0xcb, 0xf0, 0x02, 0xf2, 0x01, 0xf9, 0x1f, 0x1a, 0xf2, 0xe3,
		0xfe, 0xa3, 0xe7, 0xff, 0x70, 0x7b, 0x71, 0x47, 0x67, 0x92, 0x3d, 0xd5, 0x9c, 0xbe, 0x2e, 0x38,
		0xec, 0x54, 0xd0, 0x06, 0x68, 0xe3, 0xa3, 0xd1, 0x06, 0x4b, 0x70, 0xf6, 0x64, 0x46, 0x0f, 0xc9,
		0x41, 0x23, 0x04, 0x14, 0x02, 0xaa, 0xd4, 0x80, 0xca, 0x82, 0x48, 0xee, 0x1f, 0x6b, 0xc4, 0xd3,
		0x31, 0x52, 0x55, 0x48, 0x55, 0x31, 0x75, 0xd9, 0xf1, 0xd1, 0xd1, 0xe1, 0xe7, 0xcd, 0x4d, 0xb1,
		0x30, 0x4e, 0xbe, 0x01, 0x94, 0x48, 0x39, 0xc3, 0x56, 0xe0, 0x1c, 0x70, 0x4e, 0xa9, 0x9c, 0xb3,
		0x19, 0x9b, 0x2d, 0x07, 0xf3, 0x4f, 0x37, 0x95, 0x9e, 0xcc, 0x52, 0x7a, 0x60, 0x15, 0x1b, 0x23,
		0xbe, 0x10, 0x5f, 0xa5, 0xc6, 0x97, 0x88, 0xb2, 0x5e, 0x9e, 0x3b, 0xd1, 0x09, 0xb2, 0x1a, 0xa1,
		0x4d, 0x23, 0xca, 0x7a, 0x83, 0x87, 0x7c, 0x45, 0x4e, 0x0e, 0x39, 0xb9, 0x4f, 0x9f, 0x93, 0x93,
		0x94, 0x90, 0x9d, 0x6c, 0x39, 0x18, 0xb4, 0x02, 0x49, 0x80, 0x24, 0x4a, 0x25, 0x89, 0xa0, 0x23,
		0x22, 0x19, 0xc8, 0x97, 0x44, 0x74, 0x75, 0x48, 0x82, 0x30, 0x5d, 0x73, 0x9a, 0xf9, 0x57, 0x7d,
		0xf3, 0x52, 0x61, 0x72, 0xdf, 0x7d, 0x7e, 0xb4, 0xcd, 0x1d, 0x06, 0x0c, 0x77, 0x87, 0x6f, 0x99,
		0x7d, 0x62, 0xc5, 0x80, 0x51, 0x8f, 0x14, 0x9a, 0x1e, 0x25, 0x5c, 0xde, 0x3d, 0x8b, 0x5f, 0x65,
		0xc9, 0x6b, 0x38, 0x69, 0xf6, 0x38, 0xf9, 0xc2, 0x95, 0x6f, 0x31, 0x51, 0xfb, 0x53, 0xcd, 0x56,
		0x74, 0xd3, 0xc8, 0xbd, 0x56, 0x7c, 0x4c, 0x15, 0xd7, 0x28, 0x78, 0x46, 0xc6, 0x31, 0x2a, 0x7e,
		0x69, 0xe3, 0x96, 0x36, 0x5e, 0xe9, 0xe0, 0x94, 0x99, 0x9b, 0x5f, 0x04, 0x89, 0xa2, 0x7f, 0x17,
		0xbc, 0x82, 0x4e, 0x99, 0x53, 0xad, 0x69, 0xd4, 0xb9, 0x0f, 0xea, 0x04, 0x75, 0x52, 0x5c, 0x75,
		0xdc, 0xc0, 0x1f, 0x79, 0x84, 0x26, 0x81, 0xe5, 0xed, 0xf5, 0x8a, 0xe5, 0xec, 0xa3, 0x58, 0x4e,
		0x09, 0xee, 0xcd, 0xe6, 0xe6, 0x1c, 0xee, 0xae, 0x99, 0x9e, 0x26, 0x8e, 0x37, 0x35, 0x0c, 0xc6,
		0x0d, 0x75, 0x0e, 0xfb, 0x2f, 0xf4, 0x18, 0xfa, 0xe1, 0x7f, 0xc3, 0xa9, 0x11, 0x5b, 0xc0, 0x70,
		0x04, 0x0e, 0x5b, 0x00, 0x71, 0x05, 0x12, 0x7b, 0x40, 0xb1, 0x07, 0x16, 0x67, 0x80, 0xe9, 0x05,
		0x9a, 0x66, 0xc0, 0xe9, 0x4f, 0xdd, 0x16, 0xab, 0x21, 0x6a, 0x3e, 0x7d, 0x21, 0xc9, 0x9c, 0x96,
		0x54, 0x79, 0x47, 0x67, 0xa1, 0x92, 0x5a, 0xfc, 0x60, 0x49, 0x7a, 0x94, 0x52, 0x0c, 0x61, 0x16,
		0x30, 0xb5, 0x8a, 0x23, 0x00, 0xae, 0x00, 0x57, 0x80, 0x2b, 0xcd, 0x3d, 0x5c, 0x0b, 0xf1, 0x6a,
		0xbf, 0xc2, 0x78, 0x45, 0x2b, 0x0d, 0xb1, 0x24, 0xed, 0xa5, 0x5e, 0x28, 0x62, 0x19, 0x56, 0xed,
		0x01, 0xa8, 0x00, 0x54, 0x00, 0x2a, 0x8a, 0xb7, 0x90, 0x8b, 0x65, 0x2c, 0x8a, 0x9d, 0x13, 0x03,
		0x13, 0x66, 0x25, 0x41, 0x47, 0xff, 0x99, 0xb9, 0xeb, 0x36, 0x57, 0x89, 0x50, 0x26, 0x50, 0x99,
		0x31, 0xc7, 0x54, 0x32, 0x74, 0x6c, 0x8f, 0xb1, 0x98, 0xa5, 0xa1, 0x3b, 0x4f, 0x0f, 0x01, 0x43,
		0x29, 0x51, 0xdb, 0x43, 0x60, 0x5a, 0xdc, 0xa3, 0x94, 0xb1, 0xd8, 0x5a, 0x4f, 0xeb, 0x76, 0x59,
		0x72, 0xc5, 0x6a, 0xc6, 0x88, 0xbc, 0x3b, 0xc3, 0x0c, 0x84, 0xac, 0xec, 0xd6, 0x58, 0xc0, 0x9b,
		0x1a, 0xdb, 0x12, 0xe6, 0x12, 0xa6, 0xed, 0x24, 0x5f, 0x9b, 0x9a, 0x74, 0xd7, 0x2b, 0x68, 0x3a,
		0x6e, 0x6f, 0xb0, 0x1a, 0x59, 0x5c, 0xfd, 0x9b, 0xfa, 0x69, 0x37, 0xcf, 0x87, 0x57, 0xa0, 0x34,
		0xbe, 0x9e, 0x54, 0x37, 0x92, 0xe8, 0x28, 0x82, 0xbf, 0x0e, 0xb9, 0x8c, 0x22, 0xf8, 0x84, 0xd1,
		0x0e, 0x85, 0xd7, 0xa5, 0xed, 0x0e, 0x99, 0x99, 0x9f, 0x6b, 0x08, 0x5f, 0xe7, 0x36, 0x47, 0x99,
		0x2f, 0x5f, 0x72, 0x84, 0xd8, 0x7d, 0x8b, 0xaf, 0x0a, 0xe0, 0xc4, 0xdb, 0xd6, 0x0a, 0x6d, 0x9c,
		0x78, 0x6b, 0x5e, 0xf2, 0xfa, 0xdf, 0x01, 0x70, 0x02, 0x38, 0xb1, 0x2c, 0x45, 0xa4, 0xbb, 0xfe,
		0xe7, 0x75, 0x7a, 0x41, 0x44, 0xdd, 0x20, 0xbf, 0xd0, 0x65, 0xa6, 0xac, 0x21, 0x53, 0x85, 0x4c,
		0x15, 0x32, 0x55, 0x04, 0x6f, 0xd1, 0xdb, 0xf1, 0xbf, 0x90, 0x6b, 0x6a, 0x06, 0x36, 0x68, 0x27,
		0x02, 0xb8, 0xba, 0x52, 0x7b, 0x4e, 0xca, 0x93, 0x20, 0xb3, 0x3a, 0x47, 0xe5, 0x9f, 0xab, 0x32,
		0xcd, 0x59, 0x19, 0x52, 0x5b, 0xec, 0xdd, 0xae, 0x7f, 0x42, 0x01, 0xdd, 0x8d, 0xee, 0xe6, 0xe3,
		0x84, 0x76, 0x29, 0x6b, 0x8c, 0xe3, 0x0b, 0x63, 0x8c, 0xf5, 0x97, 0xc6, 0xd5, 0x33, 0x0c, 0xd3,
		0x14, 0x68, 0x2f, 0x68, 0xaf, 0xf5, 0x68, 0x2f, 0xdd, 0x69, 0xcf, 0x24, 0xf4, 0xbc, 0x24, 0x09,
		0x44, 0xe2, 0xca, 0xc4, 0x8b, 0xd2, 0x60, 0x00, 0x81, 0xa9, 0xf9, 0x80, 0x8f, 0xa3, 0x71, 0x8e,
		0xf1, 0x9d, 0x4a, 0xdc, 0x20, 0x67, 0x1a, 0xa8, 0x9c, 0x01, 0xcb, 0x1e, 0xb8, 0xdc, 0x01, 0x6c,
		0x2d, 0x90, 0xad, 0x05, 0xb4, 0x8d, 0xc0, 0x36, 0x0b, 0x70, 0x06, 0xd5, 0xc3, 0x33, 0xd9, 0x5a,
		0x44, 0x99, 0x5a, 0x97, 0x84, 0x2e, 0x0a, 0xcf, 0x53, 0x06, 0x53, 0x3c, 0x3b, 0x06, 0x78, 0x24,
		0xe3, 0xd4, 0x83, 0x71, 0xee, 0x20, 0x60, 0xc6, 0xb5, 0x19, 0xb3, 0xcc, 0x3b, 0x0a, 0xc6, 0x76,
		0x2d, 0xac, 0x66, 0x33, 0x45, 0xc8, 0xf4, 0x50, 0x31, 0xee, 0x34, 0x28, 0x6b, 0xa8, 0xf8, 0x2f,
		0x35, 0x2d, 0x75, 0xf4, 0xb6, 0xaa, 0x61, 0xa5, 0xbd, 0x56, 0x94, 0x36, 0xce, 0xe3, 0xf0, 0xc2,
		0x56, 0x29, 0x79, 0x1d, 0x7b, 0x33, 0x60, 0xe6, 0x99, 0x30, 0x8f, 0x93, 0xb5, 0xd7, 0x72, 0x0b,
		0x73, 0x10, 0xb9, 0x8f, 0x49, 0xec, 0x75, 0xf4, 0xaf, 0xbf, 0x5f, 0xa8, 0x03, 0x66, 0x4d, 0x43,
		0xaa, 0x43, 0xaa, 0x43, 0xaa, 0x43, 0xaa, 0x43, 0xaa, 0x43, 0xaa, 0x43, 0xaa, 0x43, 0xaa, 0x57,
		0x53, 0xaa, 0xaf, 0x4b, 0x87, 0x75, 0x82, 0xd4, 0xf7, 0x92, 0x0e, 0xaf, 0x02, 0x1b, 0x1b, 0x85,
		0xf6, 0x82, 0xf6, 0x82, 0xf6, 0x82, 0xf6, 0x82, 0xf6, 0x82, 0xf6, 0x82, 0xf6, 0x82, 0xf6, 0x82,
		0xf6, 0x2a, 0x6a, 0x2f, 0x91, 0x24, 0x71, 0xc2, 0xab, 0xbc, 0x72, 0x93, 0xd0, 0x5d, 0xd0, 0x5d,
		0xd0, 0x5d, 0xd0, 0x5d, 0xd0, 0x5d, 0xd0, 0x5d, 0xd0, 0x5d, 0xd0, 0x5d, 0xd0, 0x5d, 0x45, 0xdd,
		0xd5, 0xf5, 0x53, 0x1b, 0xda, 0xab, 0x60, 0x16, 0xfa, 0x0b, 0xfa, 0x0b, 0xfa, 0x0b, 0xfa, 0x0b,
		0xfa, 0x0b, 0xfa, 0x0b, 0xfa, 0x0b, 0xfa, 0x0b, 0xfa, 0xab, 0xa8, 0xbf, 0x7a, 0x59, 0x28, 0x03,
		0x3b, 0x7b, 0xbf, 0xde, 0x99, 0x86, 0x0e, 0x83, 0x0e, 0x83, 0x0e, 0x83, 0x0e, 0x83, 0x0e, 0x83,
		0x0e, 0x83, 0x0e, 0x83, 0x0e, 0x83, 0x0e, 0x2b, 0xea, 0xb0, 0xd8, 0x97, 0x82, 0x59, 0x7f, 0xe5,
		0x26, 0xa1, 0xbb, 0xa0, 0xbb, 0xa0, 0xbb, 0xa0, 0xbb, 0xa0, 0xbb, 0xa0, 0xbb, 0xa0, 0xbb, 0xa0,
		0xbb, 0xa0, 0xbb, 0x8a, 0xba, 0x8b, 0x3d, 0xeb, 0x85, 0x5c, 0x17, 0x34, 0x17, 0x34, 0x17, 0x34,
		0x17, 0x34, 0x17, 0x34, 0x17, 0x34, 0x17, 0x34, 0x17, 0x34, 0xd7, 0x8c, 0xe6, 0xca, 0x22, 0x4b,
		0x2b, 0x8e, 0x53, 0x86, 0xa1, 0xc1, 0xa0, 0xc1, 0xa0, 0xc1, 0xa0, 0xc1, 0xa0, 0xc1, 0xa0, 0xc1,
		0xa0, 0xc1, 0xa0, 0xc1, 0xa0, 0xc1, 0xa6, 0x35, 0xd8, 0x8f, 0x28, 0xfe, 0x33, 0x72, 0xfb, 0x49,
		0x2c, 0x63, 0x6e, 0x15, 0x36, 0x65, 0x1a, 0x3a, 0x0c, 0x3a, 0x0c, 0x3a, 0x0c, 0x3a, 0x0c, 0x3a,
		0x0c, 0x3a, 0x0c, 0x3a, 0x0c, 0x3a, 0x0c, 0x3a, 0x6c, 0x3c, 0x2c, 0xa1, 0x97, 0x4a, 0xd7, 0x0f,
		0x85, 0x97, 0xf0, 0x09, 0xb0, 0x82, 0x4d, 0x28, 0x2f, 0x28, 0x2f, 0x28, 0xaf, 0x0a, 0x29, 0x2f,
		0x19, 0xf4, 0x84, 0x0c, 0xfc, 0x1f, 0x69, 0xe5, 0xb4, 0xd7, 0xbf, 0xa3, 0x37, 0x5e, 0x70, 0x22,
		0x2f, 0x8a, 0x53, 0xe1, 0xc7, 0x91, 0x71, 0xc5, 0x40, 0x68, 0x3a, 0x68, 0x3a, 0x68, 0x3a, 0x68,
		0xba, 0xf5, 0x69, 0x3a, 0x5c, 0xb9, 0xc0, 0x25, 0x13, 0x70, 0xe5, 0x02, 0xa7, 0xec, 0x8f, 0x33,
		0x69, 0xed, 0xce, 0x85, 0x39, 0xb6, 0x31, 0x0d, 0xc0, 0x34, 0x00, 0xd3, 0x80, 0x0a, 0x4d, 0x03,
		0x90, 0x80, 0x85, 0x58, 0x87, 0x58, 0x87, 0x58, 0x87, 0x58, 0xe7, 0xf8, 0x7e, 0x53, 0x25, 0xc6,
		0x7f, 0xeb, 0xc2, 0x94, 0x55, 0xa8, 0x2f, 0xa8, 0x2f, 0xa8, 0x2f, 0xa8, 0x2f, 0xa8, 0x2f, 0xa8,
		0x2f, 0xa8, 0x2f, 0xa8, 0x2f, 0xa8, 0xaf, 0x29, 0xf5, 0xc5, 0x5d, 0xfb, 0xb7, 0x60, 0x13, 0xca,
		0x0b, 0xca, 0x0b, 0xca, 0x0b, 0xca, 0x0b, 0xca, 0x0b, 0xca, 0x0b, 0xca, 0x0b, 0xca, 0x0b, 0xca,
		0x6b, 0x4a, 0x79, 0xd9, 0xaa, 0xfc, 0x3b, 0xc7, 0x36, 0x94, 0x18, 0x94, 0x18, 0x94, 0x18, 0x94,
		0x18, 0x94, 0x18, 0x94, 0x18, 0x94, 0x18, 0x94, 0x18, 0x94, 0xd8, 0x94, 0x12, 0xe3, 0xae, 0xfd,
		0x5b, 0xb0, 0x09, 0xe5, 0x05, 0xe5, 0x05, 0xe5, 0x05, 0xe5, 0x05, 0xe5, 0x05, 0xe5, 0x05, 0xe5,
		0x05, 0xe5, 0x05, 0xe5, 0x35, 0xa5, 0xbc, 0xf8, 0x33, 0x5f, 0xc8, 0x77, 0x41, 0x75, 0x41, 0x75,
		0x41, 0x75, 0x41, 0x75, 0x41, 0x75, 0x41, 0x75, 0x41, 0x75, 0x41, 0x75, 0xcd, 0xaa, 0x2e, 0x3b,
		0xf5, 0x7f, 0x67, 0x2c, 0x43, 0x85, 0x41, 0x85, 0x41, 0x85, 0x41, 0x85, 0x41, 0x85, 0x41, 0x85,
		0x41, 0x85, 0x41, 0x85, 0x7d, 0x34, 0x15, 0xb6, 0x55, 0xa2, 0xcf, 0x9b, 0x17, 0x43, 0x31, 0x54,
		0x79, 0xb3, 0xc5, 0x4f, 0xe2, 0xbe, 0x48, 0xbc, 0x81, 0x6f, 0x79, 0xa1, 0xa9, 0xd4, 0x63, 0x2f,
		0x76, 0xc2, 0x54, 0xe4, 0xc4, 0x00, 0xa0, 0xd0, 0xdd, 0x65, 0x45, 0x54, 0x5b, 0x33, 0xa2, 0xea,
		0x51, 0x14, 0xcb, 0x61, 0x8f, 0x1a, 0x11, 0x87, 0x93, 0xfa, 0xcf, 0xa2, 0xe7, 0xf5, 0x3d, 0xf9,
		0x3c, 0x78, 0xfb, 0xdd, 0xb8, 0x2f, 0x22, 0x7f, 0x38, 0xe7, 0x70, 0x83, 0x81, 0xda, 0xea, 0x7a,
		0xbe, 0x48, 0x77, 0xe7, 0xfd, 0x75, 0x37, 0xcd, 0x1e, 0x0b, 0xbf, 0x2f, 0xfe, 0xb4, 0x9b, 0x4a,
		0x4f, 0x8a, 0xdd, 0x5c, 0xb0, 0x99, 0x4c, 0xa5, 0x9c, 0x54, 0x26, 0x99, 0x2f, 0xa3, 0x5c, 0x02,
		0x36, 0x47, 0xdf, 0xf0, 0xd0, 0x2a, 0x7c, 0xdd, 0xc3, 0xf9, 0xe8, 0x8b, 0xb6, 0xca, 0x19, 0x37,
		0x8d, 0xc0, 0x72, 0x3a, 0x22, 0xf5, 0x93, 0xa0, 0x6f, 0x34, 0x60, 0x63, 0x29, 0x5c, 0x34, 0xa6,
		0xe9, 0x3f, 0x66, 0xe2, 0xc0, 0x78, 0x5e, 0xca, 0x31, 0x1f, 0x65, 0x9b, 0x87, 0x72, 0xcd, 0x3f,
		0xd9, 0xe7, 0x9d, 0xec, 0xf3, 0x4d, 0xce, 0x79, 0x66, 0xb9, 0x0a, 0xc2, 0x78, 0x3e, 0x39, 0xf6,
		0x96, 0x54, 0x26, 0x41, 0xf4, 0x64, 0xe2, 0x2e, 0x79, 0xec, 0xec, 0x9f, 0x56, 0x18, 0x6f, 0x44,
		0xe4, 0x3d, 0x86, 0xa2, 0x63, 0x8e, 0x35, 0x23, 0x43, 0x9a, 0xe3, 0x76, 0x21, 0xba, 0x5e, 0x16,
		0x0e, 0xfd, 0x6d, 0xe0, 0xbe, 0x80, 0x2b, 0xc0, 0x15, 0xe0, 0x8a, 0xe2, 0x2d, 0x8f, 0x71, 0x1c,
		0x0a, 0x2f, 0xe2, 0xc0, 0xab, 0xfd, 0x0a, 0xe3, 0x55, 0xd0, 0x0d, 0xa2, 0x8e, 0xf8, 0x65, 0x8e,
		0x57, 0x23, 0x43, 0x00, 0x1a, 0x00, 0x0d, 0x80, 0x86, 0xe0, 0x2d, 0x59, 0x10, 0xc9, 0xc3, 0x03,
		0x06, 0x9c, 0x39, 0x31, 0x30, 0xc1, 0x93, 0x4c, 0x67, 0x58, 0x75, 0xe0, 0x4c, 0x9e, 0x33, 0x67,
		0x62, 0xb9, 0x93, 0xe5, 0x36, 0xd2, 0xac, 0x0c, 0xc9, 0x71, 0xd6, 0xa4, 0xb8, 0xad, 0x21, 0xa8,
		0x1d, 0x9c, 0xd5, 0xce, 0x8e, 0x4f, 0x0e, 0xce, 0x8e, 0x2a, 0x3c, 0x16, 0x6b, 0x4a, 0x31, 0xb7,
		0x3f, 0x79, 0x8a, 0x99, 0xbf, 0xbe, 0x36, 0x52, 0xcd, 0x0a, 0xdd, 0x8e, 0xcc, 0x3e, 0xba, 0x9b,
		0xb9, 0xbb, 0xb7, 0xca, 0x81, 0x3f, 0xad, 0x79, 0x13, 0xd3, 0xac, 0xc9, 0x64, 0xce, 0x54, 0xc8,
		0xf1, 0xec, 0x61, 0xde, 0x85, 0x79, 0x17, 0xe6, 0x5d, 0x98, 0x77, 0x61, 0xde, 0x85, 0x79, 0x17,
		0xe6, 0x5d, 0x9b, 0x34, 0xef, 0x2a, 0x45, 0xae, 0xbc, 0xdd, 0x2f, 0xf9, 0x9c, 0xa3, 0x8d, 0xa1,
		0x68, 0x29, 0x1a, 0x83, 0xec, 0x80, 0xec, 0x80, 0xec, 0x20, 0x78, 0x0b, 0xcf, 0x6d, 0x92, 0x0c,
		0x1b, 0xa9, 0xb9, 0x6f, 0x8f, 0x84, 0x96, 0x81, 0x96, 0xd9, 0x28, 0x2d, 0x63, 0x6f, 0x23, 0x35,
		0x54, 0x0d, 0xb2, 0xc9, 0x9b, 0x98, 0x6f, 0x43, 0x7a, 0x13, 0xdd, 0x8d, 0x6c, 0xb2, 0x21, 0xfc,
		0x69, 0x4d, 0xcf, 0xe2, 0xa7, 0xc0, 0xf7, 0x42, 0x86, 0xa9, 0x59, 0x6e, 0x08, 0xd3, 0x32, 0x4c,
		0xcb, 0x30, 0x2d, 0x23, 0x78, 0xcb, 0xfa, 0xb7, 0xfb, 0x41, 0x31, 0x81, 0xc2, 0x41, 0xe1, 0xe8,
		0x6e, 0x28, 0x26, 0x95, 0x37, 0xcc, 0x8f, 0xa6, 0x19, 0xca, 0xa5, 0xa1, 0x15, 0x68, 0x25, 0x68,
		0x25, 0x68, 0x25, 0x82, 0xb7, 0xac, 0xfd, 0x24, 0x17, 0xa4, 0x12, 0xb8, 0x1b, 0xdc, 0xbd, 0xb1,
		0xdc, 0x3d, 0xe8, 0x7e, 0x37, 0x95, 0x9e, 0xcc, 0x52, 0x73, 0x0a, 0x2f, 0x1a, 0x03, 0x93, 0x83,
		0xc9, 0xc1, 0xe4, 0x04, 0x6f, 0x11, 0x51, 0xd6, 0xcb, 0xa1, 0x90, 0x83, 0xce, 0x6b, 0x06, 0x36,
		0x1a, 0x51, 0xd6, 0x1b, 0xbc, 0xd4, 0x2b, 0x24, 0x01, 0x24, 0x01, 0x24, 0x01, 0xba, 0x1b, 0x0a,
		0xcc, 0xc6, 0xf7, 0x10, 0x9d, 0xc0, 0xb4, 0xde, 0x91, 0xc5, 0x3a, 0x47, 0xb4, 0x91, 0x51, 0xef,
		0x25, 0xb5, 0x4f, 0x2a, 0xf6, 0xe3, 0xc0, 0xf5, 0xa9, 0xe7, 0x3c, 0x9c, 0xcb, 0x20, 0x95, 0x75,
		0x29, 0x13, 0x52, 0x8f, 0x3b, 0x57, 0x41, 0xd4, 0x18, 0x50, 0x47, 0x34, 0x64, 0xb4, 0x28, 0x0b,
		0xc3, 0x1d, 0x42, 0x63, 0xef, 0x97, 0x7e, 0xe3, 0x9b, 0xa4, 0x23, 0x12, 0xd1, 0xf9, 0xf6, 0x92,
		0x37, 0x65, 0xed, 0x40, 0x4d, 0x07, 0xb4, 0xe2, 0x78, 0x04, 0xa8, 0x52, 0xaa, 0xa0, 0xa5, 0xe6,
		0xc2, 0xab, 0x1d, 0x72, 0xf9, 0x27, 0x56, 0xf4, 0x34, 0xb5, 0x87, 0xb9, 0x7a, 0x76, 0xf9, 0xcb,
		0x2f, 0x7e, 0xa5, 0xf9, 0xff, 0xb2, 0xe0, 0x25, 0x47, 0xf1, 0xb7, 0x24, 0xd1, 0xab, 0x16, 0x6e,
		0xa4, 0xf0, 0x22, 0x85, 0x93, 0x5a, 0xf8, 0x2c, 0x7a, 0x3f, 0xc5, 0xc1, 0xd3, 0x1f, 0xb4, 0x25,
		0x3e, 0xbf, 0xc8, 0xc7, 0xe7, 0x8f, 0xec, 0xec, 0xb8, 0x4d, 0xff, 0xe6, 0xdd, 0x1b, 0xae, 0x7a,
		0x33, 0xea, 0x1b, 0x4d, 0x3f, 0xd4, 0xe4, 0xab, 0x0b, 0x5f, 0xeb, 0x84, 0x61, 0xa7, 0x3f, 0xf3,
		0x65, 0x93, 0xbd, 0x15, 0x83, 0x7f, 0x7d, 0xf7, 0x90, 0xa3, 0x99, 0xcf, 0xbb, 0x5f, 0x2f, 0x4a,
		0x09, 0x2c, 0x9b, 0xea, 0x17, 0xa7, 0xf0, 0x73, 0xbe, 0x4a, 0x65, 0x72, 0xae, 0x3c, 0xe9, 0x56,
		0x9e, 0x4c, 0xbf, 0x9f, 0x24, 0x0f, 0x1f, 0x8c, 0x38, 0x90, 0x17, 0xc1, 0xfc, 0xd0, 0x72, 0xfc,
		0x51, 0x2f, 0x2d, 0x78, 0x9b, 0x49, 0x05, 0xea, 0xe1, 0xe7, 0x16, 0x45, 0xf8, 0xdc, 0x21, 0x50,
		0xce, 0xce, 0xa8, 0x64, 0x5f, 0x14, 0x86, 0x86, 0x9a, 0x3f, 0x21, 0xe7, 0x47, 0xc8, 0xf9, 0x0f,
		0xb5, 0xa1, 0xd3, 0x43, 0xd5, 0x45, 0x43, 0x3a, 0x19, 0xda, 0x67, 0x2f, 0x4d, 0x83, 0xd4, 0x0d,
		0x56, 0x57, 0x42, 0x9b, 0x0c, 0xf3, 0xa4, 0xcd, 0x8a, 0x37, 0x53, 0x4b, 0xd8, 0x29, 0x27, 0xe6,
		0x28, 0x09, 0x38, 0x82, 0x2b, 0xe8, 0xa6, 0xd4, 0xb4, 0x53, 0x67, 0xda, 0x29, 0x32, 0x9a, 0xab,
		0xf0, 0xa8, 0x0e, 0xe5, 0x24, 0x16, 0x7d, 0xd9, 0x49, 0x71, 0x79, 0x69, 0x89, 0xc4, 0xd8, 0x51,
		0xf1, 0x6c, 0x57, 0xaa, 0xbc, 0xc2, 0x1c, 0xf7, 0x7e, 0x6b, 0x08, 0x1f, 0x87, 0x8f, 0x1b, 0x3a,
		0x09, 0x35, 0xf9, 0xaa, 0x98, 0x64, 0xd5, 0x0b, 0x0c, 0xd5, 0xca, 0x97, 0xc4, 0x0a, 0x97, 0xc4,
		0x4a, 0x96, 0x88, 0x9b, 0x4f, 0x19, 0x37, 0xea, 0xdb, 0x37, 0x15, 0xb7, 0x69, 0xea, 0xc5, 0xc0,
		0xb3, 0x08, 0xc3, 0xd8, 0x95, 0x41, 0x4f, 0x24, 0xea, 0x71, 0x50, 0x6c, 0x04, 0xe7, 0x86, 0x73,
		0xcf, 0xf4, 0x78, 0x16, 0x44, 0x52, 0xe9, 0xb4, 0x28, 0xe1, 0x54, 0x28, 0xf1, 0xb4, 0x26, 0x2d,
		0x0f, 0x49, 0x4e, 0x15, 0x6b, 0x2e, 0xc1, 0xeb, 0x9e, 0xa6, 0x34, 0x39, 0x9f, 0xf7, 0x4a, 0xcb,
		0xaa, 0x96, 0xde, 0x15, 0xe6, 0xa7, 0x1a, 0x8d, 0x7a, 0x87, 0x29, 0xa3, 0xd9, 0xb6, 0x00, 0xce,
		0x69, 0xd6, 0xef, 0x27, 0x22, 0x4d, 0x5d, 0x19, 0xfe, 0x74, 0xbd, 0xce, 0x4f, 0x91, 0xc8, 0x20,
		0x15, 0x79, 0xf4, 0x2b, 0x62, 0xf5, 0x12, 0x1b, 0x80, 0x6e, 0x40, 0xf7, 0x4c, 0x8f, 0x07, 0x1d,
		0x11, 0xc9, 0x40, 0xbe, 0x24, 0xa2, 0x4b, 0xd1, 0x26, 0x0a, 0x11, 0xeb, 0x34, 0x73, 0xd3, 0xdf,
		0xbc, 0x94, 0x30, 0x4e, 0xa3, 0x07, 0xbb, 0xbc, 0xbc, 0xb8, 0x7d, 0xb8, 0xbf, 0xfc, 0x5d, 0x75,
		0x98, 0x86, 0xf0, 0x42, 0xdb, 0x2a, 0x41, 0xc4, 0xbd, 0xd1, 0x93, 0x9d, 0xff, 0x56, 0x6f, 0xb5,
		0x9a, 0xad, 0x87, 0xe6, 0x85, 0x63, 0x03, 0x94, 0x35, 0x9f, 0xea, 0xf6, 0xe6, 0xee, 0xbe, 0x62,
		0x8f, 0xd4, 0xfa, 0xa3, 0x75, 0xdf, 0xb8, 0x7a, 0xb8, 0xae, 0x5f, 0x35, 0x2a, 0xd7, 0x53, 0x17,
		0x8d, 0xd6, 0xf9, 0x5d, 0xf3, 0xf6, 0xbe, 0x79, 0x73, 0x5d, 0xc1, 0x2e, 0xab, 0xf6, 0xd3, 0x9d,
		0xd7, 0x6f, 0xeb, 0xdf, 0x9a, 0x97, 0xcd, 0xfb, 0x66, 0xa3, 0x55, 0xa5, 0xc7, 0xbb, 0xaa, 0x5f,
		0xd7, 0xff, 0xd5, 0xb8, 0x6a, 0x5c, 0xdf, 0x3f, 0xd4, 0x2f, 0x2e, 0xee, 0x1a, 0x2d, 0xca, 0xd3,
		0x29, 0x7d, 0xb2, 0x6d, 0x19, 0xbf, 0x49, 0x0b, 0xeb, 0x5a, 0x0b, 0xea, 0x5a, 0x0b, 0xe9, 0xb4,
		0x05, 0x74, 0x4d, 0xf1, 0xf3, 0x92, 0x4a, 0xd1, 0x73, 0x29, 0xd7, 0x21, 0x4d, 0x44, 0xcf, 0x6c,
		0x5b, 0x88, 0x1d, 0x88, 0x1d, 0x8e, 0x04, 0xbd, 0xc2, 0x67, 0x2f, 0x45, 0xf4, 0x34, 0x5c, 0xe3,
		0xc5, 0x4c, 0xf5, 0x63, 0xcd, 0x54, 0x0f, 0x8e, 0x30, 0x31, 0x2d, 0x62, 0xb3, 0xd2, 0x91, 0xc6,
		0xf7, 0xa0, 0xac, 0x70, 0x82, 0x11, 0x68, 0x0c, 0x34, 0x06, 0x1a, 0x03, 0x8d, 0x81, 0xc6, 0x2b,
		0xfe, 0xc5, 0xde, 0x1e, 0xbb, 0x01, 0x42, 0xec, 0x0e, 0xff, 0x97, 0xef, 0x65, 0x52, 0xdd, 0x21,
		0x37, 0x67, 0x0f, 0x58, 0x61, 0x4b, 0xdb, 0xca, 0x9d, 0x53, 0x85, 0xcf, 0x62, 0xf7, 0xd4, 0xe6,
		0xec, 0x9e, 0x9a, 0x6c, 0xbe, 0x54, 0x96, 0x03, 0xaa, 0x7b, 0x94, 0x57, 0x0c, 0x38, 0xc4, 0xc0,
		0x26, 0x88, 0x81, 0x55, 0x0e, 0x34, 0xfe, 0xe0, 0x8a, 0x1d, 0x96, 0x0b, 0x07, 0x68, 0xe9, 0x8e,
		0x4b, 0x4d, 0x97, 0x22, 0xbb, 0x96, 0x8e, 0x8b, 0x19, 0xb8, 0x9a, 0xae, 0xcb, 0x19, 0xbb, 0x9e,
		0xb1, 0x0b, 0x9a, 0xb9, 0x22, 0x91, 0x93, 0x15, 0xc7, 0x4c, 0xd5, 0x45, 0xc7, 0x0d, 0x74, 0x2f,
		0xce, 0x35, 0xbc, 0x30, 0xd7, 0xf0, 0xa2, 0x5c, 0x5d, 0xd5, 0xa5, 0x7b, 0x66, 0xdc, 0xe4, 0xac,
		0xb8, 0x41, 0x4c, 0x98, 0xc6, 0x06, 0x5b, 0x8c, 0xb0, 0xc5, 0x0a, 0x4f, 0xcc, 0xd0, 0x62, 0x47,
		0x63, 0x2a, 0xb0, 0x6d, 0x74, 0xde, 0x9b, 0xa1, 0xba, 0x9d, 0x66, 0x55, 0xbb, 0x57, 0x2b, 0xf3,
		0x22, 0xad, 0xa2, 0x4f, 0x26, 0xc5, 0x9e, 0x10, 0xde, 0x08, 0xef, 0x4d, 0x08, 0x6f, 0x2f, 0x15,
		0x93, 0x53, 0x4f, 0xae, 0xda, 0x66, 0x83, 0x85, 0x91, 0xae, 0x71, 0x9f, 0x91, 0x73, 0x3b, 0x9e,
		0xf4, 0xfa, 0x6e, 0xd0, 0xfd, 0x5a, 0x38, 0x81, 0xf5, 0xee, 0x17, 0xf9, 0xcf, 0xc3, 0x58, 0xdc,
		0x88, 0x03, 0xbc, 0xfc, 0xe7, 0x4f, 0x27, 0xc9, 0x80, 0xb9, 0x87, 0x24, 0x97, 0x65, 0x08, 0xe8,
		0xaf, 0xaa, 0xf0, 0x9a, 0x34, 0x58, 0xd5, 0x81, 0x53, 0x22, 0x8c, 0x62, 0x86, 0xf0, 0x19, 0x66,
		0x08, 0x64, 0xd8, 0x9b, 0x1c, 0xc4, 0x14, 0x5e, 0x97, 0x86, 0x71, 0x3a, 0xd8, 0x36, 0xc6, 0xb4,
		0x2f, 0x5f, 0xf2, 0x98, 0xdc, 0x55, 0x47, 0x2d, 0xa6, 0xc0, 0x14, 0xc1, 0xd3, 0xf3, 0x63, 0x9c,
		0xa4, 0x1a, 0xd1, 0x39, 0x6e, 0x6a, 0x79, 0x12, 0x7f, 0x80, 0x10, 0xc5, 0x24, 0xfe, 0xbd, 0xc3,
		0x1a, 0x88, 0xf4, 0x91, 0x05, 0x3d, 0xa1, 0xbe, 0x0f, 0xa1, 0x0e, 0xa1, 0x6e, 0x4b, 0xa8, 0x53,
		0xc3, 0x61, 0x92, 0x86, 0xf5, 0xfa, 0xde, 0x63, 0x10, 0x06, 0x32, 0x10, 0x0c, 0x15, 0x0f, 0xa7,
		0xac, 0x99, 0x95, 0x3c, 0xdc, 0x37, 0x2d, 0x79, 0x78, 0x50, 0x8d, 0x92, 0x87, 0x9a, 0x61, 0xc4,
		0x15, 0x4e, 0xec, 0x61, 0xc5, 0x1e, 0x5e, 0xbc, 0x61, 0xa6, 0x17, 0x6e, 0x9a, 0x61, 0x67, 0x1c,
		0x7e, 0xb3, 0x61, 0xf8, 0x62, 0x3e, 0xd2, 0x33, 0xc1, 0xf8, 0x62, 0x3a, 0xd4, 0x66, 0x21, 0x69,
		0xcc, 0x68, 0x36, 0x42, 0xd4, 0x42, 0xa8, 0x72, 0x87, 0xac, 0xb5, 0xd0, 0xb5, 0x16, 0xc2, 0x76,
		0x42, 0xd9, 0x2c, 0xa4, 0x0d, 0x43, 0x9b, 0x2d, 0xc4, 0x27, 0xa1, 0x4e, 0x5b, 0xf8, 0x54, 0x0f,
		0x77, 0xca, 0xc2, 0x68, 0x49, 0x21, 0xcf, 0x1e, 0xfa, 0x36, 0x20, 0xc0, 0x22, 0x14, 0xd8, 0x82,
		0x04, 0xeb, 0xd0, 0x60, 0x1d, 0x22, 0xec, 0x42, 0x05, 0x0f, 0x64, 0x30, 0x41, 0x87, 0x69, 0xbe,
		0x76, 0xa5, 0x5d, 0xed, 0x7c, 0xee, 0x38, 0x13, 0x33, 0xfe, 0xdb, 0x6e, 0x51, 0xc1, 0x4f, 0x7e,
		0x78, 0x21, 0xa5, 0x7e, 0xed, 0x8f, 0x0a, 0xc7, 0x3d, 0xb0, 0x46, 0xd7, 0xb4, 0x2c, 0x4e, 0x12,
		0xe8, 0x5f, 0xdb, 0xb2, 0x08, 0x83, 0xf7, 0x80, 0xc1, 0xc0, 0x60, 0x60, 0x30, 0x8f, 0xcf, 0x1a,
		0x17, 0xa8, 0x5f, 0xe8, 0xb1, 0xf4, 0xd4, 0xbf, 0xb2, 0x08, 0x3b, 0x61, 0xb4, 0x59, 0x58, 0x3a,
		0x18, 0xd6, 0x2a, 0xde, 0xa5, 0xaf, 0x77, 0x56, 0x1b, 0xd7, 0xdf, 0x2a, 0x30, 0xb3, 0x03, 0xfb,
		0x9b, 0xd9, 0x8a, 0xab, 0xeb, 0x03, 0x20, 0x3b, 0x90, 0xfd, 0x93, 0x22, 0x3b, 0xd7, 0x04, 0x7d,
		0x6c, 0x50, 0x77, 0xdb, 0xa7, 0x72, 0x24, 0xe8, 0x6d, 0x0b, 0x2d, 0x59, 0x36, 0x5a, 0x93, 0x8f,
		0x36, 0xc1, 0xa6, 0x04, 0xd0, 0xb1, 0x0d, 0x3e, 0xa5, 0x81, 0x50, 0x69, 0x60, 0x54, 0x0e, 0x28,
		0xf1, 0x82, 0x13, 0x33, 0x48, 0xd9, 0x93, 0xa1, 0x33, 0x1e, 0x6f, 0x7e, 0x6b, 0xf4, 0x4a, 0xf5,
		0xb2, 0xbf, 0x55, 0xcd, 0x01, 0x63, 0x1c, 0x2c, 0xde, 0x2c, 0x81, 0xcd, 0x6c, 0x01, 0xe0, 0x1f,
		0xf0, 0x0f, 0xf8, 0x07, 0xfc, 0x6b, 0x55, 0x77, 0xd3, 0xa6, 0x80, 0x23, 0x0b, 0xb6, 0xb5, 0xaa,
		0xc7, 0x69, 0x77, 0xd4, 0xb0, 0xda, 0xdc, 0xfb, 0xf2, 0x56, 0x7f, 0xd8, 0x0a, 0x32, 0x8d, 0x5a,
		0x75, 0xd4, 0xff, 0xfe, 0xb2, 0x66, 0x79, 0xaa, 0xdf, 0xee, 0xff, 0x73, 0xf3, 0x30, 0xac, 0xa7,
		0x76, 0x55, 0x3f, 0x7f, 0xb8, 0x6b, 0x5c, 0xd6, 0xff, 0x70, 0xac, 0x7d, 0xf1, 0xeb, 0xce, 0xa6,
		0xf7, 0xd6, 0x7f, 0x2e, 0xeb, 0xd7, 0x0f, 0xf5, 0xf3, 0xf3, 0x46, 0xab, 0xf5, 0x70, 0x7b, 0xd3,
		0xbc, 0xbe, 0x47, 0x67, 0x2d, 0xee, 0xac, 0x9b, 0xfb, 0xdf, 0x1a, 0x77, 0xe8, 0xa0, 0xc5, 0x1d,
		0x74, 0x77, 0xf3, 0xef, 0x7b, 0xf4, 0xd0, 0xb2, 0x1e, 0x1a, 0x80, 0xd2, 0xb7, 0xbb, 0xe6, 0xc5,
		0xbf, 0x1a, 0xe8, 0xa5, 0x25, 0x18, 0xde, 0xb8, 0x6c, 0xdc, 0xfe, 0x76, 0x73, 0x8d, 0x4e, 0x5a,
		0xd2, 0x49, 0x17, 0x37, 0xe7, 0xad, 0x66, 0xeb, 0xe1, 0xbc, 0xfe, 0xed, 0xb2, 0xf1, 0x70, 0xd1,
		0xf8, 0xbd, 0x79, 0x8e, 0xee, 0x5a, 0xd2, 0x5d, 0xad, 0xfb, 0xfa, 0x7d, 0xf3, 0xe6, 0xfa, 0xe1,
		0xe6, 0xfa, 0x12, 0x8a, 0x60, 0x49, 0x3f, 0x9d, 0x3f, 0xfc, 0x7e, 0x59, 0xbf, 0x46, 0x0f, 0x2d,
		0xf1, 0x24, 0xf4, 0xd0, 0x2a, 0x1d, 0xd0, 0xb8, 0x6d, 0xd4, 0xed, 0x2a, 0x01, 0x2b, 0x96, 0xdb,
		0x55, 0x9f, 0xee, 0x63, 0x03, 0x1a, 0xc9, 0x6e, 0x19, 0x1b, 0xd0, 0x34, 0x2e, 0x56, 0xb6, 0x37,
		0x28, 0xeb, 0xdd, 0x8a, 0xbc, 0xfa, 0xe2, 0x58, 0x65, 0x53, 0x5a, 0xf7, 0x39, 0x2f, 0xb4, 0x66,
		0x72, 0xcf, 0xf3, 0x62, 0xa3, 0x06, 0xf7, 0x3f, 0x2f, 0x34, 0xaa, 0x75, 0x2f, 0xb4, 0xad, 0xf1,
		0x64, 0x0e, 0xcb, 0x32, 0xc2, 0xd1, 0x61, 0xd9, 0xa8, 0x53, 0xbc, 0xa2, 0xf7, 0x32, 0xec, 0xf4,
		0x1f, 0x26, 0x77, 0x51, 0x5f, 0xe7, 0x0f, 0xf0, 0x70, 0x3e, 0xf9, 0xce, 0xad, 0xf5, 0x84, 0x6c,
		0xb9, 0x47, 0x89, 0x98, 0x9c, 0xc1, 0x9a, 0x13, 0xe8, 0x8d, 0x02, 0xbd, 0x0f, 0x35, 0xfa, 0xcf,
		0xf4, 0x68, 0x05, 0xcf, 0x51, 0x0a, 0xb6, 0x03, 0x8c, 0x7b, 0x38, 0xc0, 0xf8, 0x8e, 0xf5, 0x70,
		0x80, 0xf1, 0x53, 0xa1, 0x8e, 0xc1, 0x91, 0x83, 0x92, 0xf0, 0x26, 0x4b, 0x65, 0xdc, 0x73, 0x65,
		0xf8, 0x93, 0xe3, 0xec, 0x74, 0xc1, 0x18, 0x8e, 0x4e, 0x03, 0x79, 0x3e, 0x09, 0xf2, 0x18, 0x1f,
		0x9d, 0x96, 0xe1, 0x4f, 0xbe, 0x33, 0xd3, 0x03, 0x63, 0x38, 0x2c, 0x5d, 0x42, 0x70, 0x72, 0x07,
		0xa9, 0xb5, 0x60, 0xb5, 0x16, 0xb4, 0x76, 0x82, 0xb7, 0x1a, 0x19, 0x0a, 0x1c, 0x96, 0xae, 0x42,
		0xe8, 0xdb, 0x80, 0x00, 0x8b, 0x50, 0x60, 0x0b, 0x12, 0xac, 0x43, 0x83, 0x75, 0x88, 0xb0, 0x0b,
		0x15, 0x7c, 0x69, 0xd1, 0xed, 0xcf, 0x96, 0xab, 0x9e, 0x48, 0xf6, 0x5d, 0x19, 0xfe, 0xfc, 0x80,
		0x87, 0xa4, 0xe3, 0x2c, 0xe0, 0x07, 0xdf, 0x81, 0x51, 0x1c, 0x91, 0x06, 0xf2, 0x02, 0x79, 0x2b,
		0x89, 0xbc, 0x38, 0x22, 0xfd, 0xfe, 0x88, 0xf4, 0x00, 0xb0, 0x3e, 0x16, 0xa8, 0xbb, 0x69, 0xf6,
		0x28, 0x39, 0xc7, 0xb9, 0x08, 0xee, 0x63, 0xe3, 0x00, 0x79, 0x80, 0x3c, 0x40, 0x1e, 0x20, 0xbf,
		0x29, 0x20, 0x3f, 0x06, 0x2e, 0x94, 0xc3, 0x58, 0x35, 0xca, 0x28, 0x87, 0x01, 0x80, 0x07, 0xc0,
		0x57, 0x18, 0xe0, 0xd9, 0xcb, 0x61, 0x70, 0xa6, 0x02, 0x2c, 0xa6, 0x04, 0x2c, 0xa9, 0x46, 0x6b,
		0xea, 0xd1, 0x26, 0xc8, 0x94, 0x00, 0x36, 0xb6, 0x41, 0xa7, 0x34, 0xf0, 0x29, 0x0d, 0x84, 0xca,
		0x01, 0x23, 0x5e, 0x50, 0x62, 0x06, 0x27, 0x7b, 0x2a, 0x74, 0x8e, 0x4e, 0x51, 0xbc, 0x6a, 0x5c,
		0x5b, 0xb4, 0x9c, 0x7e, 0x82, 0x2a, 0x18, 0x36, 0x32, 0x06, 0x25, 0x64, 0x0e, 0xc0, 0x05, 0xe0,
		0x02, 0x70, 0x01, 0xb8, 0x00, 0x5c, 0xc0, 0xc8, 0x05, 0x76, 0x49, 0x00, 0xe8, 0x0f, 0xf4, 0x07,
		0xfa, 0x03, 0xfd, 0xf9, 0x3d, 0x3e, 0x88, 0xe4, 0xe1, 0x81, 0x45, 0xf0, 0x3f, 0xb4, 0x60, 0xfa,
		0xce, 0x8b, 0x9e, 0x84, 0xb5, 0x6a, 0x41, 0xf6, 0x4e, 0x29, 0x3b, 0x57, 0x41, 0x64, 0x0d, 0x00,
		0x66, 0x58, 0x77, 0xc7, 0xee, 0xd7, 0x0c, 0x6b, 0x36, 0x39, 0x5f, 0xb7, 0x0f, 0xf6, 0x6b, 0x27,
		0xb5, 0xd3, 0xc3, 0xe3, 0xda, 0xa9, 0xe5, 0x2f, 0xfc, 0x67, 0xe2, 0xf9, 0x32, 0x88, 0xa3, 0x8b,
		0xe0, 0x29, 0x18, 0x1e, 0x7a, 0xdc, 0xdb, 0xc4, 0x33, 0xf0, 0xce, 0x95, 0xf7, 0xab, 0x34, 0x1f,
		0xd8, 0x2b, 0xdb, 0x07, 0x4e, 0x3e, 0x90, 0x0f, 0x6c, 0x6d, 0x86, 0xd5, 0xf6, 0x27, 0x10, 0xd7,
		0x3f, 0x73, 0x3f, 0xb3, 0xa4, 0xae, 0xdf, 0xcc, 0x43, 0x5e, 0x43, 0x5e, 0x43, 0x5e, 0x43, 0x5e,
		0xb3, 0x7a, 0xfc, 0x63, 0x10, 0x79, 0xc9, 0x8b, 0x45, 0x7d, 0x7d, 0x86, 0x12, 0x2f, 0x2a, 0xbe,
		0xbe, 0x81, 0xdb, 0xe6, 0xab, 0x55, 0xda, 0x85, 0x61, 0xcf, 0x8d, 0x9d, 0x9d, 0x95, 0xd8, 0x52,
		0x59, 0x55, 0x6e, 0xc6, 0x8e, 0x9b, 0xf5, 0x70, 0x2f, 0xb6, 0x54, 0x1a, 0xe7, 0x4e, 0xac, 0x6e,
		0xa9, 0xac, 0xd4, 0x5e, 0xca, 0x2a, 0x94, 0xec, 0x1a, 0x74, 0xc8, 0x76, 0x9c, 0x05, 0xdb, 0x7c,
		0x6b, 0xdd, 0x28, 0xe1, 0x85, 0x12, 0x5e, 0x24, 0xb9, 0x55, 0x5e, 0xe9, 0xae, 0xfb, 0xf0, 0x27,
		0x6a, 0x76, 0x55, 0x60, 0xd4, 0xab, 0x5c, 0x42, 0x27, 0xe8, 0x98, 0x57, 0xce, 0x09, 0x3a, 0x86,
		0x05, 0x73, 0xf6, 0x50, 0xaa, 0x6b, 0x1b, 0x05, 0x73, 0x36, 0x04, 0x6c, 0x8c, 0x65, 0x26, 0xa3,
		0xac, 0xe4, 0x90, 0x91, 0xb3, 0xb2, 0x31, 0xe8, 0x54, 0x19, 0xb1, 0xcc, 0x0e, 0xd4, 0xb0, 0x1c,
		0xa0, 0x41, 0xa1, 0x2f, 0xe0, 0xd6, 0xe7, 0x2b, 0xf4, 0xe5, 0x3d, 0x09, 0xbe, 0x42, 0x5f, 0x03,
		0x63, 0x3c, 0x85, 0xbe, 0xf6, 0x50, 0xe8, 0x6b, 0x1d, 0x39, 0x32, 0x14, 0xfa, 0xaa, 0x42, 0x5e,
		0x83, 0x2d, 0xe7, 0x35, 0xf6, 0xb8, 0x2c, 0x88, 0xe4, 0x71, 0x8d, 0xc3, 0xe1, 0xf2, 0xf8, 0x64,
		0xd8, 0xad, 0xc3, 0xbc, 0x0f, 0x8b, 0x31, 0x43, 0x68, 0x63, 0x9f, 0x95, 0xad, 0x05, 0xfd, 0xd1,
		0x1e, 0x1a, 0x6e, 0xbb, 0x16, 0xb7, 0xca, 0x70, 0x6e, 0xed, 0xb0, 0xb1, 0x1d, 0xca, 0xf6, 0x50,
		0xed, 0x9f, 0xd6, 0x6a, 0xc7, 0x27, 0xb5, 0xda, 0xde, 0xc9, 0xe1, 0xc9, 0xde, 0xd9, 0xd1, 0xd1,
		0xfe, 0x31, 0xf7, 0x8d, 0x8f, 0x56, 0x47, 0xaf, 0x22, 0xa9, 0xe7, 0xf6, 0xba, 0x92, 0x60, 0x06,
		0x92, 0xda, 0x7f, 0xf6, 0xd2, 0x34, 0x48, 0xdd, 0xa0, 0xc3, 0xa7, 0xb9, 0x0a, 0x36, 0x21, 0xbd,
		0x20, 0xbd, 0x20, 0xbd, 0x2a, 0x26, 0xbd, 0xd8, 0xce, 0x47, 0x31, 0x9d, 0x87, 0x5a, 0x37, 0xf2,
		0xb9, 0x2c, 0xfb, 0x38, 0xe6, 0xc0, 0x9f, 0xcb, 0xb1, 0xee, 0x07, 0x0c, 0x04, 0x06, 0x02, 0x03,
		0xb9, 0x31, 0x90, 0x37, 0x48, 0xa7, 0xc0, 0xb0, 0xc6, 0x60, 0xab, 0x11, 0x65, 0xbd, 0xc1, 0x0b,
		0xbf, 0x6e, 0x20, 0xb0, 0x72, 0x4a, 0x49, 0x48, 0x48, 0xc0, 0x27, 0xe0, 0x13, 0x12, 0xb2, 0x9a,
		0x48, 0x17, 0x7a, 0xa9, 0x74, 0xb3, 0x7e, 0x87, 0xa3, 0xf2, 0xde, 0x64, 0xb5, 0xb6, 0x60, 0x14,
		0xd8, 0x07, 0xec, 0x03, 0xf6, 0x55, 0x0c, 0xfb, 0xb8, 0x17, 0x2e, 0x6a, 0x58, 0xb8, 0xd0, 0xe4,
		0x0c, 0x4b, 0xd9, 0xf0, 0xb3, 0x83, 0x83, 0xc3, 0xc3, 0x93, 0x83, 0xbd, 0xc3, 0xe3, 0xd3, 0xa3,
		0xda, 0xc9, 0xc9, 0xd1, 0xe9, 0xde, 0x29, 0x96, 0x32, 0xb8, 0x07, 0x6f, 0xaf, 0xb4, 0xc1, 0x3b,
		0xc1, 0x4a, 0x06, 0xf5, 0xbf, 0x4d, 0x5c, 0xc9, 0xe8, 0x79, 0x91, 0xf7, 0x34, 0xdc, 0x7c, 0xee,
		0x7a, 0x9d, 0x4e, 0x22, 0xd2, 0x94, 0x4f, 0x93, 0xcd, 0xb1, 0x0d, 0x69, 0x06, 0x69, 0x06, 0x69,
		0x86, 0x69, 0xe9, 0x46, 0x20, 0x21, 0xf3, 0x0a, 0xc7, 0xa2, 0x2f, 0x00, 0x26, 0x02, 0x13, 0x81,
		0x89, 0xc0, 0xc4, 0x0a, 0x62, 0x62, 0x3f, 0x4e, 0xa4, 0xdb, 0x11, 0xa9, 0x9f, 0x04, 0x7d, 0x96,
		0xe3, 0x7b, 0xe3, 0xfe, 0x9d, 0xb1, 0x0c, 0x14, 0x04, 0x0a, 0x02, 0x05, 0x81, 0x82, 0x55, 0x45,
		0x41, 0xce, 0xf5, 0xd9, 0x91, 0x41, 0x60, 0x1e, 0x30, 0x0f, 0x98, 0x07, 0xcc, 0xab, 0x2e, 0xe6,
		0x31, 0x4f, 0x81, 0xa7, 0xac, 0x02, 0xfd, 0x80, 0x7e, 0x40, 0xbf, 0x8a, 0xa1, 0x1f, 0x63, 0x84,
		0x6e, 0x63, 0x7b, 0xdf, 0xe4, 0xd9, 0xd3, 0x97, 0x54, 0x8a, 0x9e, 0x9d, 0xb9, 0xf4, 0x1c, 0xdb,
		0xc0, 0x56, 0x60, 0x2b, 0xb0, 0xf5, 0xe3, 0x2b, 0x4b, 0x06, 0x5b, 0x97, 0x22, 0x7a, 0x1a, 0x96,
		0x18, 0xc1, 0xf1, 0x5d, 0x03, 0xb3, 0x38, 0xbe, 0xbb, 0x71, 0x43, 0x75, 0x70, 0x84, 0xd3, 0xba,
		0xe4, 0xff, 0xda, 0x9b, 0xab, 0xbd, 0xf2, 0x82, 0x7c, 0xbc, 0xa2, 0x6b, 0x68, 0x14, 0x6a, 0x0b,
		0x6a, 0x0b, 0x6a, 0x0b, 0x6a, 0x0b, 0x6a, 0x0b, 0x6a, 0x0b, 0x6a, 0x0b, 0x6a, 0xeb, 0x53, 0xab,
		0x2d, 0x29, 0x43, 0x3e, 0x95, 0x35, 0x30, 0x06, 0x75, 0x05, 0x75, 0x05, 0x75, 0x55, 0x31, 0x75,
		0x95, 0x05, 0x91, 0xdc, 0x3f, 0x66, 0x54, 0x57, 0xc7, 0x38, 0xcf, 0x05, 0x6d, 0x05, 0x6d, 0xa5,
		0x35, 0x54, 0xc7, 0x47, 0x47, 0x87, 0x50, 0x57, 0x9b, 0xa3, 0xae, 0x3e, 0xfd, 0xf5, 0x0b, 0x06,
		0x77, 0x9a, 0x69, 0x94, 0x31, 0xdf, 0xb2, 0xd8, 0xcd, 0xa3, 0xbb, 0x6b, 0xc8, 0xbb, 0xf9, 0xcc,
		0x6e, 0xa6, 0x61, 0xb9, 0x89, 0x86, 0xe5, 0xe6, 0x19, 0xb3, 0x9b, 0x66, 0xa8, 0xbd, 0x6d, 0xe8,
		0xcc, 0x9c, 0x4e, 0xec, 0x68, 0x55, 0xc7, 0x57, 0xb8, 0x19, 0x86, 0x16, 0x17, 0xea, 0xde, 0xad,
		0xf6, 0x49, 0xc5, 0x11, 0xd1, 0x1d, 0x09, 0x86, 0x11, 0x50, 0xeb, 0x9f, 0xd5, 0x6f, 0xab, 0xf0,
		0xa6, 0xc4, 0xeb, 0x0c, 0xb4, 0xae, 0x2f, 0x20, 0x9e, 0xcb, 0x27, 0x5f, 0x4f, 0xa0, 0x33, 0xe1,
		0x34, 0x98, 0x58, 0xea, 0x4e, 0x20, 0x8d, 0x27, 0x8a, 0xc6, 0x13, 0x42, 0xb3, 0x89, 0x1f, 0x6f,
		0x74, 0x51, 0xaf, 0x03, 0x70, 0xfc, 0x38, 0x1b, 0x44, 0x0a, 0xfd, 0xf4, 0xf6, 0xa4, 0xb6, 0xdb,
		0xc8, 0x02, 0x95, 0x00, 0xb5, 0xca, 0x4a, 0x68, 0xe7, 0x53, 0x4c, 0xf2, 0x27, 0x0c, 0xf9, 0x12,
		0xd3, 0xfc, 0x08, 0x5b, 0x3e, 0x84, 0x2d, 0xff, 0xc1, 0x93, 0xef, 0xb0, 0x2b, 0xb2, 0x74, 0x6f,
		0xc7, 0x70, 0xba, 0x89, 0xd7, 0x13, 0x6e, 0x27, 0x48, 0x7d, 0x2f, 0x61, 0xb8, 0x4b, 0x6b, 0xda,
		0x1c, 0xae, 0xd5, 0xc2, 0xf5, 0x34, 0x6b, 0x4b, 0x2c, 0x6e, 0xea, 0xb5, 0x5a, 0x39, 0xcd, 0x18,
		0xd5, 0x82, 0x62, 0xb8, 0xbc, 0x82, 0x29, 0x57, 0xc8, 0x73, 0xa7, 0x28, 0x63, 0xb6, 0x9d, 0xf7,
		0xe6, 0x6a, 0xe6, 0x5c, 0xa0, 0x8d, 0xa4, 0xd2, 0x2b, 0xcf, 0x0d, 0xac, 0x95, 0x1f, 0x02, 0x7b,
		0x97, 0x4d, 0x58, 0x19, 0x95, 0x35, 0xa5, 0xd6, 0xda, 0x15, 0xbe, 0x1a, 0xef, 0x4d, 0x3c, 0x88,
		0x24, 0x89, 0x13, 0xd7, 0x20, 0xe6, 0xdf, 0x89, 0x91, 0xb1, 0x3d, 0xa8, 0x11, 0xa8, 0x11, 0xa8,
		0x11, 0xa8, 0x11, 0xa8, 0x11, 0xa8, 0x11, 0xa8, 0x11, 0xa8, 0x11, 0x82, 0x1a, 0x89, 0x33, 0xc9,
		0x2b, 0x47, 0x06, 0x06, 0xa1, 0x47, 0xa0, 0x47, 0xa0, 0x47, 0xa0, 0x47, 0xa0, 0x47, 0xa0, 0x47,
		0xa0, 0x47, 0xa0, 0x47, 0x94, 0xf4, 0x08, 0x5f, 0x5e, 0x04, 0x19, 0x11, 0x28, 0x10, 0x28, 0x10,
		0x28, 0x10, 0x28, 0x10, 0x28, 0x10, 0x28, 0x10, 0x28, 0x10, 0x55, 0x05, 0xc2, 0x98, 0x0b, 0x41,
		0x16, 0x04, 0x1a, 0x04, 0x1a, 0x04, 0x1a, 0x04, 0x1a, 0x04, 0x1a, 0x04, 0x1a, 0x04, 0x1a, 0x44,
		0xa1, 0x9b, 0x87, 0xd7, 0x98, 0xfa, 0xa1, 0xf0, 0x12, 0x73, 0x11, 0x52, 0xb0, 0x05, 0x15, 0x02,
		0x15, 0x02, 0x15, 0x42, 0xf4, 0x98, 0x8e, 0x27, 0x85, 0xeb, 0x45, 0x1d, 0x57, 0x06, 0x46, 0x35,
		0xbe, 0x38, 0xea, 0x07, 0x39, 0xb7, 0x9e, 0x94, 0x22, 0x89, 0x8c, 0xc5, 0x88, 0xf3, 0xfd, 0x7b,
		0xe7, 0xaf, 0xda, 0xab, 0x3b, 0xf8, 0xe3, 0x60, 0xf4, 0xc7, 0xfd, 0xdb, 0x1f, 0x5f, 0xa7, 0xfe,
		0xf8, 0xdb, 0xf7, 0xef, 0x5f, 0xbe, 0x7f, 0xef, 0xfc, 0xe3, 0xef, 0xff, 0xef, 0x6f, 0xff, 0xf3,
		0xbf, 0xff, 0xfd, 0xfe, 0xfd, 0x1f, 0xdf, 0xbf, 0xbb, 0xed, 0xa9, 0x4f, 0xfc, 0xdd, 0xf9, 0x90,
		0x18, 0x2c, 0xc3, 0x9f, 0x7c, 0x27, 0x06, 0x8a, 0xc6, 0x80, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0xe6,
		0x82, 0x98, 0x0b, 0x62, 0x2e, 0x88, 0xb9, 0x20, 0xe6, 0x82, 0x0a, 0x3a, 0x24, 0x8b, 0x7e, 0x44,
		0xf1, 0x9f, 0x11, 0x8f, 0x0e, 0x19, 0x19, 0x83, 0x0e, 0x81, 0x0e, 0x81, 0x0e, 0x81, 0x0e, 0x81,
		0x0e, 0x81, 0x0e, 0x81, 0x0e, 0xf9, 0x5c, 0x3a, 0xe4, 0x63, 0x56, 0x67, 0x1a, 0xd6, 0xdb, 0xd9,
		0xd5, 0xac, 0x60, 0xb2, 0xbd, 0xb2, 0x32, 0xd3, 0xf9, 0xc8, 0xb0, 0xad, 0xca, 0x4c, 0x84, 0xf2,
		0x3a, 0x22, 0xf2, 0x1e, 0x43, 0xd1, 0xd1, 0xaf, 0xf3, 0x32, 0x32, 0x40, 0x2d, 0xc1, 0x21, 0xba,
		0x5e, 0x16, 0x0e, 0x35, 0xc0, 0x40, 0x52, 0x68, 0x56, 0x89, 0xd9, 0x43, 0x95, 0x98, 0x52, 0x45,
		0xe1, 0xa7, 0xaa, 0x12, 0xa3, 0x2d, 0xf6, 0xc6, 0x23, 0xfe, 0x18, 0xc7, 0xa1, 0xf0, 0x74, 0x66,
		0x48, 0xe3, 0x24, 0xff, 0x7e, 0x05, 0x30, 0x42, 0xeb, 0xa6, 0x93, 0x71, 0x27, 0x68, 0x5c, 0x69,
		0x82, 0xf0, 0x46, 0x78, 0x6f, 0x42, 0x78, 0x7b, 0xa9, 0x70, 0xc7, 0xaa, 0xc1, 0x4d, 0x44, 0xd7,
		0x24, 0xd2, 0x4f, 0x34, 0xda, 0xde, 0x8e, 0xb5, 0x8d, 0xef, 0x06, 0xdd, 0xaf, 0x05, 0x31, 0xf3,
		0xee, 0x17, 0xf9, 0xcf, 0xc3, 0x58, 0x44, 0x3d, 0xc8, 0x85, 0x9a, 0x8f, 0xad, 0x16, 0xe4, 0x96,
		0x41, 0x1f, 0x8c, 0x6a, 0xc0, 0x2a, 0x00, 0x27, 0xad, 0xea, 0xab, 0x56, 0x95, 0x57, 0xad, 0xaa,
		0xae, 0xb4, 0x2a, 0xae, 0xab, 0xfa, 0x83, 0xe8, 0x0b, 0xda, 0x3e, 0xe0, 0x28, 0x55, 0xf0, 0x5c,
		0x2c, 0xec, 0x97, 0x7b, 0xcf, 0x62, 0x9f, 0x98, 0xff, 0x2f, 0x0b, 0x7a, 0x45, 0xb5, 0x37, 0x88,
		0xbd, 0x30, 0xff, 0xd9, 0x67, 0x9f, 0x6c, 0xce, 0x53, 0xad, 0xa8, 0x6a, 0xaa, 0x54, 0xc5, 0x74,
		0x45, 0xd9, 0xc7, 0x95, 0x55, 0x4a, 0x55, 0x18, 0x9c, 0xc0, 0xd4, 0xaa, 0x8c, 0x4c, 0x66, 0x5e,
		0x32, 0xc3, 0xd2, 0x98, 0x94, 0xe6, 0x49, 0xab, 0xca, 0x20, 0x3a, 0xfe, 0xb3, 0x97, 0xa6, 0x41,
		0xea, 0x06, 0xab, 0xe7, 0x87, 0x93, 0xc4, 0xe6, 0xa4, 0xcd, 0x2a, 0x98, 0x53, 0x12, 0x79, 0xca,
		0xa2, 0x8e, 0x22, 0xe2, 0x34, 0x44, 0x1b, 0x55, 0xa4, 0x69, 0x8b, 0x32, 0x6d, 0x11, 0xa6, 0x27,
		0xba, 0xcc, 0xa8, 0x4a, 0x59, 0x44, 0xd1, 0xef, 0x51, 0x9b, 0xec, 0x73, 0xd2, 0x85, 0xd5, 0x1d,
		0x15, 0xcf, 0x7e, 0xbb, 0x9a, 0x5c, 0xc3, 0xbd, 0x55, 0xee, 0x34, 0x87, 0x8f, 0x7f, 0x4a, 0x1f,
		0xa7, 0x39, 0xc9, 0x36, 0xf1, 0x62, 0x7b, 0xc5, 0x8b, 0xeb, 0x35, 0x03, 0x43, 0xb5, 0xf0, 0x33,
		0xb5, 0xd0, 0xb3, 0x62, 0x61, 0x67, 0x84, 0x42, 0x95, 0x43, 0x41, 0xb5, 0x70, 0xb2, 0x23, 0x22,
		0x99, 0x04, 0x22, 0x75, 0xbd, 0x27, 0xd1, 0x21, 0x9d, 0x81, 0x2b, 0xe4, 0x95, 0xdf, 0x59, 0xa0,
		0x95, 0xbf, 0xdf, 0xa3, 0x96, 0xbf, 0xdf, 0x43, 0xf9, 0x7b, 0xd6, 0x54, 0x50, 0x95, 0xca, 0xdf,
		0x93, 0x53, 0x3d, 0x46, 0xcb, 0xf4, 0x1a, 0xcb, 0xf2, 0x9a, 0xcb, 0xf0, 0x7a, 0x17, 0xbd, 0x18,
		0xe4, 0x19, 0xcd, 0xb6, 0xec, 0x18, 0x2e, 0xa3, 0x73, 0x2c, 0xd0, 0xbe, 0xea, 0x5d, 0x6b, 0xb3,
		0xf6, 0x2e, 0xe3, 0x5b, 0xf6, 0x66, 0xe9, 0x45, 0x4b, 0x29, 0xc4, 0x76, 0x89, 0x57, 0xb1, 0xe8,
		0x95, 0xf2, 0x37, 0x2a, 0xdd, 0x0f, 0x6e, 0x02, 0x37, 0x81, 0x9b, 0xc0, 0x4d, 0xe0, 0x26, 0x70,
		0x93, 0x02, 0x37, 0x91, 0x4b, 0xbb, 0x9b, 0x95, 0x72, 0x07, 0x3b, 0x81, 0x9d, 0xc0, 0x4e, 0x60,
		0x27, 0xb0, 0x13, 0xd8, 0x49, 0x81, 0x9d, 0xf4, 0x79, 0x09, 0x8c, 0x04, 0x46, 0x02, 0x23, 0x81,
		0x91, 0xc0, 0x48, 0x60, 0x24, 0x4e, 0x46, 0xd2, 0x5a, 0x66, 0xa2, 0x96, 0x56, 0x04, 0x27, 0x81,
		0x93, 0xc0, 0x49, 0xe0, 0x24, 0x70, 0x12, 0x38, 0x69, 0x69, 0x37, 0x68, 0x94, 0xde, 0xd3, 0x2f,
		0xb5, 0x07, 0x56, 0x02, 0x2b, 0x31, 0xb2, 0x92, 0x6e, 0xa9, 0x3a, 0x9d, 0xd2, 0x74, 0xda, 0xa5,
		0xe8, 0xd6, 0x54, 0x7a, 0xae, 0x4c, 0x0c, 0x91, 0xe1, 0x4f, 0xd7, 0xf3, 0x7d, 0xd1, 0x97, 0x42,
		0x63, 0x89, 0x7a, 0xaa, 0x35, 0x70, 0x04, 0x38, 0x02, 0x75, 0x0b, 0x75, 0x0b, 0x75, 0x0b, 0x75,
		0xcb, 0xc4, 0x4c, 0xda, 0x7b, 0xa7, 0xe8, 0x45, 0x4c, 0xc1, 0x4b, 0xe0, 0x25, 0xf0, 0x12, 0x78,
		0x09, 0xbc, 0x04, 0x5e, 0x5a, 0xc9, 0x4b, 0xd4, 0x22, 0x97, 0x06, 0x45, 0x2d, 0xc1, 0x4b, 0xe0,
		0x25, 0xf0, 0x12, 0x78, 0x09, 0xbc, 0xf4, 0x99, 0x79, 0xa9, 0x72, 0xc5, 0x4d, 0xc8, 0xf5, 0x0b,
		0xe7, 0x95, 0x35, 0x51, 0xab, 0x52, 0xa8, 0x77, 0xca, 0x58, 0xb5, 0xea, 0x20, 0xb1, 0xca, 0x20,
		0xb1, 0xaa, 0x20, 0x4e, 0xe7, 0x33, 0xb3, 0xf1, 0x66, 0x9c, 0xce, 0x57, 0xaf, 0xca, 0xa7, 0x58,
		0x85, 0x4f, 0x2f, 0x06, 0x9e, 0x45, 0x18, 0xc6, 0xc3, 0x15, 0x96, 0x44, 0x3d, 0x0e, 0x8a, 0x8d,
		0xe0, 0xdc, 0x70, 0xee, 0x99, 0x1e, 0xcf, 0x82, 0x48, 0x2a, 0xe9, 0x47, 0x82, 0x6e, 0x24, 0xea,
		0x45, 0x82, 0xf0, 0xd5, 0xd1, 0x87, 0xba, 0xc5, 0x21, 0x35, 0xf5, 0xa0, 0x89, 0x82, 0xa1, 0x14,
		0xd9, 0xd4, 0xd1, 0x7d, 0xa6, 0x5d, 0x61, 0xae, 0xf3, 0x8c, 0x7a, 0x87, 0x49, 0x7f, 0xb5, 0x2d,
		0x80, 0x73, 0x9a, 0xf5, 0xfb, 0x89, 0x48, 0x53, 0x77, 0xb8, 0x88, 0xda, 0xf9, 0x29, 0x12, 0x19,
		0xa4, 0x22, 0x8f, 0x7e, 0x45, 0xac, 0x5e, 0x62, 0x03, 0xd0, 0x0d, 0xe8, 0x9e, 0xe9, 0xf1, 0xa0,
		0x23, 0x22, 0x19, 0xc8, 0x17, 0xb5, 0x3a, 0xa2, 0x63, 0x6d, 0xa2, 0x10, 0xb1, 0x4e, 0x33, 0x37,
		0xfd, 0xcd, 0x4b, 0x05, 0x3d, 0x2f, 0x76, 0x79, 0x79, 0x71, 0xfb, 0x70, 0x7f, 0xf9, 0xbb, 0xea,
		0x30, 0x0d, 0xe1, 0x25, 0x25, 0xe5, 0x17, 0x34, 0x6b, 0x0b, 0x9f, 0xff, 0x56, 0x6f, 0xb5, 0x9a,
		0xad, 0x87, 0xe6, 0x85, 0x63, 0x03, 0x94, 0x35, 0x9f, 0xea, 0xf6, 0xe6, 0xee, 0xbe, 0x62, 0x8f,
		0xd4, 0xfa, 0xa3, 0x75, 0xdf, 0xb8, 0x7a, 0xb8, 0xae, 0x5f, 0x35, 0x2a, 0xd7, 0x53, 0x17, 0x8d,
		0xd6, 0xf9, 0x5d, 0xf3, 0xf6, 0xbe, 0x79, 0x73, 0x5d, 0xc1, 0x2e, 0xab, 0xf6, 0xd3, 0x9d, 0xd7,
		0x6f, 0xeb, 0xdf, 0x9a, 0x97, 0xcd, 0xfb, 0x66, 0xa3, 0x55, 0xa5, 0xc7, 0xbb, 0xaa, 0x5f, 0xd7,
		0xff, 0xd5, 0xb8, 0x6a, 0x5c, 0xdf, 0x3f, 0xd4, 0x2f, 0x2e, 0xee, 0x1a, 0xad, 0x16, 0x77, 0x36,
		0xb6, 0x6d, 0x19, 0xbf, 0x3f, 0x46, 0x65, 0x5d, 0x3d, 0xf1, 0xf3, 0x92, 0x4a, 0xd1, 0x73, 0x3b,
		0x22, 0xf5, 0x93, 0xa0, 0xaf, 0x94, 0x9a, 0x9a, 0x88, 0x9e, 0xd9, 0xb6, 0x10, 0x3b, 0x10, 0x3b,
		0xb3, 0x7e, 0x42, 0x2f, 0x03, 0xaa, 0xf0, 0xd9, 0x4b, 0x11, 0x3d, 0x0d, 0x13, 0xa3, 0x98, 0xa9,
		0x7e, 0xac, 0x99, 0xea, 0xc1, 0x11, 0x26, 0xa6, 0x45, 0x6c, 0x56, 0xba, 0x92, 0xe3, 0x3d, 0x28,
		0xab, 0x14, 0x94, 0x07, 0x1a, 0x03, 0x8d, 0x81, 0xc6, 0x40, 0x63, 0xa0, 0xf1, 0xf2, 0x7f, 0x29,
		0xe3, 0x76, 0x86, 0x25, 0x57, 0x92, 0xcc, 0xb9, 0x98, 0x61, 0x6b, 0xc9, 0xe3, 0xad, 0x7a, 0x2c,
		0x95, 0xc7, 0x71, 0xe6, 0xde, 0xfc, 0xf0, 0x7e, 0xd9, 0x78, 0xfa, 0x71, 0x27, 0x0f, 0xf5, 0xf6,
		0xb7, 0xfc, 0xb1, 0x16, 0x3d, 0x8e, 0x13, 0xa4, 0xe7, 0x71, 0x6f, 0x98, 0x34, 0x15, 0x9d, 0xd6,
		0xf0, 0x91, 0x66, 0xc0, 0xd6, 0x09, 0xd2, 0x7f, 0x7a, 0x3f, 0xc4, 0x5d, 0x1c, 0x8f, 0x80, 0xf8,
		0xcd, 0xf2, 0xd6, 0xeb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c,
		0xd8, 0x1d, 0x9b, 0xb4, 0x35, 0x04, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/interfaces/interface/config/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/lldp/config/chassis-id-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigLldp_ChassisIdType)(0)),
	},
	"/lldp/config/suppress-tlv-advertisement": []reflect.Type{
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_TLV)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name": []reflect.Type{
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigLldp_ChassisIdType)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigLldp_PortIdType)(0)),
	},
}

