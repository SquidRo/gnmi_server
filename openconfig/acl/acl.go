/*
Package acl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/sgk/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- public/release/models/acl/openconfig-acl.yang
	- public/release/models/acl/openconfig-packet-match-types.yang
	- public/release/models/acl/openconfig-packet-match.yang
Imported modules were sourced from:
	- public/release/models/acl/...
	- public/release/models/types/...
	- public/release/models/...
	- public/third_party/ietf/...
*/
package acl

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Acl represents the /openconfig-acl/acl YANG schema element.
type Acl struct {
	AclSet	map[Acl_AclSet_Key]*Acl_AclSet	`path:"acl-sets/acl-set" module:"openconfig-acl"`
	CounterCapability	E_OpenconfigAcl_ACL_COUNTER_CAPABILITY	`path:"state/counter-capability" module:"openconfig-acl"`
	Interface	map[string]*Acl_Interface	`path:"interfaces/interface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl) IsYANGGoStruct() {}

// Acl_AclSet_Key represents the key for list AclSet of element /openconfig-acl/acl.
type Acl_AclSet_Key struct {
	Name	string	`path:"name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}

// NewAclSet creates a new entry in the AclSet list of the
// Acl struct. The keys of the list are populated from the input
// arguments.
func (t *Acl) NewAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_AclSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[Acl_AclSet_Key]*Acl_AclSet)
	}

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclSet", key)
	}

	t.AclSet[key] = &Acl_AclSet{
		Name: &Name,
		Type: Type,
	}

	return t.AclSet[key], nil
}

// GetOrCreateAclSet retrieves the value with the specified keys from
// the receiver Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl) GetOrCreateAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_AclSet){

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	if v, ok := t.AclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclSet(Name, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclSet got unexpected error: %v", err))
	}
	return v
}

// GetAclSet retrieves the value with the specified key from
// the AclSet map field of Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl) GetAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_AclSet){

	if t == nil {
		return nil
	}

  key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

  if lm, ok := t.AclSet[key]; ok {
    return lm
  }
  return nil
}

// NewInterface creates a new entry in the Interface list of the
// Acl struct. The keys of the list are populated from the input
// arguments.
func (t *Acl) NewInterface(Id string) (*Acl_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Acl_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Acl_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl) GetOrCreateInterface(Id string) (*Acl_Interface){

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl) GetInterface(Id string) (*Acl_Interface){

	if t == nil {
		return nil
	}

  key := Id

  if lm, ok := t.Interface[key]; ok {
    return lm
  }
  return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_AclSet represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSet struct {
	AclEntry	map[uint32]*Acl_AclSet_AclEntry	`path:"acl-entries/acl-entry" module:"openconfig-acl"`
	Description	*string	`path:"config/description" module:"openconfig-acl"`
	Name	*string	`path:"config/name|name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"config/type|type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_AclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_AclSet) NewAclEntry(SequenceId uint32) (*Acl_AclSet_AclEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_AclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_AclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_AclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_AclSet) GetOrCreateAclEntry(SequenceId uint32) (*Acl_AclSet_AclEntry){

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_AclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_AclSet) GetAclEntry(SequenceId uint32) (*Acl_AclSet_AclEntry){

	if t == nil {
		return nil
	}

  key := SequenceId

  if lm, ok := t.AclEntry[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Acl_AclSet struct, which is a YANG list entry.
func (t *Acl_AclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}


	return map[string]interface{}{
		"name": *t.Name,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_AclSet_AclEntry represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntry struct {
	Actions	*Acl_AclSet_AclEntry_Actions	`path:"actions" module:"openconfig-acl"`
	Description	*string	`path:"config/description" module:"openconfig-acl"`
	InputInterface	*Acl_AclSet_AclEntry_InputInterface	`path:"input-interface" module:"openconfig-acl"`
	Ipv4	*Acl_AclSet_AclEntry_Ipv4	`path:"ipv4" module:"openconfig-acl"`
	Ipv6	*Acl_AclSet_AclEntry_Ipv6	`path:"ipv6" module:"openconfig-acl"`
	L2	*Acl_AclSet_AclEntry_L2	`path:"l2" module:"openconfig-acl"`
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"config/sequence-id|sequence-id" module:"openconfig-acl"`
	Transport	*Acl_AclSet_AclEntry_Transport	`path:"transport" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateActions() *Acl_AclSet_AclEntry_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &Acl_AclSet_AclEntry_Actions{}
	return t.Actions
}

// GetOrCreateInputInterface retrieves the value of the InputInterface field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateInputInterface() *Acl_AclSet_AclEntry_InputInterface {
	if t.InputInterface != nil {
		return t.InputInterface
	}
	t.InputInterface = &Acl_AclSet_AclEntry_InputInterface{}
	return t.InputInterface
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateIpv4() *Acl_AclSet_AclEntry_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Acl_AclSet_AclEntry_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateIpv6() *Acl_AclSet_AclEntry_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Acl_AclSet_AclEntry_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateL2() *Acl_AclSet_AclEntry_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &Acl_AclSet_AclEntry_L2{}
	return t.L2
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateTransport() *Acl_AclSet_AclEntry_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Acl_AclSet_AclEntry_Transport{}
	return t.Transport
}

// GetActions returns the value of the Actions struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetActions() *Acl_AclSet_AclEntry_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetInputInterface returns the value of the InputInterface struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field InputInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetInputInterface() *Acl_AclSet_AclEntry_InputInterface {
	if t != nil && t.InputInterface != nil {
		return t.InputInterface
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetIpv4() *Acl_AclSet_AclEntry_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetIpv6() *Acl_AclSet_AclEntry_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetL2() *Acl_AclSet_AclEntry_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetTransport() *Acl_AclSet_AclEntry_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// ΛListKeyMap returns the keys of the Acl_AclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_AclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_AclSet_AclEntry_Actions represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_Actions struct {
	ForwardingAction	E_OpenconfigAcl_FORWARDING_ACTION	`path:"config/forwarding-action" module:"openconfig-acl"`
	LogAction	E_OpenconfigAcl_LOG_ACTION	`path:"config/log-action" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Actions) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Actions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_AclSet_AclEntry_InputInterface represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface struct {
	InterfaceRef	*Acl_AclSet_AclEntry_InputInterface_InterfaceRef	`path:"interface-ref" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry_InputInterface) GetOrCreateInterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Acl_AclSet_AclEntry_InputInterface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Acl_AclSet_AclEntry_InputInterface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry_InputInterface) GetInterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_InputInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_InputInterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_AclSet_AclEntry_InputInterface_InterfaceRef represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef struct {
	Interface	*string	`path:"config/interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"config/subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_InputInterface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_AclSet_AclEntry_Ipv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4 struct {
	DestinationAddress	*string	`path:"config/destination-address" module:"openconfig-acl"`
	Dscp	*uint8	`path:"config/dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"config/hop-limit" module:"openconfig-acl"`
	Protocol	Acl_AclSet_AclEntry_Ipv4_Protocol_Union	`path:"config/protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"config/source-address" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv4) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Acl_AclSet_AclEntry_Ipv4_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol within the YANG schema.
type Acl_AclSet_AclEntry_Ipv4_Protocol_Union interface {
	Is_Acl_AclSet_AclEntry_Ipv4_Protocol_Union()
}

// Acl_AclSet_AclEntry_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type Acl_AclSet_AclEntry_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_Acl_AclSet_AclEntry_Ipv4_Protocol_Union ensures that Acl_AclSet_AclEntry_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the Acl_AclSet_AclEntry_Ipv4_Protocol_Union interface.
func (*Acl_AclSet_AclEntry_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_Acl_AclSet_AclEntry_Ipv4_Protocol_Union() {}

// Acl_AclSet_AclEntry_Ipv4_Protocol_Union_Uint8 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol
// is to be set to a uint8 value.
type Acl_AclSet_AclEntry_Ipv4_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_Acl_AclSet_AclEntry_Ipv4_Protocol_Union ensures that Acl_AclSet_AclEntry_Ipv4_Protocol_Union_Uint8
// implements the Acl_AclSet_AclEntry_Ipv4_Protocol_Union interface.
func (*Acl_AclSet_AclEntry_Ipv4_Protocol_Union_Uint8) Is_Acl_AclSet_AclEntry_Ipv4_Protocol_Union() {}

// To_Acl_AclSet_AclEntry_Ipv4_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Acl_AclSet_AclEntry_Ipv4_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Acl_AclSet_AclEntry_Ipv4) To_Acl_AclSet_AclEntry_Ipv4_Protocol_Union(i interface{}) (Acl_AclSet_AclEntry_Ipv4_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &Acl_AclSet_AclEntry_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &Acl_AclSet_AclEntry_Ipv4_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Acl_AclSet_AclEntry_Ipv4_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// Acl_AclSet_AclEntry_Ipv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6 struct {
	DestinationAddress	*string	`path:"config/destination-address" module:"openconfig-acl"`
	DestinationFlowLabel	*uint32	`path:"config/destination-flow-label" module:"openconfig-acl"`
	Dscp	*uint8	`path:"config/dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"config/hop-limit" module:"openconfig-acl"`
	Protocol	Acl_AclSet_AclEntry_Ipv6_Protocol_Union	`path:"config/protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"config/source-address" module:"openconfig-acl"`
	SourceFlowLabel	*uint32	`path:"config/source-flow-label" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv6) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Acl_AclSet_AclEntry_Ipv6_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol within the YANG schema.
type Acl_AclSet_AclEntry_Ipv6_Protocol_Union interface {
	Is_Acl_AclSet_AclEntry_Ipv6_Protocol_Union()
}

// Acl_AclSet_AclEntry_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type Acl_AclSet_AclEntry_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_Acl_AclSet_AclEntry_Ipv6_Protocol_Union ensures that Acl_AclSet_AclEntry_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the Acl_AclSet_AclEntry_Ipv6_Protocol_Union interface.
func (*Acl_AclSet_AclEntry_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_Acl_AclSet_AclEntry_Ipv6_Protocol_Union() {}

// Acl_AclSet_AclEntry_Ipv6_Protocol_Union_Uint8 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol
// is to be set to a uint8 value.
type Acl_AclSet_AclEntry_Ipv6_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_Acl_AclSet_AclEntry_Ipv6_Protocol_Union ensures that Acl_AclSet_AclEntry_Ipv6_Protocol_Union_Uint8
// implements the Acl_AclSet_AclEntry_Ipv6_Protocol_Union interface.
func (*Acl_AclSet_AclEntry_Ipv6_Protocol_Union_Uint8) Is_Acl_AclSet_AclEntry_Ipv6_Protocol_Union() {}

// To_Acl_AclSet_AclEntry_Ipv6_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Acl_AclSet_AclEntry_Ipv6_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Acl_AclSet_AclEntry_Ipv6) To_Acl_AclSet_AclEntry_Ipv6_Protocol_Union(i interface{}) (Acl_AclSet_AclEntry_Ipv6_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &Acl_AclSet_AclEntry_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &Acl_AclSet_AclEntry_Ipv6_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Acl_AclSet_AclEntry_Ipv6_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// Acl_AclSet_AclEntry_L2 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2 struct {
	DestinationMac	*string	`path:"config/destination-mac" module:"openconfig-acl"`
	DestinationMacMask	*string	`path:"config/destination-mac-mask" module:"openconfig-acl"`
	Ethertype	Acl_AclSet_AclEntry_L2_Ethertype_Union	`path:"config/ethertype" module:"openconfig-acl"`
	SourceMac	*string	`path:"config/source-mac" module:"openconfig-acl"`
	SourceMacMask	*string	`path:"config/source-mac-mask" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_L2) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_L2) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_L2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Acl_AclSet_AclEntry_L2_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype within the YANG schema.
type Acl_AclSet_AclEntry_L2_Ethertype_Union interface {
	Is_Acl_AclSet_AclEntry_L2_Ethertype_Union()
}

// Acl_AclSet_AclEntry_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype
// is to be set to a E_OpenconfigPacketMatchTypes_ETHERTYPE value.
type Acl_AclSet_AclEntry_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE struct {
	E_OpenconfigPacketMatchTypes_ETHERTYPE	E_OpenconfigPacketMatchTypes_ETHERTYPE
}

// Is_Acl_AclSet_AclEntry_L2_Ethertype_Union ensures that Acl_AclSet_AclEntry_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the Acl_AclSet_AclEntry_L2_Ethertype_Union interface.
func (*Acl_AclSet_AclEntry_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE) Is_Acl_AclSet_AclEntry_L2_Ethertype_Union() {}

// Acl_AclSet_AclEntry_L2_Ethertype_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype
// is to be set to a uint16 value.
type Acl_AclSet_AclEntry_L2_Ethertype_Union_Uint16 struct {
	Uint16	uint16
}

// Is_Acl_AclSet_AclEntry_L2_Ethertype_Union ensures that Acl_AclSet_AclEntry_L2_Ethertype_Union_Uint16
// implements the Acl_AclSet_AclEntry_L2_Ethertype_Union interface.
func (*Acl_AclSet_AclEntry_L2_Ethertype_Union_Uint16) Is_Acl_AclSet_AclEntry_L2_Ethertype_Union() {}

// To_Acl_AclSet_AclEntry_L2_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Acl_AclSet_AclEntry_L2_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Acl_AclSet_AclEntry_L2) To_Acl_AclSet_AclEntry_L2_Ethertype_Union(i interface{}) (Acl_AclSet_AclEntry_L2_Ethertype_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_ETHERTYPE:
		return &Acl_AclSet_AclEntry_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE{v}, nil
	case uint16:
		return &Acl_AclSet_AclEntry_L2_Ethertype_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Acl_AclSet_AclEntry_L2_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
	}
}


// Acl_AclSet_AclEntry_Transport represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_Transport struct {
	DestinationPort	Acl_AclSet_AclEntry_Transport_DestinationPort_Union	`path:"config/destination-port" module:"openconfig-acl"`
	SourcePort	Acl_AclSet_AclEntry_Transport_SourcePort_Union	`path:"config/source-port" module:"openconfig-acl"`
	TcpFlags	[]E_OpenconfigPacketMatchTypes_TCP_FLAGS	`path:"config/tcp-flags" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Transport) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Acl_AclSet_AclEntry_Transport_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port within the YANG schema.
type Acl_AclSet_AclEntry_Transport_DestinationPort_Union interface {
	Is_Acl_AclSet_AclEntry_Transport_DestinationPort_Union()
}

// Acl_AclSet_AclEntry_Transport_DestinationPort_Union_E_Transport_DestinationPort is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port
// is to be set to a E_Transport_DestinationPort value.
type Acl_AclSet_AclEntry_Transport_DestinationPort_Union_E_Transport_DestinationPort struct {
	E_Transport_DestinationPort	E_Transport_DestinationPort
}

// Is_Acl_AclSet_AclEntry_Transport_DestinationPort_Union ensures that Acl_AclSet_AclEntry_Transport_DestinationPort_Union_E_Transport_DestinationPort
// implements the Acl_AclSet_AclEntry_Transport_DestinationPort_Union interface.
func (*Acl_AclSet_AclEntry_Transport_DestinationPort_Union_E_Transport_DestinationPort) Is_Acl_AclSet_AclEntry_Transport_DestinationPort_Union() {}

// Acl_AclSet_AclEntry_Transport_DestinationPort_Union_String is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port
// is to be set to a string value.
type Acl_AclSet_AclEntry_Transport_DestinationPort_Union_String struct {
	String	string
}

// Is_Acl_AclSet_AclEntry_Transport_DestinationPort_Union ensures that Acl_AclSet_AclEntry_Transport_DestinationPort_Union_String
// implements the Acl_AclSet_AclEntry_Transport_DestinationPort_Union interface.
func (*Acl_AclSet_AclEntry_Transport_DestinationPort_Union_String) Is_Acl_AclSet_AclEntry_Transport_DestinationPort_Union() {}

// Acl_AclSet_AclEntry_Transport_DestinationPort_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port
// is to be set to a uint16 value.
type Acl_AclSet_AclEntry_Transport_DestinationPort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_Acl_AclSet_AclEntry_Transport_DestinationPort_Union ensures that Acl_AclSet_AclEntry_Transport_DestinationPort_Union_Uint16
// implements the Acl_AclSet_AclEntry_Transport_DestinationPort_Union interface.
func (*Acl_AclSet_AclEntry_Transport_DestinationPort_Union_Uint16) Is_Acl_AclSet_AclEntry_Transport_DestinationPort_Union() {}

// To_Acl_AclSet_AclEntry_Transport_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Acl_AclSet_AclEntry_Transport_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Acl_AclSet_AclEntry_Transport) To_Acl_AclSet_AclEntry_Transport_DestinationPort_Union(i interface{}) (Acl_AclSet_AclEntry_Transport_DestinationPort_Union, error) {
	switch v := i.(type) {
	case E_Transport_DestinationPort:
		return &Acl_AclSet_AclEntry_Transport_DestinationPort_Union_E_Transport_DestinationPort{v}, nil
	case string:
		return &Acl_AclSet_AclEntry_Transport_DestinationPort_Union_String{v}, nil
	case uint16:
		return &Acl_AclSet_AclEntry_Transport_DestinationPort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Acl_AclSet_AclEntry_Transport_DestinationPort_Union, unknown union type, got: %T, want any of [E_Transport_DestinationPort, string, uint16]", i, i)
	}
}

// Acl_AclSet_AclEntry_Transport_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port within the YANG schema.
type Acl_AclSet_AclEntry_Transport_SourcePort_Union interface {
	Is_Acl_AclSet_AclEntry_Transport_SourcePort_Union()
}

// Acl_AclSet_AclEntry_Transport_SourcePort_Union_E_Transport_SourcePort is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port
// is to be set to a E_Transport_SourcePort value.
type Acl_AclSet_AclEntry_Transport_SourcePort_Union_E_Transport_SourcePort struct {
	E_Transport_SourcePort	E_Transport_SourcePort
}

// Is_Acl_AclSet_AclEntry_Transport_SourcePort_Union ensures that Acl_AclSet_AclEntry_Transport_SourcePort_Union_E_Transport_SourcePort
// implements the Acl_AclSet_AclEntry_Transport_SourcePort_Union interface.
func (*Acl_AclSet_AclEntry_Transport_SourcePort_Union_E_Transport_SourcePort) Is_Acl_AclSet_AclEntry_Transport_SourcePort_Union() {}

// Acl_AclSet_AclEntry_Transport_SourcePort_Union_String is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port
// is to be set to a string value.
type Acl_AclSet_AclEntry_Transport_SourcePort_Union_String struct {
	String	string
}

// Is_Acl_AclSet_AclEntry_Transport_SourcePort_Union ensures that Acl_AclSet_AclEntry_Transport_SourcePort_Union_String
// implements the Acl_AclSet_AclEntry_Transport_SourcePort_Union interface.
func (*Acl_AclSet_AclEntry_Transport_SourcePort_Union_String) Is_Acl_AclSet_AclEntry_Transport_SourcePort_Union() {}

// Acl_AclSet_AclEntry_Transport_SourcePort_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port
// is to be set to a uint16 value.
type Acl_AclSet_AclEntry_Transport_SourcePort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_Acl_AclSet_AclEntry_Transport_SourcePort_Union ensures that Acl_AclSet_AclEntry_Transport_SourcePort_Union_Uint16
// implements the Acl_AclSet_AclEntry_Transport_SourcePort_Union interface.
func (*Acl_AclSet_AclEntry_Transport_SourcePort_Union_Uint16) Is_Acl_AclSet_AclEntry_Transport_SourcePort_Union() {}

// To_Acl_AclSet_AclEntry_Transport_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Acl_AclSet_AclEntry_Transport_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Acl_AclSet_AclEntry_Transport) To_Acl_AclSet_AclEntry_Transport_SourcePort_Union(i interface{}) (Acl_AclSet_AclEntry_Transport_SourcePort_Union, error) {
	switch v := i.(type) {
	case E_Transport_SourcePort:
		return &Acl_AclSet_AclEntry_Transport_SourcePort_Union_E_Transport_SourcePort{v}, nil
	case string:
		return &Acl_AclSet_AclEntry_Transport_SourcePort_Union_String{v}, nil
	case uint16:
		return &Acl_AclSet_AclEntry_Transport_SourcePort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Acl_AclSet_AclEntry_Transport_SourcePort_Union, unknown union type, got: %T, want any of [E_Transport_SourcePort, string, uint16]", i, i)
	}
}


// Acl_Interface represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_Interface struct {
	EgressAclSet	map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet	`path:"egress-acl-sets/egress-acl-set" module:"openconfig-acl"`
	Id	*string	`path:"config/id|id" module:"openconfig-acl"`
	IngressAclSet	map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet	`path:"ingress-acl-sets/ingress-acl-set" module:"openconfig-acl"`
	InterfaceRef	*Acl_Interface_InterfaceRef	`path:"interface-ref" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface) IsYANGGoStruct() {}

// Acl_Interface_EgressAclSet_Key represents the key for list EgressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_EgressAclSet_Key struct {
	SetName	string	`path:"set-name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}

// Acl_Interface_IngressAclSet_Key represents the key for list IngressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_IngressAclSet_Key struct {
	SetName	string	`path:"set-name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}

// NewEgressAclSet creates a new entry in the EgressAclSet list of the
// Acl_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface) NewEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_Interface_EgressAclSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet)
	}

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressAclSet", key)
	}

	t.EgressAclSet[key] = &Acl_Interface_EgressAclSet{
		SetName: &SetName,
		Type: Type,
	}

	return t.EgressAclSet[key], nil
}

// GetOrCreateEgressAclSet retrieves the value with the specified keys from
// the receiver Acl_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface) GetOrCreateEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_Interface_EgressAclSet){

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

	if v, ok := t.EgressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetEgressAclSet retrieves the value with the specified key from
// the EgressAclSet map field of Acl_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface) GetEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_Interface_EgressAclSet){

	if t == nil {
		return nil
	}

  key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

  if lm, ok := t.EgressAclSet[key]; ok {
    return lm
  }
  return nil
}

// NewIngressAclSet creates a new entry in the IngressAclSet list of the
// Acl_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface) NewIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_Interface_IngressAclSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet)
	}

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IngressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IngressAclSet", key)
	}

	t.IngressAclSet[key] = &Acl_Interface_IngressAclSet{
		SetName: &SetName,
		Type: Type,
	}

	return t.IngressAclSet[key], nil
}

// GetOrCreateIngressAclSet retrieves the value with the specified keys from
// the receiver Acl_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface) GetOrCreateIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_Interface_IngressAclSet){

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

	if v, ok := t.IngressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIngressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIngressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetIngressAclSet retrieves the value with the specified key from
// the IngressAclSet map field of Acl_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface) GetIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*Acl_Interface_IngressAclSet){

	if t == nil {
		return nil
	}

  key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

  if lm, ok := t.IngressAclSet[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Acl_Interface) GetOrCreateInterfaceRef() *Acl_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Acl_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Acl_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_Interface) GetInterfaceRef() *Acl_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// ΛListKeyMap returns the keys of the Acl_Interface struct, which is a YANG list entry.
func (t *Acl_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_Interface_EgressAclSet represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSet struct {
	AclEntry	map[uint32]*Acl_Interface_EgressAclSet_AclEntry	`path:"acl-entries/acl-entry" module:"openconfig-acl"`
	SetName	*string	`path:"config/set-name|set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"config/type|type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_Interface_EgressAclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface_EgressAclSet) NewAclEntry(SequenceId uint32) (*Acl_Interface_EgressAclSet_AclEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_EgressAclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_Interface_EgressAclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_Interface_EgressAclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface_EgressAclSet) GetOrCreateAclEntry(SequenceId uint32) (*Acl_Interface_EgressAclSet_AclEntry){

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_Interface_EgressAclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface_EgressAclSet) GetAclEntry(SequenceId uint32) (*Acl_Interface_EgressAclSet_AclEntry){

	if t == nil {
		return nil
	}

  key := SequenceId

  if lm, ok := t.AclEntry[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Acl_Interface_EgressAclSet struct, which is a YANG list entry.
func (t *Acl_Interface_EgressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}


	return map[string]interface{}{
		"set-name": *t.SetName,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_EgressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_EgressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_Interface_EgressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry struct {
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"state/sequence-id|sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet_AclEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Acl_Interface_EgressAclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_EgressAclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_Interface_IngressAclSet represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSet struct {
	AclEntry	map[uint32]*Acl_Interface_IngressAclSet_AclEntry	`path:"acl-entries/acl-entry" module:"openconfig-acl"`
	SetName	*string	`path:"config/set-name|set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"config/type|type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_Interface_IngressAclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface_IngressAclSet) NewAclEntry(SequenceId uint32) (*Acl_Interface_IngressAclSet_AclEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_IngressAclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_Interface_IngressAclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_Interface_IngressAclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface_IngressAclSet) GetOrCreateAclEntry(SequenceId uint32) (*Acl_Interface_IngressAclSet_AclEntry){

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_Interface_IngressAclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface_IngressAclSet) GetAclEntry(SequenceId uint32) (*Acl_Interface_IngressAclSet_AclEntry){

	if t == nil {
		return nil
	}

  key := SequenceId

  if lm, ok := t.AclEntry[key]; ok {
    return lm
  }
  return nil
}

// ΛListKeyMap returns the keys of the Acl_Interface_IngressAclSet struct, which is a YANG list entry.
func (t *Acl_Interface_IngressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}


	return map[string]interface{}{
		"set-name": *t.SetName,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_IngressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_IngressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_Interface_IngressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry struct {
	MatchedOctets	*uint64	`path:"state/matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"state/matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"state/sequence-id|sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet_AclEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Acl_Interface_IngressAclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_IngressAclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Acl_Interface_InterfaceRef represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRef struct {
	Interface	*string	`path:"config/interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"config/subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that Acl_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	AdminStatus	E_Interface_AdminStatus	`path:"state/admin-status" module:"openconfig-interfaces"`
	Counters	*Interface_Counters	`path:"state/counters" module:"openconfig-interfaces"`
	Description	*string	`path:"config/description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-interfaces"`
	HoldTime	*Interface_HoldTime	`path:"hold-time" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"state/ifindex" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"state/last-change" module:"openconfig-interfaces"`
	Logical	*bool	`path:"state/logical" module:"openconfig-interfaces"`
	LoopbackMode	*bool	`path:"config/loopback-mode" module:"openconfig-interfaces"`
	Mtu	*uint16	`path:"config/mtu" module:"openconfig-interfaces"`
	Name	*string	`path:"config/name|name" module:"openconfig-interfaces"`
	OperStatus	E_Interface_OperStatus	`path:"state/oper-status" module:"openconfig-interfaces"`
	Subinterface	map[uint32]*Interface_Subinterface	`path:"subinterfaces/subinterface" module:"openconfig-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"config/type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) (*Interface_Subinterface){

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) (*Interface_Subinterface){

	if t == nil {
		return nil
	}

  key := Index

  if lm, ok := t.Subinterface[key]; ok {
    return lm
  }
  return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	Down	*uint32	`path:"config/down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"config/up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	AdminStatus	E_Interface_AdminStatus	`path:"state/admin-status" module:"openconfig-interfaces"`
	Counters	*Interface_Subinterface_Counters	`path:"state/counters" module:"openconfig-interfaces"`
	Description	*string	`path:"config/description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"config/enabled" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"state/ifindex" module:"openconfig-interfaces"`
	Index	*uint32	`path:"config/index|index" module:"openconfig-interfaces"`
	LastChange	*uint64	`path:"state/last-change" module:"openconfig-interfaces"`
	Logical	*bool	`path:"state/logical" module:"openconfig-interfaces"`
	Name	*string	`path:"state/name" module:"openconfig-interfaces"`
	OperStatus	E_Interface_OperStatus	`path:"state/oper-status" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateCounters() *Interface_Subinterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetCounters() *Interface_Subinterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// ΛListKeyMap returns the keys of the Interface_Subinterface struct, which is a YANG list entry.
func (t *Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors	*uint64	`path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InPkts	*uint64	`path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint64	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*uint64	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutPkts	*uint64	`path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node Interface_AdminStatus. An additional value named
// Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_AdminStatus int64

// IsYANGGoEnum ensures that Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_AdminStatus.
func (E_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_AdminStatus.
func (e E_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_AdminStatus")
}

const (
	// Interface_AdminStatus_UNSET corresponds to the value UNSET of Interface_AdminStatus
	Interface_AdminStatus_UNSET E_Interface_AdminStatus = 0
	// Interface_AdminStatus_UP corresponds to the value UP of Interface_AdminStatus
	Interface_AdminStatus_UP E_Interface_AdminStatus = 1
	// Interface_AdminStatus_DOWN corresponds to the value DOWN of Interface_AdminStatus
	Interface_AdminStatus_DOWN E_Interface_AdminStatus = 2
	// Interface_AdminStatus_TESTING corresponds to the value TESTING of Interface_AdminStatus
	Interface_AdminStatus_TESTING E_Interface_AdminStatus = 3
)


// E_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node Interface_OperStatus. An additional value named
// Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_OperStatus int64

// IsYANGGoEnum ensures that Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_OperStatus.
func (E_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Interface_OperStatus.
func (e E_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_OperStatus")
}

const (
	// Interface_OperStatus_UNSET corresponds to the value UNSET of Interface_OperStatus
	Interface_OperStatus_UNSET E_Interface_OperStatus = 0
	// Interface_OperStatus_UP corresponds to the value UP of Interface_OperStatus
	Interface_OperStatus_UP E_Interface_OperStatus = 2
	// Interface_OperStatus_DOWN corresponds to the value DOWN of Interface_OperStatus
	Interface_OperStatus_DOWN E_Interface_OperStatus = 3
	// Interface_OperStatus_TESTING corresponds to the value TESTING of Interface_OperStatus
	Interface_OperStatus_TESTING E_Interface_OperStatus = 4
	// Interface_OperStatus_UNKNOWN corresponds to the value UNKNOWN of Interface_OperStatus
	Interface_OperStatus_UNKNOWN E_Interface_OperStatus = 5
	// Interface_OperStatus_DORMANT corresponds to the value DORMANT of Interface_OperStatus
	Interface_OperStatus_DORMANT E_Interface_OperStatus = 6
	// Interface_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of Interface_OperStatus
	Interface_OperStatus_NOT_PRESENT E_Interface_OperStatus = 7
	// Interface_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of Interface_OperStatus
	Interface_OperStatus_LOWER_LAYER_DOWN E_Interface_OperStatus = 8
)


// E_OpenconfigAcl_ACL_COUNTER_CAPABILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_ACL_COUNTER_CAPABILITY. An additional value named
// OpenconfigAcl_ACL_COUNTER_CAPABILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_ACL_COUNTER_CAPABILITY int64

// IsYANGGoEnum ensures that OpenconfigAcl_ACL_COUNTER_CAPABILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_ACL_COUNTER_CAPABILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_ACL_COUNTER_CAPABILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_ACL_COUNTER_CAPABILITY.
func (E_OpenconfigAcl_ACL_COUNTER_CAPABILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAcl_ACL_COUNTER_CAPABILITY.
func (e E_OpenconfigAcl_ACL_COUNTER_CAPABILITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAcl_ACL_COUNTER_CAPABILITY")
}

const (
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_UNSET corresponds to the value UNSET of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_UNSET E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 0
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_AGGREGATE_ONLY corresponds to the value AGGREGATE_ONLY of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_AGGREGATE_ONLY E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 1
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_AGGREGATE corresponds to the value INTERFACE_AGGREGATE of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_AGGREGATE E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 2
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_ONLY corresponds to the value INTERFACE_ONLY of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_ONLY E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 3
)


// E_OpenconfigAcl_ACL_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_ACL_TYPE. An additional value named
// OpenconfigAcl_ACL_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_ACL_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAcl_ACL_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_ACL_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_ACL_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_ACL_TYPE.
func (E_OpenconfigAcl_ACL_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAcl_ACL_TYPE.
func (e E_OpenconfigAcl_ACL_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAcl_ACL_TYPE")
}

const (
	// OpenconfigAcl_ACL_TYPE_UNSET corresponds to the value UNSET of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_UNSET E_OpenconfigAcl_ACL_TYPE = 0
	// OpenconfigAcl_ACL_TYPE_ACL_IPV4 corresponds to the value ACL_IPV4 of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_IPV4 E_OpenconfigAcl_ACL_TYPE = 1
	// OpenconfigAcl_ACL_TYPE_ACL_IPV6 corresponds to the value ACL_IPV6 of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_IPV6 E_OpenconfigAcl_ACL_TYPE = 2
	// OpenconfigAcl_ACL_TYPE_ACL_L2 corresponds to the value ACL_L2 of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_L2 E_OpenconfigAcl_ACL_TYPE = 3
	// OpenconfigAcl_ACL_TYPE_ACL_MIXED corresponds to the value ACL_MIXED of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_MIXED E_OpenconfigAcl_ACL_TYPE = 4
)


// E_OpenconfigAcl_FORWARDING_ACTION is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_FORWARDING_ACTION. An additional value named
// OpenconfigAcl_FORWARDING_ACTION_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_FORWARDING_ACTION int64

// IsYANGGoEnum ensures that OpenconfigAcl_FORWARDING_ACTION implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_FORWARDING_ACTION can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_FORWARDING_ACTION) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_FORWARDING_ACTION.
func (E_OpenconfigAcl_FORWARDING_ACTION) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAcl_FORWARDING_ACTION.
func (e E_OpenconfigAcl_FORWARDING_ACTION) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAcl_FORWARDING_ACTION")
}

const (
	// OpenconfigAcl_FORWARDING_ACTION_UNSET corresponds to the value UNSET of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_UNSET E_OpenconfigAcl_FORWARDING_ACTION = 0
	// OpenconfigAcl_FORWARDING_ACTION_ACCEPT corresponds to the value ACCEPT of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_ACCEPT E_OpenconfigAcl_FORWARDING_ACTION = 1
	// OpenconfigAcl_FORWARDING_ACTION_DROP corresponds to the value DROP of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_DROP E_OpenconfigAcl_FORWARDING_ACTION = 2
	// OpenconfigAcl_FORWARDING_ACTION_REJECT corresponds to the value REJECT of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_REJECT E_OpenconfigAcl_FORWARDING_ACTION = 3
)


// E_OpenconfigAcl_LOG_ACTION is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_LOG_ACTION. An additional value named
// OpenconfigAcl_LOG_ACTION_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_LOG_ACTION int64

// IsYANGGoEnum ensures that OpenconfigAcl_LOG_ACTION implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_LOG_ACTION can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_LOG_ACTION) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_LOG_ACTION.
func (E_OpenconfigAcl_LOG_ACTION) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAcl_LOG_ACTION.
func (e E_OpenconfigAcl_LOG_ACTION) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAcl_LOG_ACTION")
}

const (
	// OpenconfigAcl_LOG_ACTION_UNSET corresponds to the value UNSET of OpenconfigAcl_LOG_ACTION
	OpenconfigAcl_LOG_ACTION_UNSET E_OpenconfigAcl_LOG_ACTION = 0
	// OpenconfigAcl_LOG_ACTION_LOG_NONE corresponds to the value LOG_NONE of OpenconfigAcl_LOG_ACTION
	OpenconfigAcl_LOG_ACTION_LOG_NONE E_OpenconfigAcl_LOG_ACTION = 1
	// OpenconfigAcl_LOG_ACTION_LOG_SYSLOG corresponds to the value LOG_SYSLOG of OpenconfigAcl_LOG_ACTION
	OpenconfigAcl_LOG_ACTION_LOG_SYSLOG E_OpenconfigAcl_LOG_ACTION = 2
)


// E_OpenconfigPacketMatchTypes_ETHERTYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_ETHERTYPE. An additional value named
// OpenconfigPacketMatchTypes_ETHERTYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_ETHERTYPE int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_ETHERTYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_ETHERTYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_ETHERTYPE.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPacketMatchTypes_ETHERTYPE.
func (e E_OpenconfigPacketMatchTypes_ETHERTYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPacketMatchTypes_ETHERTYPE")
}

const (
	// OpenconfigPacketMatchTypes_ETHERTYPE_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_UNSET E_OpenconfigPacketMatchTypes_ETHERTYPE = 0
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ARP corresponds to the value ETHERTYPE_ARP of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ARP E_OpenconfigPacketMatchTypes_ETHERTYPE = 1
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV4 corresponds to the value ETHERTYPE_IPV4 of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV4 E_OpenconfigPacketMatchTypes_ETHERTYPE = 2
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV6 corresponds to the value ETHERTYPE_IPV6 of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV6 E_OpenconfigPacketMatchTypes_ETHERTYPE = 3
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_LLDP corresponds to the value ETHERTYPE_LLDP of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_LLDP E_OpenconfigPacketMatchTypes_ETHERTYPE = 4
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_MPLS corresponds to the value ETHERTYPE_MPLS of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_MPLS E_OpenconfigPacketMatchTypes_ETHERTYPE = 5
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ROCE corresponds to the value ETHERTYPE_ROCE of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ROCE E_OpenconfigPacketMatchTypes_ETHERTYPE = 6
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_VLAN corresponds to the value ETHERTYPE_VLAN of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_VLAN E_OpenconfigPacketMatchTypes_ETHERTYPE = 7
)


// E_OpenconfigPacketMatchTypes_IP_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_IP_PROTOCOL. An additional value named
// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_IP_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_IP_PROTOCOL.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPacketMatchTypes_IP_PROTOCOL.
func (e E_OpenconfigPacketMatchTypes_IP_PROTOCOL) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPacketMatchTypes_IP_PROTOCOL")
}

const (
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 0
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH corresponds to the value IP_AUTH of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 1
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE corresponds to the value IP_GRE of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 2
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP corresponds to the value IP_ICMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 3
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP corresponds to the value IP_IGMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 4
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP corresponds to the value IP_L2TP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 5
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM corresponds to the value IP_PIM of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 6
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP corresponds to the value IP_RSVP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 7
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP corresponds to the value IP_TCP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 8
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP corresponds to the value IP_UDP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 9
)


// E_OpenconfigPacketMatchTypes_TCP_FLAGS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_TCP_FLAGS. An additional value named
// OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_TCP_FLAGS int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_TCP_FLAGS implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_TCP_FLAGS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_TCP_FLAGS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_TCP_FLAGS.
func (E_OpenconfigPacketMatchTypes_TCP_FLAGS) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPacketMatchTypes_TCP_FLAGS.
func (e E_OpenconfigPacketMatchTypes_TCP_FLAGS) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPacketMatchTypes_TCP_FLAGS")
}

const (
	// OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET E_OpenconfigPacketMatchTypes_TCP_FLAGS = 0
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ACK corresponds to the value TCP_ACK of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ACK E_OpenconfigPacketMatchTypes_TCP_FLAGS = 1
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_CWR corresponds to the value TCP_CWR of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_CWR E_OpenconfigPacketMatchTypes_TCP_FLAGS = 2
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ECE corresponds to the value TCP_ECE of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ECE E_OpenconfigPacketMatchTypes_TCP_FLAGS = 3
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_FIN corresponds to the value TCP_FIN of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_FIN E_OpenconfigPacketMatchTypes_TCP_FLAGS = 4
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_PSH corresponds to the value TCP_PSH of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_PSH E_OpenconfigPacketMatchTypes_TCP_FLAGS = 5
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_RST corresponds to the value TCP_RST of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_RST E_OpenconfigPacketMatchTypes_TCP_FLAGS = 6
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_SYN corresponds to the value TCP_SYN of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_SYN E_OpenconfigPacketMatchTypes_TCP_FLAGS = 7
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_URG corresponds to the value TCP_URG of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_URG E_OpenconfigPacketMatchTypes_TCP_FLAGS = 8
)


// E_Transport_DestinationPort is a derived int64 type which is used to represent
// the enumerated node Transport_DestinationPort. An additional value named
// Transport_DestinationPort_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Transport_DestinationPort int64

// IsYANGGoEnum ensures that Transport_DestinationPort implements the yang.GoEnum
// interface. This ensures that Transport_DestinationPort can be identified as a
// mapped type for a YANG enumeration.
func (E_Transport_DestinationPort) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Transport_DestinationPort.
func (E_Transport_DestinationPort) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Transport_DestinationPort.
func (e E_Transport_DestinationPort) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Transport_DestinationPort")
}

const (
	// Transport_DestinationPort_UNSET corresponds to the value UNSET of Transport_DestinationPort
	Transport_DestinationPort_UNSET E_Transport_DestinationPort = 0
	// Transport_DestinationPort_ANY corresponds to the value ANY of Transport_DestinationPort
	Transport_DestinationPort_ANY E_Transport_DestinationPort = 1
)


// E_Transport_SourcePort is a derived int64 type which is used to represent
// the enumerated node Transport_SourcePort. An additional value named
// Transport_SourcePort_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Transport_SourcePort int64

// IsYANGGoEnum ensures that Transport_SourcePort implements the yang.GoEnum
// interface. This ensures that Transport_SourcePort can be identified as a
// mapped type for a YANG enumeration.
func (E_Transport_SourcePort) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Transport_SourcePort.
func (E_Transport_SourcePort) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Transport_SourcePort.
func (e E_Transport_SourcePort) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Transport_SourcePort")
}

const (
	// Transport_SourcePort_UNSET corresponds to the value UNSET of Transport_SourcePort
	Transport_SourcePort_UNSET E_Transport_SourcePort = 0
	// Transport_SourcePort_ANY corresponds to the value ANY of Transport_SourcePort
	Transport_SourcePort_ANY E_Transport_SourcePort = 1
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_Interface_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_Interface_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigAcl_ACL_COUNTER_CAPABILITY": {
		1: {Name: "AGGREGATE_ONLY", DefiningModule: "openconfig-acl"},
		2: {Name: "INTERFACE_AGGREGATE", DefiningModule: "openconfig-acl"},
		3: {Name: "INTERFACE_ONLY", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigAcl_ACL_TYPE": {
		1: {Name: "ACL_IPV4", DefiningModule: "openconfig-acl"},
		2: {Name: "ACL_IPV6", DefiningModule: "openconfig-acl"},
		3: {Name: "ACL_L2", DefiningModule: "openconfig-acl"},
		4: {Name: "ACL_MIXED", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigAcl_FORWARDING_ACTION": {
		1: {Name: "ACCEPT", DefiningModule: "openconfig-acl"},
		2: {Name: "DROP", DefiningModule: "openconfig-acl"},
		3: {Name: "REJECT", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigAcl_LOG_ACTION": {
		1: {Name: "LOG_NONE", DefiningModule: "openconfig-acl"},
		2: {Name: "LOG_SYSLOG", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigPacketMatchTypes_ETHERTYPE": {
		1: {Name: "ETHERTYPE_ARP", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "ETHERTYPE_IPV4", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "ETHERTYPE_IPV6", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "ETHERTYPE_LLDP", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "ETHERTYPE_MPLS", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "ETHERTYPE_ROCE", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "ETHERTYPE_VLAN", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPacketMatchTypes_IP_PROTOCOL": {
		1: {Name: "IP_AUTH", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "IP_GRE", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "IP_ICMP", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "IP_IGMP", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "IP_L2TP", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "IP_PIM", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "IP_RSVP", DefiningModule: "openconfig-packet-match-types"},
		8: {Name: "IP_TCP", DefiningModule: "openconfig-packet-match-types"},
		9: {Name: "IP_UDP", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPacketMatchTypes_TCP_FLAGS": {
		1: {Name: "TCP_ACK", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "TCP_CWR", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "TCP_ECE", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "TCP_FIN", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "TCP_PSH", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "TCP_RST", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "TCP_SYN", DefiningModule: "openconfig-packet-match-types"},
		8: {Name: "TCP_URG", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_Transport_DestinationPort": {
		1: {Name: "ANY"},
	},
	"E_Transport_SourcePort": {
		1: {Name: "ANY"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9d, 0x6d, 0x6f, 0xdb, 0x48,
		0xb2, 0xef, 0xdf, 0xfb, 0x53, 0x18, 0xc2, 0x79, 0x31, 0x01, 0xa2, 0xd8, 0x96, 0x65, 0x3b, 0x0e,
		0x70, 0x70, 0xe1, 0x71, 0x3c, 0x19, 0xdf, 0xcd, 0x83, 0xe1, 0x64, 0xe6, 0xdc, 0x41, 0x46, 0xc7,
		0x60, 0x28, 0x3a, 0x21, 0x22, 0x51, 0x5a, 0x92, 0xda, 0x89, 0x31, 0xe3, 0xef, 0x7e, 0x21, 0x89,
		0xa2, 0xa8, 0x47, 0xb2, 0xbb, 0xab, 0x29, 0x4a, 0xfe, 0x05, 0xbb, 0x13, 0x47, 0x16, 0x9b, 0x64,
		0x75, 0x55, 0xfd, 0xff, 0x55, 0xdd, 0x55, 0xfd, 0xf7, 0xde, 0xfe, 0xfe, 0xfe, 0x7e, 0xed, 0xbd,
		0xd3, 0xf5, 0x6a, 0xaf, 0xf6, 0x6b, 0xb5, 0xe7, 0xe3, 0x7f, 0xff, 0xcb, 0x0f, 0xda, 0xb5, 0x57,
		0xfb, 0x87, 0xc9, 0x3f, 0x2f, 0x7b, 0xc1, 0xbd, 0xff, 0x35, 0xf3, 0xc1, 0x6b, 0x3f, 0xac, 0xbd,
		0xda, 0x1f, 0x5f, 0x3c, 0xfa, 0xc0, 0x71, 0x3b, 0x33, 0x1f, 0xcc, 0x8c, 0x3a, 0xfc, 0xe5, 0xf3,
		0xd9, 0x5f, 0x25, 0x37, 0x38, 0x9a, 0xfb, 0x78, 0xfe, 0x46, 0xe9, 0x2f, 0x6e, 0x42, 0xef, 0xde,
		0xff, 0xb1, 0x70, 0x8b, 0x99, 0xdb, 0xf4, 0xdc, 0xfa, 0xe2, 0x9d, 0x46, 0xdf, 0xf8, 0xd8, 0x1b,
		0x84, 0xae, 0xb7, 0xf4, 0xea, 0xf1, 0xd3, 0x78, 0x0f, 0x7f, 0xf5, 0xc2, 0xe1, 0x03, 0xd5, 0xfa,
		0xe3, 0x1b, 0x3d, 0x5f, 0xfe, 0xc5, 0x5f, 0x9d, 0xe8, 0x22, 0xfc, 0x3a, 0xe8, 0x7a, 0x41, 0x5c,
		0x7b, 0xb5, 0x1f, 0x87, 0x03, 0x6f, 0xc5, 0x17, 0x33, 0xdf, 0x9a, 0x3c, 0xd7, 0xc2, 0x17, 0x1f,
		0x67, 0x3e, 0x79, 0x9c, 0x7b, 0xe3, 0x79, 0x11, 0x67, 0x45, 0x5d, 0x8f, 0xbc, 0x38, 0x5a, 0xfd,
		0x3a, 0x19, 0xb9, 0x8f, 0xbf, 0xb9, 0xe2, 0x21, 0x97, 0x4f, 0x42, 0xee, 0x64, 0x14, 0x99, 0x94,
		0xe2, 0x93, 0x53, 0x74, 0x92, 0x94, 0x27, 0x4b, 0x79, 0xd2, 0x94, 0x26, 0x6f, 0xf9, 0x24, 0xae,
		0x98, 0xcc, 0xdc, 0x49, 0x9d, 0x9f, 0xdc, 0x7c, 0x29, 0xcc, 0xcd, 0x71, 0x9e, 0x0c, 0xd6, 0x4f,
		0x75, 0xe1, 0x29, 0x57, 0x99, 0x7a, 0x75, 0x15, 0x50, 0x55, 0x05, 0x6d, 0x95, 0xd0, 0x56, 0x0d,
		0x2d, 0x15, 0x59, 0xaf, 0x2a, 0x39, 0x2a, 0x53, 0x58, 0x75, 0x66, 0x54, 0xc8, 0x0b, 0xe2, 0xd0,
		0xf7, 0xa2, 0xe2, 0x12, 0xcc, 0xaa, 0xd3, 0xe4, 0xe2, 0x82, 0xa2, 0x28, 0xa6, 0x5a, 0xca, 0x2a,
		0xa6, 0xa3, 0x6a, 0xfa, 0x2a, 0xa7, 0xab, 0x7a, 0xc6, 0x2a, 0x68, 0xac, 0x8a, 0x46, 0x2a, 0x59,
		0x4c, 0x35, 0x0b, 0xaa, 0xa8, 0xb2, 0xaa, 0x2e, 0xa8, 0xec, 0x83, 0xba, 0xdc, 0xe7, 0x15, 0xf7,
		0x41, 0x55, 0xee, 0x6a, 0xea, 0xab, 0xad, 0xc6, 0x26, 0xea, 0x6c, 0xae, 0xd6, 0xa6, 0xea, 0x2d,
		0xa6, 0xe6, 0x62, 0xea, 0x2e, 0xa2, 0xf6, 0x6a, 0xea, 0xaf, 0x68, 0x06, 0xda, 0xe6, 0x90, 0x31,
		0x8b, 0xd8, 0xef, 0x05, 0x91, 0xfe, 0x6c, 0x4d, 0x8d, 0x63, 0x3c, 0x90, 0xa6, 0x88, 0xf5, 0x4c,
		0xc4, 0xd8, 0x54, 0x24, 0x4c, 0x46, 0xce, 0x74, 0xa4, 0x4c, 0x48, 0xdc, 0x94, 0xc4, 0x4d, 0x4a,
		0xd4, 0xb4, 0xf4, 0x4c, 0x4c, 0xd3, 0xd4, 0x8c, 0x4d, 0x2e, 0x1d, 0xc0, 0x9d, 0xe8, 0xac, 0xe1,
		0x24, 0x4f, 0xd4, 0x2e, 0x19, 0xcf, 0x70, 0x42, 0xcc, 0x0c, 0x51, 0xcc, 0x20, 0x25, 0x0d, 0x53,
		0xde, 0x40, 0xa5, 0x0d, 0xd5, 0x9a, 0xc1, 0x5a, 0x33, 0x5c, 0x2b, 0x06, 0x6c, 0x66, 0xc8, 0x86,
		0x06, 0x2d, 0x66, 0xd8, 0xe9, 0x40, 0xf7, 0xbd, 0xf0, 0x2f, 0x27, 0x6c, 0xfb, 0xc1, 0xd7, 0xfa,
		0x18, 0x1d, 0xe5, 0xf4, 0x64, 0xa2, 0xc9, 0x8b, 0xb7, 0x10, 0x9a, 0xd6, 0xd9, 0xec, 0x9c, 0xf1,
		0x70, 0x52, 0xee, 0xc0, 0x86, 0x5b, 0xb0, 0xe7, 0x1e, 0x6c, 0xb9, 0x09, 0xeb, 0xee, 0xc2, 0xba,
		0xdb, 0xb0, 0xea, 0x3e, 0x64, 0xdc, 0x88, 0x90, 0x3b, 0x49, 0xdf, 0xf4, 0xd3, 0x43, 0xdf, 0xb3,
		0xa3, 0xaf, 0x7e, 0xdb, 0x0b, 0x62, 0x3f, 0x7e, 0x08, 0xbd, 0x7b, 0x49, 0xa5, 0x9d, 0x30, 0x81,
		0x13, 0xc1, 0x31, 0xaf, 0x93, 0x47, 0xfd, 0xd9, 0x89, 0x2c, 0x98, 0xc3, 0x44, 0x20, 0xbf, 0x7c,
		0xb8, 0xfd, 0x9f, 0x8b, 0xdb, 0xd7, 0xd7, 0xef, 0xdf, 0xdc, 0x5d, 0x5c, 0x7e, 0xba, 0xfe, 0xf0,
		0x5e, 0xda, 0x2c, 0x7e, 0x77, 0x3a, 0x83, 0x51, 0xea, 0xeb, 0xb3, 0xe8, 0xb8, 0xc3, 0x3f, 0x7f,
		0x8b, 0x8f, 0x38, 0x23, 0x9a, 0x8b, 0xcb, 0xcb, 0xab, 0x9b, 0x4f, 0x35, 0xf1, 0x9b, 0x3c, 0x3e,
		0xdf, 0x36, 0x49, 0xdc, 0x5e, 0xfd, 0xdf, 0xab, 0x4b, 0x24, 0xf1, 0x6a, 0xbf, 0xf6, 0xfa, 0xf6,
		0xc3, 0x8d, 0x05, 0x39, 0x88, 0x8e, 0xd8, 0xaa, 0x1a, 0x2a, 0xec, 0x55, 0x40, 0x4f, 0x6a, 0x9d,
		0x9e, 0x3d, 0x6a, 0x99, 0x19, 0x5b, 0x08, 0x01, 0x5f, 0x7b, 0xf7, 0xce, 0xa0, 0x33, 0x82, 0xfa,
		0xb7, 0x1f, 0xde, 0xdc, 0xbd, 0xff, 0xf0, 0xfe, 0x0a, 0xba, 0x0a, 0x5d, 0x85, 0xae, 0x42, 0x57,
		0x9f, 0x34, 0x5d, 0x1d, 0x3a, 0x43, 0x78, 0xea, 0xa2, 0x4c, 0x3e, 0xfe, 0xf1, 0xf1, 0xed, 0x87,
		0x37, 0x30, 0xb4, 0x0c, 0x5c, 0xc2, 0xd2, 0xca, 0x66, 0x69, 0x1b, 0x4d, 0x45, 0x5e, 0x04, 0x41,
		0x2f, 0x76, 0xc4, 0xf8, 0x5d, 0x2d, 0x72, 0xbf, 0x79, 0x5d, 0xa7, 0xef, 0xc4, 0xdf, 0x86, 0x5a,
		0x75, 0xd0, 0xeb, 0x7b, 0xc1, 0x78, 0xd5, 0x60, 0x88, 0x64, 0x07, 0xc9, 0xff, 0x47, 0xfb, 0xb9,
		0x26, 0x3f, 0x1c, 0x64, 0x76, 0x6b, 0xa4, 0x3f, 0x3f, 0x1c, 0x24, 0xab, 0x7d, 0x07, 0xc9, 0x9a,
		0xc3, 0xde, 0x66, 0x44, 0x6c, 0x20, 0xde, 0x5a, 0x14, 0x3b, 0xb1, 0x27, 0xb7, 0xf8, 0x32, 0x1e,
		0xae, 0x62, 0x6b, 0x2f, 0x0d, 0xd6, 0x5e, 0x2a, 0xc0, 0x4e, 0x59, 0x7b, 0x51, 0x08, 0x11, 0x59,
		0x7b, 0x21, 0x98, 0x25, 0x98, 0x25, 0x98, 0x25, 0x98, 0x65, 0xed, 0x65, 0xd7, 0x62, 0x5a, 0xd6,
		0x5e, 0x58, 0x7b, 0x99, 0x97, 0x04, 0x6b, 0x2f, 0x1b, 0x89, 0xea, 0x59, 0x7b, 0x61, 0xed, 0x05,
		0xba, 0x0a, 0x5d, 0x85, 0xae, 0x3e, 0x71, 0xba, 0xca, 0xda, 0xcb, 0x72, 0x99, 0xb0, 0xf6, 0xc2,
		0xda, 0xcb, 0xc6, 0x59, 0x1a, 0x6b, 0x2f, 0xeb, 0xd6, 0x5e, 0xc6, 0x4b, 0x0e, 0x9b, 0x5a, 0x7a,
		0x29, 0xb5, 0xd6, 0x46, 0x68, 0x2e, 0xc4, 0xe7, 0xa0, 0x66, 0xb4, 0x00, 0x15, 0x0e, 0xdc, 0x38,
		0x98, 0xe4, 0x06, 0xdc, 0xce, 0xdd, 0x85, 0xdb, 0xf9, 0xe8, 0xc5, 0xc3, 0xbf, 0xae, 0x86, 0x37,
		0xb9, 0xbb, 0x48, 0x6e, 0xb2, 0x57, 0xce, 0x04, 0x69, 0x4c, 0x8e, 0x69, 0x0d, 0x93, 0x4c, 0xed,
		0x12, 0xc5, 0x83, 0x36, 0x22, 0x08, 0x8a, 0x07, 0x2d, 0x3a, 0x34, 0xe3, 0xe2, 0xc1, 0xb6, 0x17,
		0xb9, 0xa1, 0xdf, 0x17, 0x81, 0xa7, 0x54, 0xf7, 0xb2, 0x83, 0xca, 0x2c, 0x65, 0x1f, 0x52, 0x46,
		0xb8, 0x81, 0xa0, 0x9f, 0xa5, 0xec, 0x0a, 0xf0, 0x47, 0xb1, 0x20, 0x3e, 0xb3, 0xc7, 0x24, 0xf4,
		0x83, 0xaf, 0x12, 0xfa, 0x36, 0x01, 0xcc, 0x97, 0xdb, 0xb8, 0x71, 0xc7, 0xfb, 0xf7, 0xc0, 0x0b,
		0x5c, 0xaf, 0xee, 0xb7, 0x05, 0xb7, 0xef, 0x64, 0x06, 0xc5, 0xf3, 0xe1, 0xf9, 0xf0, 0x7c, 0x95,
		0xf2, 0x7c, 0x03, 0x3f, 0x88, 0x8f, 0x1b, 0x82, 0x9e, 0xef, 0x4c, 0x60, 0xa8, 0x5b, 0x27, 0xf8,
		0xea, 0x89, 0xe5, 0xf7, 0x04, 0x93, 0xbd, 0xef, 0xfc, 0xc0, 0xc2, 0xfa, 0x81, 0xe8, 0x2a, 0x4f,
		0x3a, 0xec, 0x28, 0x4b, 0x6a, 0x61, 0xdc, 0x5f, 0xc2, 0x71, 0x88, 0xfe, 0xda, 0xff, 0xea, 0x8f,
		0xfa, 0x18, 0x1e, 0xca, 0xa5, 0xc7, 0x04, 0x93, 0xdc, 0xef, 0x9c, 0x1f, 0x5b, 0x37, 0x55, 0xcd,
		0xc6, 0x79, 0xf3, 0xfc, 0xf4, 0xac, 0x71, 0x7e, 0xb2, 0x45, 0x73, 0x56, 0x91, 0x94, 0x66, 0x8b,
		0x74, 0xdd, 0x26, 0xd2, 0x75, 0x26, 0xdb, 0xd4, 0xcb, 0x49, 0xa4, 0xf9, 0x41, 0x7f, 0x10, 0xd7,
		0xfd, 0x20, 0xf6, 0xc2, 0x7b, 0xc7, 0xa4, 0x7b, 0x5a, 0xba, 0xd2, 0x37, 0x37, 0x20, 0xa9, 0x35,
		0x52, 0x6b, 0xa4, 0xd6, 0x8a, 0x0c, 0x40, 0x5f, 0x2e, 0xc2, 0x4a, 0xc2, 0xca, 0xea, 0x85, 0x95,
		0x95, 0x5d, 0x90, 0x9d, 0x83, 0xda, 0x2d, 0x2e, 0x8a, 0x4b, 0xdf, 0xa1, 0x1e, 0x7a, 0xf7, 0x72,
		0x1e, 0x70, 0x76, 0x58, 0x1c, 0x61, 0x11, 0x47, 0xe8, 0xdf, 0xe3, 0x07, 0x2d, 0xf8, 0x41, 0xff,
		0x9e, 0x12, 0x39, 0x59, 0x9e, 0x63, 0x87, 0xef, 0x08, 0x9b, 0xbb, 0xb8, 0xd9, 0xdb, 0x30, 0x7f,
		0x6b, 0x6e, 0xc0, 0x96, 0x3b, 0xb0, 0xee, 0x16, 0xac, 0xbb, 0x07, 0x9b, 0x6e, 0x42, 0x38, 0xf7,
		0x24, 0x55, 0x08, 0x20, 0xe4, 0x3e, 0x16, 0x39, 0x83, 0xbd, 0x4d, 0xba, 0xa6, 0x59, 0x8c, 0x3c,
		0xe7, 0x22, 0x9d, 0x29, 0x95, 0x76, 0x32, 0x36, 0x9d, 0x8d, 0x75, 0xa7, 0x63, 0xdb, 0xf9, 0x94,
		0xe6, 0x84, 0x4a, 0x73, 0x46, 0x65, 0x38, 0x25, 0x59, 0xe7, 0x24, 0xec, 0xa4, 0x52, 0x01, 0x88,
		0x17, 0x42, 0x2c, 0x68, 0x7b, 0xc7, 0x73, 0xee, 0x65, 0x8b, 0x21, 0x16, 0x98, 0xcb, 0x99, 0x85,
		0xb1, 0x6f, 0xd2, 0xa8, 0x75, 0xa8, 0x16, 0xaf, 0x52, 0x07, 0x19, 0xcd, 0x7f, 0x90, 0xfc, 0x7b,
		0xb4, 0xcd, 0x74, 0xaf, 0x9a, 0x8a, 0x23, 0xb9, 0x9e, 0x16, 0x0d, 0xbe, 0x94, 0x80, 0x47, 0x33,
		0x77, 0x01, 0x92, 0x80, 0x24, 0x20, 0x09, 0x48, 0x02, 0x92, 0x0a, 0x42, 0xd2, 0xe7, 0x29, 0x24,
		0xfd, 0xb7, 0x3b, 0x08, 0x43, 0x2f, 0x88, 0x7f, 0x7a, 0x76, 0xf0, 0xe2, 0xc5, 0x41, 0xfa, 0x8d,
		0x56, 0x72, 0x49, 0xd6, 0xcf, 0x46, 0x4b, 0x3e, 0x4b, 0x47, 0x6e, 0x7b, 0x3f, 0x2a, 0x8b, 0x6e,
		0x95, 0x8a, 0xfe, 0xae, 0x7e, 0xc4, 0xb2, 0x25, 0x89, 0xf6, 0x12, 0x09, 0x3d, 0xb7, 0xee, 0xfd,
		0x88, 0x5f, 0xc5, 0x5e, 0xc7, 0xeb, 0x7a, 0x71, 0xf8, 0x50, 0xef, 0x05, 0x75, 0xf7, 0xdb, 0x68,
		0xcf, 0x95, 0xd5, 0xe4, 0xc2, 0xbd, 0xd3, 0x89, 0x6c, 0x66, 0x17, 0xaa, 0x96, 0x58, 0x68, 0x49,
		0x25, 0x5a, 0x65, 0x97, 0x67, 0xa6, 0x94, 0xce, 0xd6, 0x32, 0xcd, 0xcc, 0xaa, 0x84, 0xc8, 0xa2,
		0x8d, 0xdc, 0xc4, 0x48, 0x34, 0xa8, 0x90, 0xe9, 0x70, 0xb8, 0x48, 0x7e, 0x05, 0x3a, 0x1d, 0x2e,
		0x00, 0x92, 0x74, 0x76, 0xb7, 0x41, 0x76, 0x77, 0x7b, 0x58, 0x2c, 0xd9, 0x5d, 0xb2, 0xbb, 0x84,
		0xd2, 0x84, 0xd2, 0x84, 0xd2, 0x84, 0xd2, 0x84, 0xd2, 0x64, 0x77, 0x57, 0x33, 0x5a, 0xb2, 0xbb,
		0x40, 0x12, 0x90, 0x04, 0x24, 0x01, 0x49, 0x95, 0x85, 0x24, 0xb2, 0xbb, 0x9b, 0x8b, 0xfe, 0xb6,
		0x3c, 0x05, 0x27, 0xd0, 0xd0, 0x4a, 0x30, 0x03, 0xc7, 0x5e, 0x77, 0xe5, 0x19, 0xac, 0x89, 0x64,
		0x2d, 0xf3, 0xda, 0x62, 0x5d, 0x0f, 0x1f, 0xe1, 0x7a, 0x72, 0xdf, 0xbb, 0xf4, 0xa7, 0x5b, 0xef,
		0x9e, 0x83, 0x68, 0x38, 0x88, 0x46, 0x81, 0x76, 0x52, 0x6c, 0x44, 0xb1, 0xd1, 0xb6, 0x3b, 0x60,
		0xba, 0x40, 0x56, 0x66, 0x2e, 0xec, 0x76, 0x83, 0x9c, 0x85, 0xbd, 0x4a, 0xd7, 0xb2, 0xf7, 0xff,
		0xd3, 0x14, 0x28, 0x60, 0x1f, 0x8e, 0x42, 0xd5, 0xfa, 0xd0, 0x9f, 0xf6, 0xbf, 0xc7, 0xf5, 0xae,
		0x13, 0xbb, 0xdf, 0xa8, 0x5d, 0xd7, 0x40, 0xa3, 0xa9, 0xf4, 0xa8, 0x60, 0xd7, 0x53, 0x41, 0x2a,
		0xd8, 0x4b, 0x36, 0x56, 0xa8, 0xa5, 0x45, 0x63, 0xae, 0x06, 0xc1, 0x14, 0x2b, 0xe3, 0x6c, 0x7b,
		0x51, 0xec, 0x07, 0x23, 0x5a, 0x54, 0x77, 0xda, 0xed, 0xd0, 0x8b, 0x22, 0xf9, 0x4d, 0x3f, 0xcb,
		0x6e, 0xc2, 0xf1, 0x31, 0x55, 0x73, 0x17, 0xb6, 0xdc, 0x86, 0x75, 0xf7, 0x61, 0xdd, 0x8d, 0x94,
		0xe0, 0x4e, 0xe4, 0x52, 0x8f, 0xfb, 0xdb, 0x71, 0x94, 0x4c, 0xff, 0x3f, 0xcd, 0xba, 0xb8, 0x16,
		0x4c, 0x5b, 0xd3, 0x0a, 0x8e, 0x79, 0xe3, 0xc4, 0xb1, 0x17, 0x06, 0xe2, 0x67, 0xb1, 0xd4, 0xfe,
		0xf7, 0xa7, 0x9f, 0x3e, 0x1f, 0xd6, 0xcf, 0x5b, 0xff, 0x7c, 0x3e, 0xaa, 0x9f, 0xb7, 0xc6, 0x3f,
		0x1e, 0x8d, 0xfe, 0x1a, 0xff, 0xdc, 0xf8, 0x7c, 0x58, 0x6f, 0x4e, 0x7e, 0x3e, 0xf9, 0x7c, 0x58,
		0x3f, 0x69, 0x3d, 0xfb, 0xf3, 0xcf, 0x17, 0xcf, 0xfe, 0x3e, 0x7e, 0x54, 0xbf, 0xf0, 0x20, 0xb9,
		0xd9, 0xb3, 0x7f, 0x7e, 0xfa, 0x7c, 0x54, 0x6f, 0xb4, 0x26, 0xff, 0x38, 0xfe, 0x7c, 0x58, 0x6f,
		0xb4, 0x9e, 0x3d, 0xfb, 0x2f, 0x39, 0x1d, 0x6e, 0xed, 0xd0, 0x36, 0xd8, 0x76, 0xe4, 0xf6, 0x2d,
		0x00, 0xe2, 0x70, 0x54, 0x10, 0x10, 0x04, 0x04, 0x01, 0x9f, 0x2c, 0x02, 0x0a, 0xfa, 0x80, 0xac,
		0x1f, 0x90, 0x3c, 0x44, 0x4d, 0xb6, 0x47, 0xf1, 0xe4, 0x8f, 0x85, 0xed, 0x11, 0x36, 0x7a, 0x16,
		0x5b, 0x72, 0xb0, 0x0b, 0xc3, 0x5b, 0xea, 0x61, 0x9c, 0x8e, 0x6f, 0xb1, 0x2f, 0xae, 0xb0, 0xb1,
		0xcd, 0x4e, 0xa9, 0xf3, 0x63, 0xeb, 0xa7, 0xf4, 0xf4, 0x78, 0x8b, 0xe7, 0xb4, 0xa2, 0x7b, 0x66,
		0x76, 0x89, 0x5c, 0x7e, 0xeb, 0xf5, 0xeb, 0x1d, 0xbf, 0xeb, 0xc7, 0xf2, 0x0c, 0x73, 0x3a, 0x34,
		0x34, 0x13, 0x9a, 0x09, 0xcd, 0x7c, 0xb2, 0x34, 0x73, 0xe0, 0x07, 0xf1, 0x4b, 0x78, 0x26, 0x3c,
		0x13, 0x9e, 0xb9, 0xb3, 0x3c, 0xb3, 0x71, 0x72, 0x02, 0xd1, 0x84, 0x68, 0xae, 0x9e, 0xc6, 0x7e,
		0xd8, 0x8b, 0x7b, 0x6e, 0xaf, 0x23, 0xcf, 0x33, 0xd3, 0x91, 0xa1, 0x99, 0xd0, 0x4c, 0x68, 0xe6,
		0x93, 0xa5, 0x99, 0x7e, 0xbf, 0x3e, 0x71, 0x05, 0xf5, 0x78, 0x78, 0x17, 0x0b, 0x8b, 0x7a, 0xe7,
		0x82, 0x63, 0x26, 0x92, 0xa8, 0x3c, 0xe3, 0xb4, 0x45, 0xe3, 0x2d, 0xd2, 0x79, 0xcb, 0xb4, 0xde,
		0x9e, 0xb0, 0x4b, 0xa1, 0xf9, 0x25, 0x71, 0xc3, 0xb2, 0x68, 0x7f, 0x99, 0x4c, 0xd1, 0x62, 0x18,
		0x50, 0x4a, 0x38, 0xb0, 0xa9, 0xa9, 0x6f, 0x9c, 0x34, 0x77, 0x68, 0xf2, 0xf7, 0xb6, 0x63, 0xd4,
		0x56, 0x95, 0x2b, 0x95, 0x2d, 0x02, 0x95, 0xdf, 0xf6, 0x82, 0xd8, 0x8f, 0x1f, 0x2c, 0x57, 0x29,
		0xdb, 0xc0, 0xab, 0xeb, 0xe4, 0xd1, 0x7f, 0x76, 0x22, 0x8b, 0x75, 0xff, 0x13, 0x41, 0x5d, 0xdf,
		0xdc, 0xdd, 0xdc, 0x7e, 0xf8, 0xf4, 0xe1, 0xf2, 0xc3, 0xdb, 0x9a, 0xcd, 0xfc, 0x40, 0x64, 0x0d,
		0x81, 0xed, 0xa2, 0xf0, 0xbc, 0xb0, 0xae, 0x2f, 0xdf, 0xdd, 0xd4, 0xb6, 0x11, 0x53, 0x4a, 0x14,
		0xd1, 0x1b, 0x44, 0x94, 0x23, 0xa2, 0xdb, 0x8f, 0xbf, 0x23, 0xa2, 0xf5, 0x22, 0xfa, 0x74, 0x89,
		0x84, 0xd6, 0x4b, 0xe8, 0x6d, 0xe3, 0x13, 0x22, 0xca, 0x81, 0xb6, 0xeb, 0x77, 0x48, 0x68, 0xad,
		0x84, 0xde, 0xdc, 0x5e, 0x21, 0xa1, 0xb5, 0x12, 0xba, 0xf8, 0xed, 0xd3, 0xaf, 0x88, 0x68, 0xad,
		0x88, 0x7e, 0x7b, 0x6d, 0xd3, 0x11, 0x59, 0x19, 0xb9, 0xc5, 0x0a, 0x52, 0xc9, 0xcf, 0x23, 0xd2,
		0x0e, 0x7a, 0xb4, 0x86, 0x60, 0xaf, 0x44, 0x6c, 0x6e, 0x7c, 0x56, 0x93, 0x8c, 0x25, 0xca, 0x6a,
		0xd2, 0xdc, 0x0d, 0x58, 0x4d, 0x92, 0x45, 0x3e, 0xaa, 0xc3, 0xa8, 0x0e, 0xdb, 0x66, 0x54, 0xa4,
		0x43, 0xd0, 0xd2, 0xae, 0x34, 0xfd, 0xff, 0x34, 0xb7, 0xf8, 0x0c, 0x72, 0xfa, 0xa1, 0x95, 0xca,
		0x3a, 0x68, 0x5d, 0x41, 0xeb, 0x0a, 0xc5, 0xf7, 0xa2, 0x75, 0x05, 0xc1, 0x09, 0xc1, 0x09, 0xc1,
		0x09, 0xc1, 0x09, 0xc1, 0x09, 0xc1, 0x89, 0xc5, 0x94, 0x1d, 0xad, 0x2b, 0x40, 0x40, 0x10, 0x10,
		0x04, 0xa4, 0x75, 0x85, 0xd8, 0x1f, 0x4a, 0x0a, 0x67, 0x86, 0xa7, 0xa4, 0x70, 0xf9, 0x94, 0xd2,
		0xba, 0x62, 0xb3, 0x73, 0xca, 0x7a, 0xb0, 0x75, 0x72, 0x49, 0xeb, 0x0a, 0x68, 0x26, 0x34, 0x13,
		0x9a, 0x49, 0xeb, 0x0a, 0x78, 0x26, 0x3c, 0x13, 0x9e, 0xa9, 0x3b, 0xa5, 0xb4, 0xae, 0x80, 0x68,
		0xae, 0x9d, 0x46, 0x5a, 0x57, 0x40, 0x33, 0xa1, 0x99, 0xd0, 0x4c, 0x5a, 0x57, 0xcc, 0x49, 0x82,
		0xd6, 0x15, 0xb4, 0xae, 0x28, 0x97, 0xe6, 0x97, 0xc4, 0x0d, 0xcb, 0xa2, 0xfd, 0x65, 0x32, 0x45,
		0x8b, 0x61, 0x40, 0x29, 0xe1, 0xc0, 0xa6, 0xa6, 0x9e, 0xd6, 0x15, 0x1b, 0x18, 0x95, 0xd6, 0x15,
		0xb4, 0xae, 0x58, 0x2b, 0x28, 0x5a, 0x57, 0xa8, 0x09, 0x8b, 0xd6, 0x15, 0xf9, 0x22, 0xa2, 0x75,
		0x45, 0x9e, 0x88, 0x68, 0x5d, 0x91, 0x2b, 0x22, 0x5a, 0x57, 0xe4, 0x49, 0x88, 0xd6, 0x15, 0xf9,
		0xd0, 0x46, 0xeb, 0x8a, 0x1c, 0x09, 0xd1, 0xba, 0x22, 0x4f, 0x42, 0xb4, 0xae, 0xc8, 0x15, 0x11,
		0xad, 0x2b, 0x58, 0x41, 0x2a, 0x43, 0xd3, 0x69, 0x5d, 0xc1, 0x6a, 0x52, 0x32, 0x3e, 0xab, 0x49,
		0xab, 0x6e, 0xc0, 0x6a, 0x92, 0x58, 0x12, 0x89, 0xea, 0x30, 0xaa, 0xc3, 0x6c, 0xa3, 0x22, 0xad,
		0x2b, 0x56, 0xb6, 0xae, 0x18, 0x77, 0x6c, 0xd8, 0x54, 0xe7, 0x8a, 0xbd, 0x12, 0x27, 0x44, 0x6a,
		0x22, 0x64, 0x27, 0xa0, 0x66, 0xd4, 0xbc, 0x23, 0x1c, 0xb8, 0x71, 0x90, 0x78, 0xd2, 0x0b, 0xb7,
		0x73, 0x77, 0xe1, 0x76, 0x3e, 0x7a, 0xf1, 0xf0, 0xaf, 0xab, 0xe1, 0x1d, 0xee, 0xae, 0x87, 0x77,
		0xd8, 0x2b, 0x67, 0x6a, 0x34, 0xa6, 0x65, 0xe8, 0xfd, 0x4f, 0xb5, 0x27, 0x23, 0x8b, 0x21, 0xa7,
		0x9a, 0x72, 0x34, 0x6c, 0x36, 0x62, 0xcc, 0x13, 0x25, 0x78, 0xa1, 0x34, 0x0f, 0x94, 0xe2, 0x7d,
		0xe2, 0x3c, 0x4f, 0x9c, 0xd7, 0x59, 0xe0, 0x71, 0xe5, 0xba, 0x34, 0xd3, 0xe6, 0x20, 0x35, 0x77,
		0xa2, 0xbf, 0x42, 0x0d, 0x80, 0x92, 0xf1, 0x2a, 0xd6, 0x01, 0xe8, 0x90, 0x0e, 0x40, 0x95, 0x09,
		0xd2, 0xe8, 0x00, 0x54, 0xb6, 0x91, 0xa7, 0x03, 0xd1, 0x01, 0x88, 0x1c, 0x0f, 0x39, 0x1e, 0x72,
		0x3c, 0x1b, 0xc8, 0xf1, 0x9c, 0x92, 0xe3, 0x19, 0xa5, 0x5d, 0x9c, 0xfa, 0xfd, 0x45, 0xfd, 0x97,
		0xd6, 0xdf, 0x47, 0xcf, 0x9b, 0x8f, 0xaf, 0x9e, 0xfd, 0x7d, 0xf6, 0x38, 0xff, 0xe1, 0x3f, 0xcb,
		0xbe, 0x76, 0xf4, 0xfc, 0xec, 0xf1, 0xd5, 0x8a, 0xdf, 0x9c, 0x3e, 0xbe, 0x2a, 0x38, 0xc6, 0xc9,
		0xe3, 0x4f, 0x0b, 0x5f, 0x1d, 0x7e, 0xde, 0x58, 0x75, 0x41, 0x73, 0xc5, 0x05, 0xc7, 0xab, 0x2e,
		0x38, 0x5e, 0x71, 0xc1, 0xca, 0x47, 0x6a, 0xac, 0xb8, 0xe0, 0xe4, 0xf1, 0x9f, 0x85, 0xef, 0xff,
		0xb4, 0xfc, 0xab, 0xa7, 0x8f, 0xcf, 0xfe, 0x59, 0xf5, 0xbb, 0xb3, 0xc7, 0x7f, 0x5e, 0x3d, 0x7b,
		0x76, 0xf0, 0xd3, 0x51, 0xe3, 0xf3, 0x61, 0xfd, 0xe5, 0x38, 0x37, 0x76, 0xd4, 0x5a, 0x48, 0x99,
		0x8d, 0x53, 0x60, 0xb4, 0x45, 0xca, 0x25, 0x0d, 0xf7, 0x9d, 0xde, 0x5f, 0xf5, 0x8e, 0xf3, 0xc5,
		0xeb, 0xd8, 0xe5, 0x0d, 0x99, 0xfb, 0x40, 0x1d, 0xa0, 0x0e, 0x50, 0x87, 0xa7, 0x4d, 0x1d, 0xc4,
		0xdd, 0x41, 0xd6, 0x25, 0x9c, 0x51, 0xdd, 0x2e, 0x3c, 0x38, 0xd5, 0xed, 0x25, 0xd9, 0xdd, 0xec,
		0x94, 0xee, 0x40, 0x75, 0xfb, 0xd1, 0x61, 0xf3, 0xe5, 0xc9, 0x19, 0x15, 0xee, 0xe2, 0xa3, 0xd1,
		0xa7, 0x33, 0x97, 0x7e, 0xd2, 0xa7, 0x13, 0xb2, 0x09, 0xd9, 0x7c, 0xd2, 0x64, 0x93, 0x3e, 0x9d,
		0x30, 0x4c, 0x18, 0xe6, 0x4e, 0x33, 0x4c, 0xfa, 0x74, 0x42, 0x2e, 0xd7, 0x4d, 0x23, 0x7d, 0x3a,
		0xa1, 0x99, 0xd0, 0x4c, 0x68, 0x26, 0x7d, 0x3a, 0xe1, 0x99, 0xf0, 0x4c, 0x78, 0xa6, 0xee, 0x94,
		0xd2, 0xa7, 0x13, 0xa2, 0xb9, 0x76, 0x1a, 0xe9, 0xd3, 0x09, 0xcd, 0x84, 0x66, 0x42, 0x33, 0xe9,
		0xd3, 0x39, 0x27, 0x09, 0xfa, 0x74, 0xd2, 0xa7, 0xb3, 0x5c, 0x9a, 0x5f, 0x12, 0x37, 0x2c, 0x8b,
		0xf6, 0x97, 0xc9, 0x14, 0x2d, 0x86, 0x01, 0xa5, 0x84, 0x03, 0x9b, 0x9a, 0x7a, 0xfa, 0x74, 0x6e,
		0x60, 0x54, 0xfa, 0x74, 0xd2, 0xa7, 0x73, 0xad, 0xa0, 0xe8, 0xd3, 0xa9, 0x26, 0x2c, 0xfa, 0x74,
		0xe6, 0x8b, 0x88, 0x3e, 0x9d, 0x79, 0x22, 0xa2, 0x4f, 0x67, 0xae, 0x88, 0xe8, 0xd3, 0x99, 0x27,
		0x21, 0xfa, 0x74, 0xe6, 0x43, 0x1b, 0x7d, 0x3a, 0x73, 0x24, 0x44, 0x9f, 0xce, 0x3c, 0x09, 0xd1,
		0xa7, 0x33, 0x57, 0x44, 0xf4, 0xe9, 0x64, 0x05, 0xa9, 0x0c, 0x4d, 0xa7, 0x4f, 0x27, 0xab, 0x49,
		0xc9, 0xf8, 0xac, 0x26, 0xad, 0xba, 0x01, 0xab, 0x49, 0x62, 0x49, 0x24, 0x7a, 0x38, 0xd0, 0xc3,
		0x81, 0x1e, 0x0e, 0x5b, 0x4d, 0x15, 0x6c, 0xb6, 0x6f, 0x58, 0xbc, 0x05, 0x84, 0x01, 0xc2, 0x00,
		0x61, 0x78, 0xda, 0x84, 0x81, 0xce, 0x0d, 0xd2, 0x99, 0x06, 0xf6, 0x3b, 0xaf, 0x1e, 0x9f, 0xfd,
		0xce, 0x1b, 0x9b, 0x52, 0x3a, 0x37, 0xec, 0x7a, 0xc6, 0x8a, 0x1e, 0xfa, 0x2b, 0x5a, 0xb8, 0x9f,
		0x1e, 0x24, 0x4d, 0x8f, 0x37, 0xd5, 0x44, 0xdf, 0xa8, 0x83, 0xbc, 0x13, 0x7b, 0x72, 0xdd, 0x9f,
		0xc7, 0xc3, 0x55, 0xac, 0xf9, 0x73, 0x83, 0xe6, 0xcf, 0x95, 0x21, 0xf2, 0x34, 0x7f, 0x56, 0x7d,
		0x2f, 0x9a, 0x3f, 0x93, 0x07, 0x20, 0x0f, 0x40, 0x1e, 0x60, 0xbb, 0xf3, 0x00, 0x2c, 0x1c, 0xb0,
		0x70, 0xc0, 0xc2, 0x41, 0xc9, 0x11, 0x1b, 0xcd, 0x9f, 0xa1, 0x0e, 0x50, 0x07, 0xa8, 0xc3, 0x76,
		0x53, 0x07, 0x96, 0x10, 0xa4, 0xb3, 0xa9, 0x2c, 0x21, 0xac, 0x1e, 0x9f, 0x25, 0x84, 0x8d, 0x4d,
		0x29, 0x4b, 0x08, 0x96, 0x46, 0xa3, 0xf9, 0x73, 0x2e, 0xfd, 0xa4, 0xf9, 0x33, 0x64, 0x13, 0xb2,
		0xf9, 0xa4, 0xc9, 0x26, 0xcd, 0x9f, 0x61, 0x98, 0x30, 0xcc, 0x9d, 0x66, 0x98, 0x34, 0x7f, 0x86,
		0x5c, 0xae, 0x9b, 0x46, 0x9a, 0x3f, 0x43, 0x33, 0xa1, 0x99, 0xd0, 0x4c, 0x9a, 0x3f, 0xc3, 0x33,
		0xe1, 0x99, 0xf0, 0x4c, 0xdd, 0x29, 0xa5, 0xf9, 0x33, 0x44, 0x73, 0xed, 0x34, 0xd2, 0xfc, 0x19,
		0x9a, 0x09, 0xcd, 0x84, 0x66, 0xd2, 0xfc, 0x79, 0x4e, 0x12, 0x34, 0x7f, 0xa6, 0xf9, 0x73, 0xb9,
		0x34, 0xbf, 0x24, 0x6e, 0x58, 0x16, 0xed, 0x2f, 0x93, 0x29, 0x5a, 0x0c, 0x03, 0x4a, 0x09, 0x07,
		0x36, 0x35, 0xf5, 0x34, 0x7f, 0xde, 0xc0, 0xa8, 0x34, 0x7f, 0xa6, 0xf9, 0xf3, 0x5a, 0x41, 0xd1,
		0xfc, 0x59, 0x4d, 0x58, 0x34, 0x7f, 0xce, 0x17, 0x11, 0xcd, 0x9f, 0xf3, 0x44, 0x44, 0xf3, 0xe7,
		0x5c, 0x11, 0xd1, 0xfc, 0x39, 0x4f, 0x42, 0x34, 0x7f, 0xce, 0x87, 0x36, 0x9a, 0x3f, 0xe7, 0x48,
		0x88, 0xe6, 0xcf, 0x79, 0x12, 0xa2, 0xf9, 0x73, 0xae, 0x88, 0x68, 0xfe, 0xcc, 0x0a, 0x52, 0x19,
		0x9a, 0x4e, 0xf3, 0x67, 0x56, 0x93, 0x92, 0xf1, 0x59, 0x4d, 0x5a, 0x75, 0x03, 0x56, 0x93, 0xc4,
		0x92, 0x48, 0xf4, 0x70, 0xa0, 0x87, 0x03, 0x3d, 0x1c, 0xb6, 0x9a, 0x2a, 0xd0, 0xfc, 0x19, 0xc2,
		0x00, 0x61, 0x80, 0x30, 0x94, 0x47, 0x18, 0xe8, 0xdc, 0x20, 0x9d, 0x69, 0x60, 0xbf, 0xf3, 0xea,
		0xf1, 0xd9, 0xef, 0xbc, 0xb1, 0x29, 0xa5, 0x73, 0xc3, 0xae, 0x67, 0xac, 0x68, 0xfe, 0xbc, 0xb2,
		0xf9, 0xf3, 0xb8, 0xe7, 0xf1, 0xa6, 0x7a, 0x3f, 0xef, 0x95, 0x38, 0x21, 0x52, 0x13, 0x21, 0x3b,
		0x01, 0x35, 0xa3, 0xf6, 0xd7, 0xe1, 0xc0, 0x8d, 0x83, 0x84, 0xb4, 0x5c, 0xb8, 0x9d, 0xbb, 0x0b,
		0xb7, 0xf3, 0xd1, 0x8b, 0x87, 0x7f, 0x5d, 0x0d, 0xef, 0x70, 0x77, 0x3d, 0xbc, 0xc3, 0x5e, 0x39,
		0x53, 0xa3, 0x31, 0x2d, 0xb5, 0x4e, 0x43, 0x7b, 0x2a, 0x52, 0xb2, 0xd6, 0x69, 0x68, 0xca, 0xd0,
		0xb0, 0x55, 0xb7, 0x71, 0x38, 0x26, 0x11, 0x7e, 0x49, 0x87, 0x5b, 0x52, 0xe1, 0x95, 0x78, 0x38,
		0x25, 0x1e, 0x3e, 0x59, 0x08, 0x97, 0xca, 0x75, 0x67, 0xa6, 0xad, 0xb5, 0x6b, 0xee, 0x44, 0x7f,
		0x85, 0xda, 0xe7, 0x27, 0xe3, 0x55, 0xac, 0x7f, 0xfe, 0x21, 0xfd, 0xf3, 0x2b, 0x93, 0x0b, 0xa1,
		0x7f, 0x7e, 0xd9, 0x46, 0x9e, 0x0e, 0x94, 0x6d, 0x51, 0xdb, 0x75, 0x5c, 0xbb, 0x3d, 0x70, 0x87,
		0x37, 0x20, 0x85, 0x5a, 0x35, 0x37, 0x61, 0xcb, 0x5d, 0x58, 0x77, 0x1b, 0xd6, 0xdd, 0x47, 0x09,
		0x6e, 0x44, 0x36, 0xba, 0xae, 0x7e, 0x0a, 0xb5, 0xeb, 0xb8, 0xc2, 0xdb, 0x2f, 0xf6, 0xb7, 0x6f,
		0xcd, 0x35, 0xbb, 0x26, 0x38, 0xbf, 0xd4, 0xd8, 0x78, 0x7c, 0xf6, 0xf7, 0xc9, 0x23, 0x8b, 0x7e,
		0x45, 0xd0, 0xaa, 0xde, 0x75, 0xa2, 0xef, 0xd6, 0x21, 0x6b, 0x7c, 0x17, 0x70, 0x0b, 0xdc, 0x02,
		0xb7, 0xc0, 0x2d, 0x70, 0x0b, 0xdc, 0x52, 0x96, 0x9c, 0x17, 0x7f, 0xf3, 0xc2, 0x58, 0x52, 0x39,
		0x53, 0xc5, 0x9c, 0x0e, 0x0d, 0x42, 0x81, 0x50, 0x20, 0xd4, 0x93, 0x45, 0xa8, 0xd4, 0x11, 0xd0,
		0x19, 0x45, 0x50, 0x3f, 0xb3, 0x9d, 0x51, 0x8e, 0x4e, 0x2d, 0xd6, 0x9a, 0x9f, 0xd2, 0x1a, 0x65,
		0xfa, 0xe0, 0xbb, 0xd8, 0x1a, 0xe5, 0xe8, 0xe4, 0xf8, 0x94, 0xee, 0x28, 0x85, 0x66, 0x7f, 0x07,
		0xbb, 0xa3, 0x9c, 0x9e, 0x9c, 0x1c, 0x9f, 0xd0, 0x1f, 0xa5, 0xec, 0x51, 0xe9, 0x8f, 0x42, 0x7f,
		0x94, 0xb5, 0x82, 0xba, 0xfa, 0xf4, 0xeb, 0xd5, 0xed, 0xa7, 0x3f, 0x6e, 0xae, 0xe8, 0x8e, 0x52,
		0x58, 0x54, 0x77, 0xd7, 0x37, 0xbf, 0x37, 0x29, 0x99, 0x2e, 0x22, 0xa9, 0xdf, 0xdf, 0x5e, 0xbc,
		0x47, 0x52, 0x05, 0x75, 0xea, 0x14, 0x49, 0x15, 0x91, 0xd4, 0xbb, 0x9b, 0xb7, 0x1f, 0x91, 0x54,
		0x11, 0x49, 0xbd, 0x7d, 0xfb, 0x9a, 0x0e, 0x2a, 0x85, 0x24, 0x75, 0x71, 0x8b, 0xa0, 0x0a, 0x09,
		0xea, 0xf6, 0xc3, 0xe5, 0x15, 0xbd, 0x30, 0xa8, 0x2c, 0xb0, 0xae, 0xf1, 0x93, 0xea, 0x53, 0x2b,
		0x9b, 0xb2, 0x32, 0x63, 0xb3, 0x6a, 0x60, 0x2c, 0x4d, 0x56, 0x0d, 0xe6, 0x6e, 0xc0, 0xaa, 0x81,
		0x2c, 0xf2, 0xb1, 0xae, 0xcd, 0xba, 0x76, 0xc5, 0x31, 0xca, 0xd2, 0x56, 0xac, 0xf9, 0x1b, 0x80,
		0x56, 0xa0, 0x15, 0x68, 0x05, 0x5a, 0x81, 0x56, 0x4f, 0x0d, 0xad, 0xa8, 0xd5, 0x5e, 0x56, 0x2a,
		0xdc, 0x69, 0x1c, 0x24, 0xe5, 0x75, 0x9b, 0x2a, 0xd5, 0x36, 0xaa, 0x53, 0x76, 0x62, 0x4f, 0xae,
		0xce, 0x70, 0x3c, 0x5c, 0xc5, 0xca, 0x0c, 0x1b, 0x94, 0x19, 0x56, 0x06, 0xf1, 0x29, 0x33, 0x54,
		0x7d, 0x2f, 0xca, 0x0c, 0x09, 0x14, 0x08, 0x14, 0x08, 0x14, 0x08, 0x14, 0x08, 0x14, 0x9e, 0x50,
		0x5a, 0x8b, 0x32, 0x43, 0x70, 0x0b, 0xdc, 0x02, 0xb7, 0xc0, 0x2d, 0x70, 0x6b, 0x9b, 0x70, 0x8b,
		0x32, 0x43, 0x10, 0x0a, 0x84, 0x02, 0xa1, 0x28, 0x33, 0x9c, 0x93, 0x03, 0x65, 0x86, 0x94, 0x19,
		0x2e, 0x79, 0x70, 0xca, 0x0c, 0xb5, 0x6e, 0x45, 0x99, 0x61, 0x65, 0x67, 0x9f, 0x32, 0xc3, 0x8d,
		0x8c, 0x4a, 0x99, 0x21, 0x65, 0x86, 0x6b, 0x05, 0x45, 0x99, 0xa1, 0xba, 0xa8, 0x28, 0x33, 0x2c,
		0x2c, 0x29, 0xca, 0x0c, 0x15, 0x74, 0x8a, 0x32, 0xc3, 0x42, 0x92, 0xa2, 0xcc, 0xb0, 0xa8, 0xa4,
		0x28, 0x33, 0x2c, 0x2a, 0x29, 0xca, 0x0c, 0x0b, 0x0a, 0x8a, 0x32, 0xc3, 0x7d, 0xca, 0x0c, 0xcb,
		0xd0, 0x78, 0xca, 0x0c, 0x59, 0x35, 0x60, 0xd5, 0x60, 0xc5, 0x0d, 0x58, 0x35, 0x90, 0xd2, 0x5d,
		0xd6, 0xb5, 0x59, 0xd7, 0x96, 0xc0, 0x28, 0xca, 0x0c, 0x41, 0x2b, 0xd0, 0x0a, 0xb4, 0x02, 0xad,
		0x40, 0x2b, 0x2b, 0x68, 0x45, 0x99, 0xe1, 0x8a, 0x32, 0x43, 0x0e, 0x84, 0xdd, 0xa4, 0xf8, 0xed,
		0x1e, 0x07, 0xfb, 0xb6, 0x51, 0xe5, 0xc3, 0x60, 0x23, 0xef, 0xdf, 0x03, 0x2f, 0x70, 0xbd, 0xba,
		0xdf, 0x36, 0x3f, 0x15, 0x36, 0x3b, 0x98, 0xd9, 0xf1, 0xb0, 0x87, 0x3b, 0x72, 0x3c, 0xac, 0xe3,
		0x76, 0x38, 0x18, 0x56, 0x83, 0x5f, 0x0d, 0xe5, 0xb6, 0x25, 0x0e, 0xcd, 0x98, 0x29, 0x4d, 0x0f,
		0x55, 0xf6, 0x9c, 0x7b, 0xb3, 0xc5, 0xfe, 0x94, 0x05, 0x9d, 0x19, 0x8c, 0x71, 0x93, 0xf8, 0xd4,
		0x17, 0x2f, 0x92, 0xf2, 0xf7, 0x83, 0xac, 0x5d, 0x57, 0xd9, 0x97, 0x19, 0x95, 0xbc, 0x8b, 0x94,
		0xba, 0x8b, 0x1d, 0x6f, 0xdd, 0xc0, 0x7f, 0xe1, 0xbf, 0x4a, 0xf1, 0x5f, 0xc6, 0x47, 0x5a, 0xb7,
		0xbd, 0xc8, 0x0d, 0xfd, 0xbe, 0x08, 0xb3, 0xce, 0xd6, 0xef, 0xa5, 0x83, 0xca, 0x74, 0x9d, 0x38,
		0xdc, 0xf1, 0xc3, 0xad, 0xcd, 0x4c, 0xd5, 0x56, 0x0a, 0x68, 0xfb, 0xfb, 0x4d, 0x18, 0x99, 0x72,
		0x35, 0x42, 0x5f, 0xb1, 0x64, 0x4e, 0x06, 0x23, 0x43, 0x3f, 0xf8, 0x2a, 0xa1, 0x6f, 0x69, 0xde,
		0x66, 0x0b, 0x7b, 0xec, 0x8c, 0x32, 0x80, 0x5e, 0xbb, 0xde, 0x73, 0x63, 0x6f, 0xb4, 0x59, 0x57,
		0xc8, 0xf9, 0xcd, 0x8d, 0x8b, 0xff, 0xc3, 0xff, 0xe1, 0xff, 0x2a, 0xe5, 0xff, 0xdc, 0xde, 0x20,
		0x88, 0xbd, 0xf0, 0xb4, 0x29, 0xe8, 0x02, 0x05, 0x32, 0xd7, 0xc2, 0xd5, 0x42, 0x82, 0xd9, 0x7f,
		0x1b, 0xd5, 0x40, 0x96, 0xea, 0x3f, 0xd2, 0x7a, 0x0f, 0xe9, 0x71, 0x2d, 0xd6, 0x76, 0x08, 0x6e,
		0xcf, 0xb3, 0x52, 0xba, 0x63, 0x7b, 0xaa, 0x8e, 0x5e, 0x36, 0x9b, 0xa7, 0x67, 0xcd, 0xe6, 0xe1,
		0xd9, 0xf1, 0xd9, 0xe1, 0xf9, 0xc9, 0xc9, 0xd1, 0xa9, 0x74, 0x5d, 0x83, 0xd5, 0xd9, 0xab, 0xc8,
		0x02, 0x4d, 0x6b, 0x8b, 0x39, 0x58, 0xdf, 0x71, 0xbf, 0x5b, 0x21, 0x61, 0x93, 0x81, 0x61, 0x61,
		0xb0, 0x30, 0x58, 0x18, 0x2c, 0x0c, 0x16, 0x06, 0x0b, 0x83, 0x85, 0xc1, 0xc2, 0x60, 0x61, 0x99,
		0x69, 0x91, 0xd8, 0x46, 0xb0, 0xe0, 0xde, 0xcd, 0xb7, 0x13, 0xc0, 0xbe, 0x60, 0x5f, 0xb0, 0x2f,
		0x4b, 0xec, 0x6b, 0xe0, 0x07, 0xf1, 0x71, 0x43, 0x90, 0x7a, 0x9d, 0x41, 0xbd, 0xa0, 0x5e, 0x50,
		0x2f, 0xad, 0xa9, 0x6a, 0x36, 0xce, 0x9b, 0xe7, 0xa7, 0x67, 0x8d, 0x73, 0x08, 0xd7, 0xf6, 0x10,
		0xae, 0xa7, 0xbd, 0xf1, 0xd6, 0x60, 0xd3, 0x73, 0x39, 0xfb, 0xc9, 0xe2, 0xd0, 0x09, 0xa2, 0x7e,
		0x2f, 0x8c, 0xcd, 0xf7, 0x94, 0x4d, 0x87, 0xda, 0xf0, 0xbe, 0xb2, 0x8a, 0xec, 0x8b, 0x95, 0xa8,
		0x5e, 0x7a, 0xba, 0xbb, 0xcb, 0x04, 0xaa, 0x8f, 0xb6, 0x6c, 0x8f, 0x99, 0x3b, 0xd1, 0x5f, 0xa1,
		0xd0, 0x32, 0x19, 0xaf, 0x62, 0xe7, 0x19, 0x1d, 0x72, 0x9e, 0xd1, 0xd3, 0x8b, 0x2d, 0x39, 0xcf,
		0x68, 0x7e, 0xa0, 0xec, 0xd9, 0x0d, 0x46, 0xf0, 0xbb, 0x52, 0xa9, 0x17, 0xee, 0x40, 0x4d, 0x72,
		0xd5, 0x1c, 0x85, 0x2d, 0x87, 0x61, 0xdd, 0x71, 0x58, 0x77, 0x20, 0x25, 0x38, 0x12, 0xe1, 0x08,
		0xad, 0xf2, 0x35, 0xc9, 0x43, 0x1f, 0x50, 0x0f, 0x06, 0xdd, 0x7a, 0x38, 0x4a, 0x1f, 0xd1, 0x77,
		0x5b, 0x54, 0xba, 0x62, 0x9b, 0x85, 0x57, 0x4a, 0xf7, 0xa5, 0x85, 0xb1, 0x6d, 0x15, 0x7f, 0xa7,
		0x37, 0xf8, 0xdf, 0x9f, 0x4e, 0x3f, 0x1f, 0xd6, 0x4f, 0x5a, 0x93, 0xff, 0x1c, 0x8f, 0x7f, 0xfa,
		0x67, 0xf4, 0xdf, 0xff, 0xf3, 0xf9, 0xb0, 0x7e, 0xbe, 0xec, 0xbf, 0xcf, 0xfe, 0xfc, 0xf3, 0xc5,
		0x9f, 0x7f, 0xbe, 0xd0, 0xbb, 0xf6, 0xbf, 0x6a, 0x74, 0xe7, 0x15, 0x76, 0x19, 0x5f, 0xbc, 0x90,
		0x8e, 0xf2, 0x56, 0x45, 0x9e, 0x3e, 0xf8, 0x2e, 0x76, 0x94, 0x3f, 0xa4, 0x9d, 0x7c, 0xa1, 0xa9,
		0xa7, 0x9d, 0x7c, 0xe5, 0xa7, 0x9f, 0x76, 0xf2, 0x95, 0x06, 0x2c, 0x2f, 0x18, 0x74, 0xbd, 0xd0,
		0x11, 0xa8, 0xa8, 0x5c, 0x4b, 0xc5, 0x9a, 0x16, 0xc6, 0xbe, 0x0a, 0x06, 0xdd, 0xa1, 0xf9, 0xd3,
		0xb2, 0xd4, 0xba, 0x32, 0x4e, 0xba, 0xb5, 0xd9, 0xc9, 0xbb, 0x64, 0x07, 0x27, 0xe5, 0x42, 0xca,
		0x85, 0x94, 0x0b, 0x29, 0x17, 0x52, 0x2e, 0xa4, 0x5c, 0x48, 0xb9, 0xc0, 0x60, 0x49, 0xb9, 0x90,
		0x72, 0x21, 0xe5, 0x42, 0xca, 0x85, 0x94, 0x0b, 0x29, 0x17, 0x52, 0x2e, 0xa4, 0x5c, 0x9e, 0x4e,
		0xca, 0x25, 0x76, 0xfb, 0xf5, 0xfb, 0x8e, 0xf3, 0x35, 0x92, 0x4f, 0xb8, 0x4c, 0x87, 0x26, 0xdd,
		0x42, 0xba, 0x85, 0x74, 0xcb, 0x93, 0x4d, 0xb7, 0xd8, 0x39, 0x4c, 0xd6, 0xc6, 0x21, 0xb2, 0x76,
		0x0f, 0x8f, 0x4d, 0x05, 0xf2, 0xe9, 0xf2, 0xe6, 0xee, 0x97, 0xb7, 0x17, 0x6f, 0x3e, 0xd6, 0x6c,
		0x54, 0xe4, 0xd8, 0x39, 0x2c, 0xd6, 0xf2, 0x39, 0xba, 0x43, 0x91, 0xdc, 0x7e, 0xfc, 0x24, 0x9f,
		0xb0, 0xb0, 0x10, 0xa6, 0x94, 0x20, 0x8a, 0x9b, 0x8f, 0xbf, 0x22, 0x8a, 0xc4, 0x50, 0xae, 0xdf,
		0x23, 0x8a, 0xb1, 0x28, 0x7e, 0xbb, 0x7d, 0x83, 0x28, 0xc6, 0xa2, 0xf8, 0xf8, 0x07, 0x5a, 0x91,
		0x88, 0xe2, 0xca, 0xc6, 0x89, 0xa2, 0xdb, 0x29, 0x8a, 0xcb, 0xff, 0xb9, 0x45, 0x14, 0x63, 0x51,
		0x5c, 0x5c, 0xfe, 0xab, 0x56, 0xf1, 0x73, 0x5b, 0x5b, 0x3b, 0xca, 0xa4, 0xdf, 0xfa, 0x51, 0x7c,
		0x11, 0xc7, 0xa1, 0x2c, 0x9b, 0x7e, 0xe7, 0x07, 0x57, 0x1d, 0x6f, 0x18, 0x91, 0x0c, 0x09, 0x5e,
		0x30, 0xe8, 0x74, 0x64, 0xcb, 0xce, 0xed, 0x0d, 0xfe, 0x21, 0x6c, 0x7b, 0xa1, 0xd7, 0xfe, 0xf9,
		0x21, 0x19, 0x9a, 0x23, 0xa1, 0xaa, 0x7c, 0x24, 0x54, 0x5a, 0x2e, 0x9c, 0x9c, 0xc0, 0x51, 0xdb,
		0xc6, 0x96, 0x40, 0x46, 0xa7, 0x71, 0x2c, 0xf8, 0x53, 0x93, 0x53, 0x39, 0x16, 0xc2, 0x55, 0xa9,
		0x82, 0xcd, 0x06, 0x05, 0x9b, 0x95, 0xc9, 0x4a, 0x51, 0xb0, 0xa9, 0xfa, 0x5e, 0x14, 0x6c, 0x92,
		0xce, 0x26, 0x9d, 0x6d, 0xdf, 0x81, 0x94, 0xe0, 0x48, 0xaa, 0x49, 0xc2, 0xd9, 0x3d, 0x38, 0x23,
		0x07, 0x76, 0x0f, 0xb2, 0x7b, 0x90, 0xdd, 0x83, 0x9b, 0x52, 0x6a, 0x76, 0x0f, 0x96, 0x99, 0x07,
		0xdb, 0x67, 0xf7, 0xa0, 0xde, 0x7d, 0xd8, 0x3d, 0x58, 0xd9, 0xa9, 0x67, 0xf7, 0xe0, 0x46, 0x46,
		0x65, 0xf7, 0x20, 0xbb, 0x07, 0x85, 0x55, 0x8b, 0x82, 0xcd, 0xa2, 0x91, 0x00, 0x05, 0x9b, 0xa4,
		0x5c, 0x48, 0xb9, 0x90, 0x72, 0x21, 0xe5, 0x42, 0xca, 0x85, 0x94, 0x0b, 0x0c, 0x96, 0x94, 0x0b,
		0x29, 0x17, 0x52, 0x2e, 0xa4, 0x5c, 0x48, 0xb9, 0x90, 0x72, 0x21, 0xe5, 0x42, 0xca, 0xe5, 0x49,
		0xa6, 0x5c, 0x28, 0xd8, 0x24, 0xdd, 0x42, 0xba, 0x85, 0x74, 0x0b, 0x05, 0x9b, 0xfb, 0x14, 0x6c,
		0x96, 0x1f, 0xe8, 0x51, 0xb0, 0xb9, 0x5c, 0x14, 0x14, 0x6c, 0x52, 0xb0, 0xb9, 0x28, 0x0a, 0x0a,
		0x36, 0x29, 0xd8, 0x5c, 0x14, 0x05, 0x05, 0x9b, 0x14, 0x6c, 0x2e, 0x8a, 0x82, 0x82, 0xcd, 0x8d,
		0x31, 0x69, 0x0a, 0x36, 0x67, 0x07, 0xa7, 0x60, 0x73, 0x59, 0x78, 0x59, 0xfd, 0x82, 0x4d, 0x83,
		0x53, 0x6d, 0xcd, 0x65, 0xfc, 0xc4, 0x4f, 0x14, 0x36, 0x3d, 0x65, 0x77, 0xfc, 0x34, 0x71, 0x38,
		0x70, 0xe3, 0x20, 0x41, 0x85, 0x0b, 0xb7, 0x73, 0x77, 0xe1, 0x76, 0x3e, 0x7a, 0xf1, 0xf0, 0xaf,
		0xab, 0xe1, 0x6d, 0xee, 0x3e, 0xa5, 0xb7, 0x29, 0xeb, 0xf0, 0xe2, 0x3d, 0x8b, 0xd3, 0x59, 0xfb,
		0x97, 0xf7, 0x30, 0xda, 0x81, 0xe0, 0xfd, 0x7b, 0xe0, 0x05, 0xae, 0x57, 0xf7, 0xdb, 0x8a, 0xe2,
		0x33, 0xf3, 0xdd, 0x22, 0x3e, 0x5a, 0xc4, 0x17, 0x9b, 0xf9, 0x5c, 0x55, 0xb1, 0x1b, 0x5a, 0x8f,
		0x98, 0xd5, 0x68, 0xd8, 0x4a, 0xbe, 0x8d, 0xa8, 0x59, 0x46, 0x71, 0xfd, 0x2e, 0xf6, 0xcd, 0x82,
		0x53, 0xa1, 0x3b, 0x05, 0x86, 0xa2, 0x2f, 0x26, 0x9b, 0xfc, 0x37, 0x2d, 0xf0, 0x96, 0xaa, 0xe7,
		0x26, 0xeb, 0x9d, 0x8f, 0xac, 0x58, 0x56, 0xaf, 0xbc, 0x86, 0xa0, 0xb3, 0x46, 0x90, 0x5d, 0x03,
		0x70, 0xdc, 0x8e, 0x82, 0x92, 0xeb, 0x66, 0xf7, 0x8d, 0xb3, 0xf7, 0xc6, 0xd9, 0xf9, 0xf9, 0xec,
		0xfb, 0xf0, 0xbd, 0x37, 0x64, 0x59, 0xaa, 0xa5, 0xe5, 0xb5, 0xb6, 0x17, 0xb9, 0xa1, 0xdf, 0xd7,
		0x72, 0x87, 0xd9, 0x2a, 0xf1, 0x74, 0x10, 0x55, 0x10, 0xd4, 0x5a, 0x26, 0xd3, 0x5e, 0x0e, 0x33,
		0x59, 0xf6, 0xd2, 0x57, 0x6d, 0x53, 0x15, 0x17, 0x53, 0x75, 0x31, 0x95, 0x17, 0x51, 0xfd, 0x72,
		0x68, 0x96, 0xf6, 0x52, 0x91, 0xf9, 0x1e, 0xd1, 0xe9, 0x1e, 0x50, 0x5b, 0xb0, 0xac, 0xe0, 0x5e,
		0x13, 0xd6, 0xa0, 0x69, 0xe2, 0xa3, 0xab, 0xb1, 0x6d, 0x6c, 0x1b, 0xdb, 0xae, 0xa0, 0x6d, 0xc7,
		0x3a, 0x72, 0x98, 0xee, 0x7d, 0x19, 0x5e, 0x8d, 0x6d, 0x63, 0xdb, 0x3b, 0x66, 0xdb, 0x66, 0x5b,
		0x39, 0x4c, 0xb6, 0x6c, 0xc8, 0x6c, 0xcd, 0x48, 0x5f, 0xe4, 0xe2, 0xf2, 0xed, 0xdd, 0xa7, 0x3f,
		0x6e, 0xae, 0x74, 0xb5, 0x46, 0x60, 0xa7, 0x85, 0x50, 0x37, 0xb9, 0xe1, 0x9b, 0x5c, 0xdf, 0xfc,
		0xde, 0xac, 0x6d, 0xa2, 0x35, 0x9e, 0xe0, 0x3b, 0xbc, 0x6d, 0x6c, 0xfb, 0x1b, 0x5c, 0xdf, 0xfc,
		0x7e, 0xba, 0xed, 0xef, 0xf0, 0xee, 0xfa, 0xff, 0x5d, 0xbd, 0xae, 0x95, 0x9c, 0xb5, 0x6f, 0xd9,
		0xf6, 0x93, 0xbb, 0x9f, 0x94, 0x53, 0x69, 0xae, 0x29, 0x93, 0x8f, 0x53, 0x0a, 0x7e, 0x74, 0x82,
		0x1e, 0x45, 0x42, 0x44, 0x2e, 0x6e, 0xf7, 0x73, 0x71, 0xca, 0x04, 0x26, 0x9d, 0xaf, 0x8e, 0xe7,
		0xdc, 0xab, 0x91, 0x96, 0x94, 0xac, 0x9c, 0x29, 0x5c, 0x73, 0x93, 0xd8, 0xec, 0x8b, 0x17, 0x89,
		0x45, 0x1e, 0x8c, 0x14, 0xbe, 0x44, 0xb3, 0x54, 0xeb, 0x55, 0xab, 0xd5, 0x93, 0x56, 0x3b, 0x49,
		0xde, 0xc0, 0x30, 0x77, 0xd4, 0x30, 0x49, 0x92, 0x13, 0x6c, 0x13, 0x6c, 0x93, 0x48, 0x33, 0xe5,
		0x89, 0x26, 0x7c, 0x11, 0xdb, 0xc6, 0xb6, 0xb1, 0xed, 0x52, 0x6d, 0x9b, 0x24, 0x39, 0xb6, 0x8d,
		0x6d, 0xcf, 0xcf, 0x37, 0x49, 0xf2, 0x64, 0x1c, 0x92, 0xe4, 0xd2, 0xef, 0x40, 0x92, 0x9c, 0x24,
		0xb9, 0x2d, 0x3f, 0xb9, 0xfb, 0x49, 0x72, 0x85, 0x82, 0x06, 0x99, 0x64, 0x9c, 0x12, 0x3f, 0xd2,
		0xe1, 0x45, 0xe4, 0xc8, 0x49, 0xc5, 0x99, 0xf2, 0x97, 0xcd, 0xe7, 0xc8, 0x47, 0x0a, 0x2f, 0x65,
		0x96, 0x7b, 0x06, 0x42, 0x9c, 0x14, 0x90, 0x04, 0x4e, 0xd7, 0xdb, 0x2f, 0x60, 0x86, 0x6a, 0xe5,
		0x22, 0x5a, 0xe5, 0x21, 0x5a, 0xe5, 0x20, 0x6a, 0xe5, 0x1f, 0x79, 0x42, 0x51, 0xf4, 0xd0, 0x1a,
		0x9e, 0xb9, 0x56, 0x68, 0x61, 0x63, 0x79, 0xa1, 0xc6, 0x7a, 0xc5, 0x59, 0xad, 0x0e, 0xcb, 0x7f,
		0xb3, 0x42, 0x16, 0x45, 0x65, 0xa0, 0xf0, 0xee, 0xcb, 0x9f, 0x7b, 0xf1, 0xa9, 0x96, 0x3c, 0x51,
		0x5e, 0x2d, 0x44, 0xb1, 0xda, 0x87, 0x9c, 0x65, 0x9c, 0x5c, 0xac, 0x28, 0x82, 0x0d, 0xc5, 0xb1,
		0xa0, 0xa8, 0xef, 0x57, 0xf6, 0xf5, 0xca, 0xbe, 0x5d, 0xc9, 0x97, 0x6f, 0x4a, 0x8b, 0xd6, 0xad,
		0xf7, 0x17, 0xd3, 0x21, 0x3f, 0x88, 0xbd, 0xf0, 0xde, 0x71, 0xbd, 0x28, 0x5f, 0x8f, 0x32, 0xdf,
		0x45, 0x97, 0x2a, 0xa2, 0x4b, 0x79, 0x4b, 0x6e, 0xd3, 0x49, 0xcb, 0x97, 0xc3, 0xc2, 0x3c, 0xe7,
		0xc9, 0xa1, 0xd8, 0x0a, 0x70, 0x61, 0xba, 0xa9, 0x42, 0x33, 0xd5, 0xe9, 0xa5, 0x2a, 0xad, 0xd4,
		0xa6, 0x93, 0xda, 0x34, 0x52, 0x8b, 0x3e, 0x9a, 0x31, 0x9d, 0xa2, 0x2b, 0xb6, 0xd4, 0xdd, 0x11,
		0xc7, 0x6c, 0x24, 0x8e, 0x51, 0xde, 0x52, 0xe0, 0xb7, 0xf5, 0x97, 0x22, 0xd4, 0x0b, 0xc5, 0x59,
		0x88, 0x28, 0x53, 0xb1, 0xc5, 0x14, 0x5c, 0x44, 0xd1, 0x35, 0x13, 0x6c, 0xe5, 0x2f, 0x44, 0x4c,
		0xe0, 0x5c, 0xbd, 0x11, 0xc2, 0x7e, 0x29, 0x4b, 0x8d, 0x5b, 0x92, 0x48, 0x9c, 0xd2, 0xdf, 0xe9,
		0x8f, 0x1b, 0xd8, 0x71, 0xeb, 0x7d, 0x0d, 0xbd, 0x28, 0xaa, 0xa7, 0x01, 0xa4, 0x32, 0x24, 0xcf,
		0x0f, 0x00, 0x36, 0x83, 0xcd, 0xe5, 0x60, 0xf3, 0xac, 0xe6, 0xe9, 0xe3, 0xf4, 0xdc, 0x38, 0x7a,
		0x98, 0x7d, 0x04, 0x66, 0x83, 0xd9, 0x76, 0x30, 0x5b, 0xd5, 0x30, 0xd2, 0x0b, 0xb3, 0x4d, 0x55,
		0x8c, 0xd7, 0xed, 0xb3, 0x83, 0x69, 0x8a, 0x5a, 0xcf, 0x54, 0x16, 0x4d, 0xa6, 0xa1, 0x39, 0x80,
		0x40, 0x2f, 0x75, 0x73, 0x13, 0x92, 0x32, 0x25, 0x71, 0x93, 0x12, 0x37, 0x2d, 0x51, 0x13, 0xd3,
		0x33, 0x35, 0x4d, 0x93, 0x33, 0x36, 0xbd, 0x05, 0x13, 0x7c, 0x30, 0x9f, 0xe7, 0x79, 0x43, 0x7c,
		0x30, 0x9d, 0x67, 0x33, 0x73, 0x34, 0x46, 0x32, 0x1b, 0xe6, 0x29, 0x6f, 0xa6, 0xd2, 0xe6, 0x6a,
		0xcd, 0x6c, 0xad, 0x99, 0xaf, 0x15, 0x33, 0x36, 0x33, 0x67, 0x43, 0xb3, 0x16, 0x33, 0xef, 0x69,
		0xb8, 0x97, 0x69, 0x0e, 0x28, 0x7f, 0xc8, 0xac, 0x76, 0xe7, 0x41, 0xe1, 0x44, 0x93, 0x75, 0x17,
		0x60, 0xc3, 0x15, 0xd8, 0x73, 0x09, 0xb6, 0x5c, 0x83, 0x75, 0x17, 0x61, 0xdd, 0x55, 0x58, 0x75,
		0x19, 0x32, 0xae, 0x43, 0xc8, 0x85, 0x98, 0x27, 0xd6, 0x72, 0xf5, 0x55, 0x7d, 0x07, 0x4d, 0x61,
		0xe4, 0x3f, 0x13, 0x1c, 0x33, 0xb3, 0x03, 0x67, 0xb4, 0x25, 0xee, 0x20, 0xeb, 0xb6, 0x76, 0xe9,
		0x3c, 0x71, 0xa5, 0x5a, 0xd8, 0xe2, 0x4e, 0x5e, 0xa1, 0x56, 0xb6, 0x24, 0x66, 0x27, 0x16, 0x78,
		0xe1, 0xde, 0x71, 0xef, 0x5b, 0xee, 0xde, 0xa5, 0x98, 0x62, 0x3a, 0xe0, 0xe8, 0xd8, 0x2f, 0xaf,
		0x5d, 0xef, 0xb9, 0xb1, 0x4a, 0xda, 0x5d, 0xd9, 0x1c, 0xe6, 0xee, 0x23, 0xac, 0x00, 0x76, 0x8e,
		0x3b, 0x15, 0xe7, 0x93, 0x36, 0x1d, 0x8f, 0x7d, 0x07, 0x64, 0xdb, 0x11, 0x95, 0xe6, 0x90, 0x4a,
		0x73, 0x4c, 0xa5, 0x38, 0x28, 0x59, 0x47, 0x25, 0xec, 0xb0, 0xec, 0xf1, 0xd2, 0x05, 0x7d, 0x77,
		0x7b, 0x83, 0x20, 0xf6, 0xc2, 0xd3, 0xa6, 0xc5, 0x23, 0x61, 0x5f, 0x72, 0x86, 0xf9, 0xf4, 0xc1,
		0x39, 0xc3, 0x5c, 0xfd, 0x3e, 0x9c, 0x61, 0x5e, 0xd9, 0xa9, 0x3f, 0x7a, 0xd9, 0x6c, 0x9e, 0x9e,
		0x35, 0x9b, 0x87, 0x67, 0xc7, 0x67, 0x87, 0xe7, 0x27, 0x27, 0x47, 0xa7, 0x47, 0x1c, 0x69, 0x5e,
		0xfa, 0xa8, 0xad, 0x8a, 0x9e, 0x8b, 0x2d, 0x68, 0x4d, 0x29, 0x17, 0xee, 0x3b, 0xee, 0xf7, 0x52,
		0x48, 0xf7, 0xe4, 0x46, 0xb0, 0x6e, 0x58, 0x37, 0xac, 0x1b, 0xd6, 0x0d, 0xeb, 0x86, 0x75, 0xc3,
		0xba, 0x61, 0xdd, 0xb0, 0x6e, 0x58, 0xf7, 0x93, 0x61, 0xdd, 0x36, 0xf6, 0x46, 0x2c, 0xc0, 0xa1,
		0xfc, 0x1e, 0x09, 0xd8, 0x36, 0x6c, 0x1b, 0xb6, 0x0d, 0xdb, 0xb6, 0xb4, 0x07, 0x63, 0xde, 0xbd,
		0x48, 0xee, 0xc5, 0x98, 0xba, 0x82, 0x49, 0xfd, 0xd1, 0xb2, 0xfe, 0x18, 0x9f, 0x03, 0xa7, 0xeb,
		0xfd, 0xb7, 0x3b, 0x08, 0x43, 0x2f, 0x88, 0x7f, 0x7a, 0x76, 0xf0, 0xe2, 0xc5, 0xf4, 0x7f, 0x91,
		0x17, 0xd7, 0x87, 0xbf, 0x6e, 0x7d, 0x8e, 0x1f, 0xfa, 0xab, 0xbe, 0x34, 0xfc, 0x55, 0x6b, 0xc5,
		0x51, 0xc3, 0xe2, 0x9b, 0x3f, 0x2c, 0x60, 0x5c, 0xa5, 0x16, 0x98, 0x85, 0x8f, 0xee, 0x9e, 0xa2,
		0xaf, 0x5e, 0x21, 0xda, 0x5c, 0x55, 0xd7, 0xdc, 0xbf, 0x57, 0x4d, 0xba, 0xf9, 0xd9, 0xde, 0x72,
		0x93, 0xb3, 0xd9, 0x9d, 0xa5, 0xc6, 0x87, 0x46, 0x2f, 0x8c, 0x68, 0x74, 0x88, 0xf4, 0xb2, 0x68,
		0x56, 0xfc, 0x6c, 0x7e, 0x2b, 0x07, 0xfe, 0xcb, 0x1e, 0xf4, 0xbf, 0x7d, 0x07, 0xec, 0x8b, 0x59,
		0x67, 0x4d, 0x64, 0xef, 0xdb, 0x7c, 0xbb, 0xa4, 0xeb, 0xc9, 0x33, 0xdd, 0x5d, 0x8d, 0x9e, 0xc1,
		0xe8, 0x9c, 0x6b, 0x39, 0x13, 0xde, 0xd5, 0x83, 0xfe, 0x0d, 0xb5, 0xa1, 0xb4, 0x03, 0xf9, 0x35,
		0x2a, 0x0b, 0x15, 0x5b, 0x82, 0xac, 0xa4, 0x6a, 0x4a, 0x2d, 0x42, 0x56, 0xb2, 0x31, 0xd3, 0x12,
		0xb5, 0x43, 0x4a, 0xd4, 0x2c, 0x06, 0x5d, 0x94, 0xa8, 0x4d, 0x9f, 0xdc, 0xb8, 0x44, 0x6d, 0xc2,
		0xf5, 0xe5, 0x2a, 0xd4, 0xd2, 0x11, 0x65, 0x0a, 0xd4, 0x0e, 0x29, 0x50, 0xdb, 0x40, 0xe6, 0x84,
		0x02, 0xb5, 0x0a, 0x84, 0x11, 0x62, 0x99, 0x0d, 0x0b, 0x99, 0x0c, 0xc9, 0xcc, 0x45, 0xb6, 0x7a,
		0x64, 0xee, 0x7f, 0x2b, 0x4e, 0x25, 0x54, 0x38, 0x03, 0xcd, 0x02, 0xbd, 0x34, 0xc0, 0xd4, 0x58,
		0x62, 0x4a, 0x4d, 0x8e, 0xbb, 0xc0, 0xcd, 0xe2, 0x66, 0x71, 0xb3, 0xb8, 0xd9, 0xf5, 0x6e, 0x76,
		0x49, 0x76, 0x38, 0x4d, 0x0a, 0xab, 0xb7, 0xd8, 0x26, 0xc2, 0xb7, 0x19, 0xe1, 0xab, 0x74, 0x0d,
		0xdb, 0x4c, 0x70, 0x6f, 0x1c, 0x63, 0x48, 0xc5, 0x16, 0x86, 0x60, 0x47, 0x80, 0x4f, 0x80, 0x5f,
		0xb6, 0xef, 0x31, 0x06, 0x27, 0x41, 0x50, 0x92, 0x00, 0xa3, 0x25, 0x67, 0x35, 0xa4, 0x46, 0x5d,
		0x65, 0x17, 0x66, 0x54, 0xf7, 0x2d, 0x52, 0xe7, 0x4d, 0x03, 0x2d, 0x9c, 0x17, 0xd9, 0x49, 0xb2,
		0x93, 0x84, 0xcd, 0x84, 0xcd, 0x84, 0xcd, 0x64, 0x27, 0xc9, 0x4e, 0xe2, 0x66, 0x71, 0xb3, 0xb8,
		0x59, 0xb2, 0x93, 0x64, 0x27, 0xab, 0x9b, 0x9d, 0x34, 0xd8, 0x15, 0x5a, 0x4e, 0x64, 0x6f, 0x84,
		0x79, 0x12, 0x58, 0x47, 0x52, 0x92, 0xb8, 0x9e, 0xa4, 0x64, 0xd5, 0x92, 0x92, 0xfa, 0xf8, 0xf1,
		0x58, 0xb1, 0x03, 0x04, 0xd2, 0xcd, 0xe8, 0x63, 0x84, 0xdc, 0xd7, 0x70, 0x55, 0x66, 0xdb, 0xcf,
		0x45, 0xb6, 0x9b, 0x8b, 0x6c, 0x2f, 0x37, 0xdb, 0x4e, 0xae, 0x2a, 0x78, 0x43, 0x60, 0xb6, 0x03,
		0xc8, 0x35, 0xad, 0xe4, 0x77, 0xb1, 0x8d, 0xdf, 0x35, 0x0e, 0x75, 0xca, 0x9d, 0x8e, 0x32, 0x4f,
		0x77, 0x52, 0x28, 0xb9, 0x55, 0x3f, 0xb6, 0x8e, 0x73, 0xe2, 0xf7, 0x39, 0xc3, 0xc9, 0x90, 0x16,
		0x6c, 0xfe, 0x9c, 0xf8, 0xa2, 0x05, 0x8a, 0x42, 0x06, 0x19, 0x98, 0x9e, 0xb7, 0xb6, 0x30, 0x02,
		0x07, 0xae, 0x61, 0xac, 0x5a, 0xc6, 0xaa, 0x7e, 0x18, 0x6a, 0x20, 0x74, 0xe2, 0xda, 0xfc, 0x40,
		0x1c, 0xb9, 0x66, 0x2f, 0x1c, 0xe6, 0xc8, 0x35, 0x8e, 0x5c, 0x63, 0xc7, 0x08, 0x99, 0x25, 0x8e,
		0x5c, 0x33, 0x37, 0x44, 0x8e, 0x5c, 0x2b, 0xc3, 0x4c, 0xa5, 0xcd, 0xd5, 0x9a, 0xd9, 0x5a, 0x33,
		0x5f, 0x2b, 0x66, 0x6c, 0x66, 0xce, 0x86, 0x66, 0x2d, 0x66, 0xde, 0xd3, 0x64, 0x0c, 0x47, 0xae,
		0x71, 0xe4, 0x1a, 0x67, 0xf2, 0x94, 0xe2, 0x32, 0x64, 0x5c, 0x87, 0x90, 0x0b, 0xd1, 0x4f, 0x36,
		0x59, 0x4c, 0x46, 0xd9, 0x48, 0x56, 0xa9, 0x24, 0xb3, 0x38, 0x72, 0x4d, 0xc3, 0xc9, 0x73, 0xe4,
		0x1a, 0xee, 0x1d, 0xf7, 0x5e, 0x55, 0xf7, 0xce, 0x91, 0x6b, 0x25, 0xf0, 0x48, 0x6b, 0x7c, 0xd2,
		0xa6, 0xe3, 0xb1, 0xef, 0x80, 0x6c, 0x3b, 0xa2, 0xd2, 0x1c, 0x52, 0x69, 0x8e, 0xa9, 0x14, 0x07,
		0x25, 0xeb, 0xa8, 0x84, 0x1d, 0x96, 0x3d, 0x5e, 0xba, 0xa0, 0xef, 0x1c, 0xfe, 0xb0, 0xec, 0x0f,
		0x87, 0x3f, 0x14, 0xba, 0x0d, 0x87, 0x3f, 0xa8, 0x4d, 0x3d, 0x87, 0x3f, 0x6c, 0x9b, 0x36, 0x70,
		0xf8, 0x43, 0x55, 0xac, 0x89, 0x23, 0xd7, 0x60, 0xdd, 0xb0, 0x6e, 0x58, 0x37, 0xac, 0x1b, 0xd6,
		0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba, 0x61, 0xdd, 0xb0, 0x6e, 0xeb, 0xac, 0x9b, 0x23, 0xd7, 0x60,
		0xdb, 0xb0, 0x6d, 0xd8, 0xf6, 0x36, 0xb3, 0x6d, 0x8e, 0x5c, 0xe3, 0xc8, 0x35, 0xab, 0xba, 0x5c,
		0xb5, 0x23, 0xd7, 0xe6, 0x0b, 0xbb, 0xe6, 0x3f, 0xe0, 0xd0, 0xb5, 0x02, 0x40, 0xc3, 0xa1, 0x6b,
		0x1c, 0xba, 0x56, 0x29, 0xfb, 0xb4, 0x7d, 0xec, 0xda, 0x75, 0xc0, 0xb9, 0x6b, 0x1b, 0xea, 0x7b,
		0xa4, 0xa2, 0x10, 0x9c, 0xbc, 0x56, 0x94, 0x94, 0xd1, 0x03, 0x89, 0x4a, 0xb5, 0xed, 0x70, 0x3f,
		0xf4, 0x36, 0x2e, 0x2b, 0xe1, 0x42, 0x9d, 0x1a, 0x75, 0x6a, 0x25, 0x93, 0x4e, 0x9a, 0x6e, 0xd2,
		0xdb, 0x78, 0xed, 0x74, 0xd2, 0xdb, 0x18, 0x37, 0x8b, 0x9b, 0xc5, 0xcd, 0x8a, 0xbb, 0x59, 0x7a,
		0x1b, 0x6f, 0x53, 0x8c, 0xcf, 0xd9, 0x6b, 0x65, 0xc1, 0x1d, 0x21, 0x3e, 0x21, 0x3e, 0x6d, 0x8e,
		0x39, 0x7b, 0xcd, 0xc0, 0x7f, 0x71, 0xf6, 0x1a, 0xce, 0x8b, 0xfc, 0x24, 0xf9, 0x49, 0x02, 0x67,
		0x02, 0x67, 0x02, 0x67, 0xf2, 0x93, 0xe4, 0x27, 0x71, 0xb3, 0xb8, 0x59, 0xdc, 0x2c, 0x6e, 0x96,
		0xfc, 0xe4, 0x8e, 0xe6, 0x27, 0x39, 0x7d, 0x8d, 0xb4, 0x24, 0x91, 0x3d, 0x69, 0xc9, 0x6d, 0x4b,
		0x4b, 0x72, 0xfa, 0x5a, 0x76, 0x0c, 0x4e, 0x5f, 0xdb, 0x9e, 0xd3, 0xd7, 0xf2, 0x20, 0x59, 0xfa,
		0xfc, 0xb5, 0x99, 0x1d, 0xe0, 0x1c, 0xc0, 0x56, 0x60, 0x46, 0xca, 0x3d, 0xf0, 0x29, 0x79, 0x8a,
		0xfa, 0xd0, 0xcd, 0x6a, 0x9c, 0xf6, 0x94, 0xbd, 0x7c, 0x37, 0x8e, 0x7a, 0xf2, 0xef, 0x9f, 0xe4,
		0x49, 0x4f, 0xfe, 0xfd, 0xd6, 0x1c, 0xf4, 0xa4, 0x59, 0x11, 0x60, 0x56, 0x09, 0xb0, 0xad, 0xc7,
		0x3a, 0xf9, 0xf7, 0x9c, 0xea, 0x64, 0xa8, 0xee, 0xe5, 0x10, 0x31, 0xed, 0x43, 0x9d, 0x52, 0x27,
		0x6c, 0x1e, 0xa7, 0x4e, 0x87, 0x22, 0x58, 0xd5, 0x36, 0x1e, 0x62, 0x55, 0x1d, 0xe3, 0x22, 0x54,
		0x15, 0x0d, 0x55, 0x0f, 0x46, 0xd3, 0xf0, 0x2a, 0x43, 0x38, 0xe7, 0x3e, 0x48, 0xfe, 0x5d, 0xf9,
		0xbd, 0x35, 0x83, 0x2f, 0x82, 0xfe, 0x6d, 0x66, 0x34, 0x5c, 0x1c, 0x2e, 0x0e, 0x17, 0xb7, 0xc3,
		0x2e, 0xee, 0xf3, 0xd4, 0xc5, 0xcd, 0x2e, 0x08, 0xa5, 0xdf, 0x68, 0x25, 0x97, 0x64, 0xfd, 0x42,
		0xb4, 0xe4, 0xb3, 0x74, 0xe4, 0xb6, 0xf7, 0x63, 0x37, 0xd2, 0x7e, 0x57, 0x3f, 0x46, 0x89, 0x32,
		0xf5, 0xa6, 0x8b, 0xe6, 0x01, 0x41, 0xcf, 0xad, 0x7b, 0x3f, 0xe2, 0x57, 0xb1, 0xd7, 0xf1, 0xba,
		0x5e, 0x1c, 0x3e, 0xd4, 0x7b, 0x41, 0xdd, 0xfd, 0x36, 0xea, 0x02, 0x29, 0x12, 0x24, 0xdc, 0x3b,
		0x9d, 0x48, 0x22, 0x4a, 0xb0, 0x1d, 0x20, 0xb4, 0xb6, 0x25, 0x61, 0x98, 0xc9, 0xf1, 0x68, 0x15,
		0x14, 0x28, 0xe4, 0xf1, 0x14, 0x32, 0x2f, 0x7a, 0xbb, 0x6e, 0x8d, 0x76, 0xdb, 0x1a, 0xe7, 0x00,
		0x1a, 0xe4, 0x00, 0xc8, 0x01, 0x90, 0x03, 0x80, 0x20, 0x43, 0x90, 0x21, 0xc8, 0xe4, 0x00, 0xc8,
		0x01, 0xe0, 0xe2, 0x70, 0x71, 0xb8, 0x38, 0x72, 0x00, 0x1b, 0x61, 0x9b, 0x95, 0x08, 0x28, 0x35,
		0x76, 0x80, 0x3e, 0x99, 0x7d, 0x21, 0xea, 0x9b, 0x2b, 0xf6, 0xf3, 0xb7, 0xe3, 0x24, 0x3f, 0xdd,
		0x7a, 0xf7, 0x65, 0x6e, 0x34, 0x51, 0x8b, 0xd6, 0xb5, 0xa2, 0x74, 0xed, 0x8d, 0x25, 0x8d, 0x72,
		0x36, 0x96, 0xa8, 0xed, 0x7c, 0xdd, 0x9d, 0x9d, 0x25, 0x4a, 0x3b, 0x57, 0x37, 0xbc, 0xb5, 0x44,
		0xe3, 0x44, 0x82, 0x69, 0xe0, 0xdc, 0xd6, 0x4c, 0x27, 0x1d, 0x6e, 0xd9, 0x96, 0x12, 0xbd, 0x2d,
		0xdc, 0xbb, 0x9f, 0x4f, 0xd2, 0xda, 0xa2, 0x6d, 0x17, 0xe2, 0xb5, 0x89, 0xdf, 0x92, 0x2d, 0x7e,
		0x5a, 0xfd, 0xaa, 0x53, 0xa7, 0xfc, 0x12, 0x88, 0x5f, 0x84, 0x78, 0x05, 0xf2, 0x53, 0x00, 0x86,
		0xf7, 0x0c, 0x24, 0x30, 0xd9, 0x07, 0x9e, 0x3b, 0xc9, 0x6a, 0x9b, 0xbd, 0xb5, 0x36, 0x77, 0x6b,
		0x6d, 0xe6, 0x56, 0xdb, 0xbc, 0x9d, 0x27, 0x0d, 0x45, 0x3d, 0xd0, 0x9c, 0xff, 0x5a, 0x21, 0xe2,
		0xb4, 0x92, 0xcc, 0xad, 0x57, 0x9c, 0xd5, 0xea, 0xb0, 0xfc, 0x37, 0x2b, 0x44, 0x52, 0x54, 0x14,
		0x4a, 0x22, 0x58, 0xfe, 0xe4, 0x8b, 0xcf, 0xb5, 0xe4, 0x99, 0x72, 0x98, 0x64, 0x21, 0xe6, 0x98,
		0xc3, 0x14, 0x73, 0x99, 0x61, 0x11, 0x20, 0x2d, 0x0e, 0x98, 0x45, 0x81, 0x51, 0x19, 0x00, 0x95,
		0x81, 0x4e, 0x09, 0xd0, 0xd4, 0xb4, 0x28, 0x8f, 0x89, 0x4d, 0x8e, 0x2f, 0xac, 0xbb, 0x4e, 0xdf,
		0xf9, 0xe2, 0x77, 0xfc, 0xf8, 0x21, 0x5f, 0x20, 0x73, 0x47, 0x1f, 0x66, 0xaf, 0xcd, 0xf3, 0x76,
		0x85, 0x98, 0x57, 0x61, 0xa6, 0xa5, 0xc2, 0xac, 0xd4, 0x99, 0x94, 0x2a, 0x73, 0xd2, 0x66, 0x4a,
		0xda, 0xcc, 0x48, 0x8b, 0x09, 0x99, 0xe1, 0x55, 0x61, 0x66, 0x93, 0xe1, 0xe7, 0x5e, 0x10, 0xfb,
		0xf1, 0x43, 0xb1, 0x68, 0x3a, 0xf5, 0x11, 0x05, 0x0e, 0xc1, 0xab, 0x5d, 0x27, 0x43, 0xff, 0xec,
		0x44, 0x1a, 0x41, 0xee, 0xc5, 0xe5, 0xdb, 0xbb, 0xcb, 0x0f, 0xbf, 0xbd, 0xff, 0x74, 0x75, 0x7b,
		0x77, 0x79, 0x71, 0x73, 0xf1, 0xf3, 0xf5, 0xdb, 0xeb, 0x4f, 0x7f, 0x14, 0x9d, 0xb3, 0xd1, 0xf9,
		0x7d, 0x6a, 0x7b, 0x39, 0x34, 0x03, 0x9c, 0xeb, 0xe1, 0x13, 0xfe, 0x72, 0x71, 0x79, 0x75, 0xf7,
		0xe1, 0xfd, 0xdb, 0x3f, 0x6a, 0x36, 0x56, 0xf5, 0x8d, 0x9f, 0xec, 0xe2, 0xcd, 0x9b, 0xdb, 0xab,
		0x37, 0x17, 0x9f, 0xae, 0xaa, 0xf4, 0x78, 0xe9, 0x43, 0xa9, 0x0a, 0xae, 0xd0, 0x37, 0x5b, 0xa6,
		0x96, 0x56, 0x39, 0xa2, 0xb0, 0x86, 0x16, 0x2f, 0xe1, 0x08, 0x7b, 0x6b, 0x1e, 0x2e, 0xef, 0xa1,
		0xf2, 0x1f, 0xa6, 0xb6, 0x94, 0x82, 0xcc, 0x71, 0xb2, 0xd9, 0x67, 0x9d, 0x3e, 0x51, 0xe6, 0x69,
		0x6a, 0x19, 0xf6, 0x33, 0xff, 0x24, 0x8b, 0xc1, 0xd6, 0xfc, 0x09, 0xe1, 0x2b, 0x18, 0xcb, 0x4a,
		0x80, 0x5a, 0x07, 0x48, 0xb9, 0x2b, 0x3f, 0x79, 0x78, 0x53, 0x18, 0x5f, 0x0a, 0xe3, 0x49, 0x91,
		0x95, 0x95, 0xf5, 0xf3, 0xbc, 0x8a, 0x5f, 0x14, 0xd8, 0x19, 0x51, 0x78, 0xe7, 0x43, 0x61, 0xda,
		0x78, 0x28, 0x43, 0x1b, 0xd7, 0x2e, 0xcb, 0x55, 0x97, 0x35, 0xae, 0x5b, 0x16, 0x13, 0x27, 0x8d,
		0x85, 0x2a, 0xc1, 0xd4, 0x2a, 0xbf, 0x0a, 0xe6, 0x91, 0xad, 0x93, 0xc3, 0x42, 0xab, 0xb2, 0xdb,
		0xc7, 0x0d, 0x8b, 0xac, 0x9a, 0x9a, 0x51, 0xc3, 0xa2, 0x59, 0xdf, 0x5a, 0xdb, 0x8b, 0xdc, 0xd0,
		0xef, 0x2b, 0xa5, 0x7b, 0xd2, 0x19, 0xca, 0x5e, 0xac, 0xb6, 0x40, 0x71, 0x48, 0xe5, 0x2b, 0x95,
		0xaf, 0x5a, 0xd9, 0xd9, 0x4c, 0x76, 0x23, 0xf4, 0x03, 0x95, 0x12, 0x56, 0xc5, 0x3c, 0xac, 0xcc,
		0xa2, 0x9f, 0x17, 0x38, 0x5f, 0x3a, 0x5e, 0x5b, 0xdd, 0xb6, 0x26, 0x17, 0x16, 0x5d, 0xe6, 0xf1,
		0xee, 0x9d, 0x41, 0x67, 0x34, 0x9f, 0x43, 0x75, 0xc0, 0x1c, 0x31, 0xc7, 0x72, 0xcd, 0xf1, 0x4b,
		0xaf, 0xd7, 0xf1, 0x9c, 0x40, 0xc7, 0x1e, 0x8f, 0x4a, 0xb4, 0xc7, 0x4e, 0xaf, 0xd7, 0xff, 0xe2,
		0xb8, 0xdf, 0xeb, 0xdd, 0x5e, 0x5b, 0x23, 0x4f, 0x31, 0x7b, 0xb9, 0xba, 0x6d, 0x8e, 0x0a, 0x33,
		0x30, 0x4e, 0x8c, 0x13, 0xe3, 0x5c, 0x72, 0xcf, 0x6e, 0x3c, 0x50, 0x37, 0xc9, 0xe1, 0x45, 0x18,
		0x14, 0x06, 0x55, 0xaa, 0x41, 0x0d, 0xfc, 0x20, 0x3e, 0x3a, 0xd5, 0xb0, 0xa7, 0x53, 0x85, 0x4b,
		0x6e, 0x47, 0x05, 0x81, 0xaa, 0x15, 0x8a, 0x7a, 0xed, 0xc7, 0x0c, 0xf6, 0xa4, 0x98, 0x6d, 0x04,
		0x1f, 0xe5, 0xee, 0x0d, 0xae, 0xff, 0x25, 0x74, 0xdc, 0x61, 0x00, 0xfa, 0xda, 0xff, 0xea, 0x8f,
		0xd6, 0xca, 0x0f, 0x4b, 0xd9, 0x90, 0xff, 0xce, 0xf9, 0xb1, 0x71, 0x91, 0x9d, 0x9e, 0x9c, 0x1c,
		0x9f, 0x6c, 0x50, 0x6c, 0x96, 0xb6, 0xb3, 0xb4, 0x4a, 0x44, 0x1c, 0xa5, 0xc3, 0x13, 0x52, 0xeb,
		0x57, 0x38, 0x20, 0x01, 0xcc, 0x01, 0x73, 0x9e, 0x54, 0xc2, 0x43, 0xa9, 0x5b, 0xb0, 0x4e, 0x77,
		0x60, 0x2c, 0x0a, 0x8b, 0x12, 0xb2, 0x28, 0xb5, 0xed, 0x10, 0x0b, 0x66, 0xa5, 0x80, 0xbd, 0x7a,
		0xdb, 0x23, 0x16, 0x1f, 0x38, 0xdd, 0x89, 0xaa, 0xd6, 0x7d, 0xf7, 0xb1, 0x12, 0xfb, 0x2b, 0x0b,
		0x37, 0xdc, 0x50, 0x5f, 0xc7, 0x31, 0x6e, 0xa8, 0xa1, 0xdf, 0x40, 0x43, 0xb1, 0x61, 0xc6, 0x7a,
		0x11, 0xb6, 0x4a, 0xdb, 0x94, 0xb9, 0x6c, 0x33, 0x66, 0x76, 0x5f, 0x6e, 0x91, 0x2e, 0x17, 0x6b,
		0xb6, 0x4d, 0xac, 0x59, 0xb5, 0xfd, 0xd6, 0xeb, 0xb4, 0xeb, 0xb1, 0x5f, 0x80, 0x78, 0xa5, 0x7a,
		0x3f, 0xbd, 0x84, 0x75, 0x4b, 0xd6, 0x2d, 0x35, 0x1a, 0xa0, 0xea, 0x35, 0x3e, 0xa5, 0x4f, 0x2f,
		0x54, 0x43, 0x4b, 0x3d, 0xd3, 0x0b, 0xda, 0xbd, 0xbf, 0x02, 0x7d, 0xb8, 0x1f, 0x5d, 0xad, 0xda,
		0x3f, 0x65, 0xba, 0xd8, 0x70, 0xf8, 0x44, 0x8a, 0xb1, 0xe8, 0xed, 0x63, 0x6c, 0x26, 0x9a, 0x39,
		0x9d, 0xd2, 0x4b, 0xb1, 0x06, 0x7e, 0x10, 0x1f, 0x37, 0x0c, 0x8a, 0xb0, 0x34, 0x2a, 0xee, 0x35,
		0xf3, 0xb0, 0xfa, 0xf9, 0x58, 0x91, 0xbc, 0xac, 0x50, 0xb2, 0x51, 0x2a, 0x4f, 0x2b, 0x99, 0x78,
		0x34, 0xc8, 0xdb, 0x8a, 0xe4, 0x6f, 0x6d, 0x89, 0xb6, 0xd9, 0x38, 0x6f, 0x9e, 0x9f, 0x9e, 0x35,
		0xce, 0x4f, 0x2a, 0x24, 0xe3, 0x92, 0xda, 0x3c, 0xb4, 0x2a, 0xd0, 0x4e, 0x6f, 0xd0, 0xd7, 0x87,
		0xea, 0x41, 0x1f, 0xa0, 0x06, 0xa8, 0x01, 0x6a, 0x80, 0x1a, 0xa0, 0x06, 0xa8, 0x01, 0x6a, 0x75,
		0xa0, 0x16, 0x0d, 0xd4, 0x95, 0x7b, 0x3b, 0xeb, 0xe7, 0x44, 0xc4, 0x7a, 0x39, 0x9b, 0xf7, 0x70,
		0xd6, 0xec, 0xdd, 0x5c, 0xb0, 0xc6, 0x6e, 0x63, 0xfd, 0x23, 0xf2, 0x52, 0xd5, 0x69, 0x76, 0x58,
		0xa9, 0x35, 0x33, 0x4d, 0x9d, 0xc8, 0x42, 0x92, 0x85, 0x24, 0x0b, 0x49, 0x70, 0x43, 0x70, 0x43,
		0x70, 0x43, 0x70, 0x43, 0x70, 0x43, 0x70, 0x43, 0x16, 0x12, 0xa0, 0x06, 0xa8, 0x01, 0x6a, 0x80,
		0x1a, 0xa0, 0x06, 0xa8, 0xc9, 0x42, 0x1a, 0x06, 0xea, 0x9b, 0x4c, 0x85, 0x55, 0xa8, 0xaf, 0x6a,
		0x79, 0x9b, 0x56, 0x8b, 0xee, 0x13, 0xdd, 0x5f, 0x6c, 0x61, 0x35, 0xed, 0x0f, 0xff, 0x6b, 0xaf,
		0xd3, 0xfe, 0xe4, 0x77, 0x3d, 0x1b, 0x7b, 0x5f, 0x0b, 0xd5, 0x1b, 0xa9, 0xd4, 0x19, 0x55, 0xa5,
		0x8d, 0x23, 0x3b, 0x5e, 0x35, 0x8d, 0x43, 0xbd, 0x89, 0x63, 0xf1, 0xf3, 0x47, 0x54, 0xce, 0x19,
		0x49, 0xcf, 0x13, 0x79, 0xf1, 0x22, 0x49, 0xa3, 0x1f, 0xe4, 0x1f, 0x8a, 0xa4, 0x67, 0x04, 0xc5,
		0x72, 0xe6, 0x4a, 0xb9, 0x72, 0xe5, 0x8d, 0xdf, 0x0d, 0xcc, 0xa0, 0x52, 0x66, 0x50, 0x78, 0xe3,
		0xb7, 0xd3, 0xee, 0xfa, 0x41, 0x7d, 0xa8, 0x13, 0x83, 0x48, 0x7d, 0xdd, 0x65, 0xe6, 0x6a, 0xea,
		0xcd, 0xca, 0x0b, 0x5f, 0xa9, 0x37, 0x1b, 0xf5, 0x74, 0x1a, 0x74, 0xbd, 0xd0, 0x51, 0xe8, 0x97,
		0x36, 0xe3, 0xdb, 0x9a, 0x0a, 0xd7, 0x5c, 0x05, 0x83, 0xee, 0xf0, 0x21, 0x59, 0x56, 0xdf, 0xdc,
		0xb2, 0xfa, 0xf3, 0xf2, 0xc4, 0xd4, 0xeb, 0x27, 0x7a, 0xe5, 0x74, 0x76, 0x6c, 0xd7, 0x81, 0xc8,
		0x2a, 0x7d, 0xd2, 0x1d, 0x3d, 0xd2, 0xa9, 0x17, 0x4a, 0xae, 0xa4, 0x62, 0x08, 0xb0, 0xd0, 0xf0,
		0x98, 0xca, 0x6b, 0xf5, 0xae, 0x13, 0x86, 0xbe, 0x17, 0xd6, 0xe3, 0xd0, 0x09, 0x22, 0x7f, 0x68,
		0xd2, 0x91, 0xfe, 0x7a, 0xc0, 0xb2, 0xc1, 0x48, 0xf2, 0x8b, 0x2b, 0xbc, 0x98, 0xe2, 0x8b, 0x19,
		0x80, 0x84, 0x21, 0xe8, 0x65, 0xe7, 0xca, 0x4f, 0xf2, 0x27, 0x2e, 0xfa, 0xb4, 0x69, 0x90, 0xe7,
		0x7f, 0x49, 0x9e, 0xdf, 0x2c, 0x19, 0x4d, 0x9e, 0xdf, 0x9a, 0x68, 0x8f, 0x5e, 0x36, 0x9b, 0xa7,
		0x67, 0xcd, 0xe6, 0xe1, 0xd9, 0xf1, 0xd9, 0xe1, 0xf9, 0xc9, 0xc9, 0xd1, 0xe9, 0x11, 0x19, 0x7f,
		0x61, 0x2f, 0xa4, 0x1c, 0xd8, 0x98, 0x99, 0xb1, 0x95, 0x40, 0x47, 0x8e, 0xd1, 0x1b, 0x32, 0x7b,
		0xbd, 0x49, 0x6e, 0x59, 0xd9, 0x4d, 0xe1, 0x07, 0xf5, 0x2f, 0x61, 0xcf, 0x69, 0xbb, 0x4e, 0x14,
		0xd7, 0xfb, 0xdf, 0xe3, 0xc8, 0xa4, 0xf9, 0xca, 0xfc, 0x50, 0x50, 0x29, 0xa8, 0x14, 0x54, 0x0a,
		0x2a, 0x05, 0x95, 0x82, 0x4a, 0xb1, 0x79, 0x42, 0x15, 0x97, 0xdb, 0x7e, 0xe4, 0x3a, 0x61, 0xdb,
		0x0c, 0x91, 0xd3, 0x41, 0xc0, 0x62, 0xb0, 0x18, 0x2c, 0x06, 0x8b, 0xc1, 0x62, 0xb0, 0x18, 0x2c,
		0x56, 0xc5, 0x62, 0x2f, 0x0c, 0x7b, 0xa1, 0x19, 0x12, 0x27, 0x43, 0x80, 0xc3, 0xe0, 0x30, 0x38,
		0x0c, 0x0e, 0x83, 0xc3, 0xe0, 0x30, 0x38, 0xac, 0x8a, 0xc3, 0xf7, 0x6e, 0x24, 0x81, 0xc5, 0x99,
		0x61, 0xc0, 0x63, 0xf0, 0x18, 0x3c, 0x06, 0x8f, 0xc1, 0x63, 0xf0, 0x18, 0x3c, 0x56, 0xc5, 0xe3,
		0xee, 0xa0, 0x13, 0xfb, 0x32, 0x6b, 0xc7, 0x73, 0x43, 0x81, 0xcb, 0xe0, 0x32, 0xb8, 0x0c, 0x2e,
		0x83, 0xcb, 0xe0, 0x32, 0xb8, 0xac, 0x8a, 0xcb, 0x3d, 0x37, 0xf6, 0x0c, 0xf1, 0x38, 0x19, 0x02,
		0x1c, 0x06, 0x87, 0xc1, 0x61, 0x70, 0x18, 0x1c, 0x06, 0x87, 0xc1, 0x61, 0x55, 0x1c, 0x36, 0x8e,
		0x8a, 0x89, 0x85, 0xc1, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x83, 0xc1, 0x60, 0x30, 0x58, 0x0b, 0x83,
		0x07, 0x81, 0x50, 0x86, 0x7a, 0x66, 0x20, 0x30, 0x19, 0x4c, 0x06, 0x93, 0xc1, 0x64, 0x30, 0x19,
		0x4c, 0x06, 0x93, 0xd5, 0x31, 0xf9, 0x7b, 0xd0, 0xfb, 0x2b, 0xa8, 0xf7, 0xc3, 0x5e, 0xdc, 0x33,
		0x45, 0xe5, 0x99, 0xa1, 0xc0, 0x65, 0x70, 0x19, 0x5c, 0x06, 0x97, 0xc1, 0x65, 0x70, 0x19, 0x5c,
		0x56, 0xc2, 0xe5, 0xce, 0x30, 0xb8, 0x75, 0x3b, 0x9e, 0x13, 0xea, 0x03, 0x72, 0x66, 0x0c, 0x90,
		0x18, 0x24, 0xde, 0x29, 0x24, 0x8e, 0xfd, 0xae, 0x17, 0xfb, 0xee, 0xf7, 0xa8, 0x74, 0x2c, 0xfe,
		0x2d, 0x18, 0xfb, 0xb1, 0x5a, 0xe0, 0x04, 0xbd, 0xc8, 0x73, 0x7b, 0x81, 0x72, 0x45, 0x3f, 0x98,
		0x0e, 0xa6, 0x83, 0xe9, 0x55, 0xc6, 0x74, 0x5a, 0xb2, 0xd1, 0x92, 0x6d, 0xf8, 0x06, 0xbd, 0x41,
		0x2c, 0xd6, 0x93, 0x6d, 0xc9, 0x58, 0xd0, 0x32, 0x68, 0x19, 0x09, 0x12, 0x12, 0x24, 0x90, 0x29,
		0xc8, 0x14, 0x09, 0x12, 0x65, 0x64, 0x36, 0xef, 0xca, 0x36, 0x33, 0x0a, 0x68, 0x0c, 0x1a, 0x83,
		0xc6, 0xa0, 0x31, 0x68, 0x0c, 0x1a, 0x83, 0xc6, 0xca, 0x68, 0x6c, 0xda, 0x0b, 0x26, 0x33, 0x06,
		0x48, 0x0c, 0x12, 0x83, 0xc4, 0x20, 0x31, 0x48, 0x0c, 0x12, 0x83, 0xc4, 0xca, 0x48, 0x2c, 0xd5,
		0x09, 0x66, 0xc9, 0x58, 0x20, 0x33, 0xc8, 0x0c, 0x32, 0x83, 0xcc, 0x20, 0x33, 0xc8, 0x0c, 0x32,
		0x2b, 0x23, 0xb3, 0x69, 0x2f, 0x98, 0xcc, 0x18, 0x20, 0x31, 0x48, 0x0c, 0x12, 0x83, 0xc4, 0x20,
		0x31, 0x48, 0x0c, 0x12, 0x2b, 0x23, 0xb1, 0x79, 0x64, 0x4c, 0x3c, 0x0c, 0x0a, 0x83, 0xc2, 0xa0,
		0x30, 0x28, 0x0c, 0x0a, 0x83, 0xc2, 0x7a, 0x28, 0x2c, 0xd3, 0x0f, 0x66, 0x61, 0x24, 0x50, 0x19,
		0x54, 0x06, 0x95, 0x41, 0x65, 0x50, 0x19, 0x54, 0x06, 0x95, 0x0b, 0x7e, 0xb3, 0xa0, 0x4e, 0xa9,
		0x17, 0xbb, 0x29, 0xa2, 0xfa, 0x62, 0x71, 0x5b, 0xaf, 0xef, 0x85, 0xce, 0x70, 0x2e, 0x9d, 0x8e,
		0x2a, 0xb4, 0x1b, 0x17, 0xb3, 0x69, 0x16, 0xb1, 0x15, 0x13, 0x79, 0xab, 0xa0, 0xc8, 0x2f, 0x82,
		0xa0, 0x17, 0x8f, 0x24, 0xa0, 0x64, 0xb9, 0xb5, 0xc8, 0xfd, 0xe6, 0x75, 0x9d, 0xbe, 0x13, 0x7f,
		0x1b, 0x3e, 0xfd, 0x41, 0xaf, 0xef, 0x05, 0xee, 0x88, 0xb4, 0xd4, 0xfd, 0x21, 0x9c, 0xdc, 0x3b,
		0xae, 0x17, 0x1d, 0x2c, 0xfb, 0xf1, 0x20, 0x8a, 0x9d, 0xd8, 0x3b, 0x48, 0x60, 0x47, 0x85, 0x50,
		0xd5, 0xa2, 0x38, 0x1c, 0xb8, 0x71, 0x90, 0x00, 0xd7, 0xf5, 0x64, 0xc4, 0xbb, 0xcb, 0xc9, 0x58,
		0x7b, 0x32, 0xf2, 0x2b, 0xa0, 0xae, 0xb5, 0xb6, 0x17, 0xb9, 0xa1, 0xdf, 0x57, 0x12, 0x5c, 0x8a,
		0xb9, 0xd9, 0x8b, 0x0b, 0xce, 0x93, 0x9a, 0x57, 0x54, 0x26, 0x90, 0x3a, 0xc4, 0x51, 0x9b, 0x30,
		0xea, 0x12, 0x45, 0x63, 0x82, 0x68, 0x4c, 0x0c, 0x4d, 0x08, 0xa1, 0xac, 0xab, 0x54, 0x26, 0x7e,
		0xe9, 0x6c, 0x45, 0x71, 0xe8, 0x07, 0x5f, 0x55, 0xa6, 0x2b, 0xd1, 0xbd, 0xa3, 0x97, 0x25, 0xda,
		0x97, 0x17, 0x38, 0x5f, 0x3a, 0x5e, 0x5b, 0xdd, 0xb6, 0x26, 0x17, 0x16, 0x94, 0xe3, 0x6b, 0xef,
		0xde, 0x19, 0x74, 0x46, 0xf3, 0x39, 0x54, 0x07, 0xcc, 0x11, 0x73, 0x2c, 0xd7, 0x1c, 0xbf, 0xf4,
		0x7a, 0x1d, 0xcf, 0x09, 0x74, 0xec, 0xf1, 0xa8, 0x44, 0x7b, 0xf4, 0xef, 0xfd, 0xa0, 0xed, 0xfd,
		0x50, 0xb7, 0xc7, 0xc9, 0x85, 0x18, 0x16, 0x86, 0x55, 0xaa, 0x61, 0x0d, 0xfc, 0x20, 0x3e, 0x6e,
		0x68, 0xd8, 0xd5, 0x99, 0xc2, 0x25, 0x7a, 0x59, 0x0c, 0x8d, 0x74, 0x8d, 0x49, 0xd6, 0xc2, 0x30,
		0xa4, 0x36, 0xcd, 0x52, 0x48, 0xc4, 0xcb, 0x1a, 0x59, 0x09, 0xa3, 0x6c, 0x84, 0x94, 0xc8, 0x9a,
		0x8d, 0xf3, 0xe6, 0xf9, 0xe9, 0x59, 0xe3, 0xfc, 0x64, 0x83, 0xb2, 0xb3, 0x14, 0xfb, 0xb7, 0xb6,
		0x3c, 0xf6, 0x37, 0x6f, 0x6c, 0xb3, 0xb9, 0x1c, 0xc0, 0x73, 0x52, 0x24, 0xe6, 0x29, 0x12, 0x11,
		0x62, 0x34, 0x6e, 0x85, 0xf8, 0x2d, 0xc1, 0x01, 0x45, 0x72, 0x94, 0xbd, 0x18, 0x82, 0x04, 0x41,
		0x2a, 0x95, 0x20, 0xe9, 0x35, 0x3a, 0xd4, 0x58, 0xf3, 0x31, 0x6d, 0x6c, 0x08, 0xcb, 0x82, 0x65,
		0xad, 0x15, 0x99, 0xdc, 0x1a, 0x0f, 0x7c, 0x0b, 0xbe, 0x05, 0xdf, 0xaa, 0x34, 0xdf, 0xea, 0x7d,
		0xf5, 0x5d, 0xa7, 0xa3, 0xc1, 0xb5, 0x92, 0x0b, 0xe1, 0x59, 0xf0, 0xac, 0x1d, 0xcb, 0xf0, 0xe2,
		0xf2, 0x71, 0xf9, 0x3b, 0xed, 0xf2, 0x7b, 0xfd, 0x2f, 0x8e, 0xfb, 0xbd, 0xde, 0xed, 0xb5, 0x75,
		0x82, 0xec, 0x99, 0xcb, 0xd5, 0xd7, 0x05, 0x47, 0x42, 0x05, 0x36, 0x80, 0x8d, 0x5d, 0x83, 0x0d,
		0x11, 0xe3, 0xec, 0xc6, 0x03, 0x75, 0x93, 0x1c, 0x5e, 0x84, 0x41, 0x61, 0x50, 0xa5, 0x1a, 0xd4,
		0xc0, 0x0f, 0xe2, 0xa3, 0x53, 0x0d, 0x7b, 0x3a, 0x25, 0x55, 0x45, 0xaa, 0x4a, 0x48, 0x64, 0xa7,
		0x27, 0x27, 0xc7, 0x4f, 0x37, 0x37, 0x25, 0x82, 0x38, 0xc9, 0x06, 0x50, 0x45, 0xc8, 0x19, 0x5d,
		0x05, 0xe6, 0x80, 0x39, 0xa5, 0x62, 0xce, 0x76, 0x6c, 0xb6, 0x1c, 0xc6, 0x9f, 0xf5, 0x28, 0x76,
		0xe2, 0x41, 0xa4, 0x6e, 0x58, 0xd9, 0x8b, 0xb1, 0x2f, 0xec, 0xab, 0x54, 0xfb, 0xf2, 0x82, 0x41,
		0x37, 0xc9, 0x9d, 0xe8, 0x18, 0x59, 0x53, 0xe1, 0x9a, 0xab, 0x60, 0xd0, 0x1d, 0x3e, 0xe4, 0x23,
		0x39, 0x39, 0x72, 0x72, 0x4f, 0x3e, 0x27, 0x17, 0xab, 0x98, 0xec, 0x74, 0xcb, 0xc1, 0xf0, 0x2a,
		0x40, 0x02, 0x90, 0x28, 0x15, 0x24, 0xfc, 0xb6, 0x17, 0xc4, 0x7e, 0xfc, 0x10, 0x7a, 0xf7, 0x3a,
		0x20, 0xa1, 0x10, 0xae, 0xd5, 0xae, 0x93, 0x5b, 0xfd, 0xec, 0x44, 0x9e, 0xc9, 0x79, 0xf7, 0x49,
		0x69, 0x5b, 0x7d, 0x64, 0x30, 0xd2, 0x02, 0xdf, 0x33, 0xfb, 0x46, 0xce, 0x84, 0xa9, 0x96, 0x14,
		0x9a, 0x96, 0x12, 0xae, 0x17, 0xcf, 0xea, 0x57, 0x59, 0xf3, 0x1a, 0xb5, 0x68, 0xf0, 0x65, 0x7a,
		0xc3, 0xdc, 0xb7, 0x98, 0xb2, 0xfd, 0x99, 0xcb, 0x72, 0xc4, 0x34, 0x51, 0xaf, 0x9c, 0xaf, 0x15,
		0xf5, 0x6b, 0x2a, 0xfe, 0x4c, 0xd9, 0x8f, 0xa9, 0xfa, 0x2f, 0x6d, 0xbf, 0xa5, 0xed, 0xaf, 0x74,
		0xfc, 0x94, 0x99, 0x9a, 0xbf, 0xf6, 0xc3, 0x82, 0xfa, 0x9d, 0xd1, 0x0a, 0x75, 0xc8, 0x9c, 0xb9,
		0x5a, 0x0d, 0x3a, 0x8f, 0x80, 0x4e, 0xa0, 0x53, 0x45, 0x55, 0xd3, 0x0b, 0xdc, 0x89, 0x46, 0x68,
		0x02, 0x58, 0x72, 0xbd, 0x5e, 0xb3, 0x9c, 0x23, 0x9a, 0xe5, 0x94, 0xa0, 0xde, 0x62, 0x6a, 0x2e,
		0xa1, 0xee, 0x9a, 0xe9, 0x69, 0xc5, 0xf9, 0x56, 0x35, 0x83, 0xf4, 0x42, 0x9d, 0x62, 0xff, 0x95,
		0x1a, 0xa3, 0x5e, 0xfc, 0x6f, 0x18, 0x1a, 0x89, 0x19, 0x8c, 0x84, 0xe1, 0x88, 0x19, 0x90, 0x94,
		0x21, 0x89, 0x1b, 0x94, 0xb8, 0x61, 0x49, 0x1a, 0x98, 0x9e, 0xa1, 0x69, 0x1a, 0x9c, 0x7e, 0xe8,
		0xb6, 0x9a, 0x0d, 0xa9, 0xe6, 0xd3, 0x57, 0x82, 0xcc, 0xcb, 0x92, 0x3a, 0xef, 0xe8, 0x2c, 0x54,
		0xaa, 0x36, 0x3f, 0x58, 0x93, 0x1e, 0x55, 0x69, 0x86, 0xb0, 0xe8, 0x30, 0xb5, 0x9a, 0x23, 0xe0,
		0xae, 0x70, 0x57, 0xb8, 0x2b, 0xcd, 0x3d, 0x5c, 0x2b, 0xfd, 0xd5, 0x51, 0x85, 0xfd, 0x95, 0x5a,
		0x6b, 0x88, 0x35, 0x69, 0xaf, 0xe2, 0x8d, 0x22, 0xd6, 0xf9, 0xaa, 0x43, 0x1c, 0x15, 0x8e, 0x0a,
		0x47, 0xa5, 0xa2, 0x2d, 0xca, 0xcd, 0x32, 0x56, 0xd9, 0xce, 0x99, 0xc1, 0x10, 0x66, 0x2d, 0x41,
		0x27, 0x7f, 0xcc, 0xd4, 0x75, 0x5f, 0xaa, 0x45, 0xa8, 0x90, 0x53, 0x59, 0x18, 0x4e, 0xa8, 0x65,
		0x68, 0x3a, 0x9e, 0x60, 0x33, 0x4b, 0x43, 0x75, 0x9e, 0x9d, 0x02, 0x81, 0x56, 0xa2, 0xb6, 0xa7,
		0xc0, 0xb4, 0xb9, 0x47, 0x29, 0x73, 0xb1, 0xb7, 0x99, 0xab, 0x5b, 0x65, 0xd1, 0x15, 0xab, 0x19,
		0x23, 0xe5, 0xdd, 0x19, 0x66, 0x4e, 0xc8, 0xca, 0x6e, 0x8d, 0x15, 0xb8, 0xa9, 0xb1, 0x2d, 0x61,
		0x29, 0x60, 0xda, 0x4e, 0xf2, 0xb5, 0x54, 0x93, 0xee, 0x7a, 0x0d, 0x4d, 0xd3, 0xeb, 0x0d, 0x56,
		0x23, 0xb3, 0xab, 0x7f, 0x33, 0xff, 0x3a, 0x48, 0xf2, 0xe1, 0x15, 0x68, 0x8d, 0xaf, 0x47, 0xd5,
		0x8d, 0x28, 0x3a, 0x4d, 0xf0, 0x37, 0x41, 0x97, 0x69, 0x82, 0xaf, 0x30, 0xdb, 0x1d, 0xcf, 0xb9,
		0x57, 0xdb, 0x1d, 0xb2, 0x10, 0x9f, 0x6b, 0x10, 0xdf, 0xda, 0x4d, 0xe2, 0x65, 0x5e, 0xbc, 0x48,
		0x3c, 0xc4, 0xc1, 0xd8, 0xbe, 0x2a, 0xe0, 0x27, 0xc6, 0x5b, 0x2b, 0xb4, 0xfd, 0xc4, 0xf8, 0xf2,
		0x92, 0xd7, 0xff, 0x1a, 0xf8, 0x09, 0xfc, 0xc4, 0xba, 0x14, 0x91, 0xee, 0xfa, 0x9f, 0xd3, 0xee,
		0xfa, 0x81, 0xea, 0x06, 0xf9, 0x95, 0x2a, 0x33, 0x33, 0x1a, 0x99, 0x2a, 0x32, 0x55, 0x64, 0xaa,
		0x14, 0xb4, 0x45, 0x6f, 0xc7, 0xff, 0x4a, 0xac, 0x69, 0x1a, 0x8c, 0xa1, 0x56, 0x11, 0x20, 0x25,
		0x4a, 0xed, 0x98, 0x54, 0x26, 0x41, 0x66, 0x35, 0x46, 0x95, 0x8f, 0x55, 0x85, 0x62, 0x56, 0x81,
		0xd4, 0x96, 0xb8, 0xd8, 0xf5, 0x2b, 0x14, 0x10, 0x37, 0xe2, 0x96, 0xc3, 0x84, 0x56, 0x29, 0x6b,
		0x8c, 0xe9, 0x81, 0x31, 0xc6, 0xfc, 0x4b, 0xe3, 0xe8, 0x19, 0x81, 0x30, 0x05, 0xee, 0x05, 0xf7,
		0xda, 0x0c, 0xf7, 0xd2, 0x0d, 0x7b, 0xa6, 0xa6, 0xe7, 0x84, 0xa1, 0xef, 0x85, 0xf5, 0x38, 0x74,
		0x82, 0xc8, 0x1f, 0xba, 0xc0, 0xc8, 0x7c, 0xc2, 0x53, 0x6b, 0x5c, 0x32, 0xf8, 0xf3, 0x4a, 0x9c,
		0x20, 0x67, 0x6a, 0xa8, 0x92, 0x06, 0x2b, 0x6e, 0xb8, 0xd2, 0x06, 0x6c, 0xcd, 0x90, 0xad, 0x19,
		0xb4, 0x0d, 0xc3, 0x36, 0x33, 0x70, 0x01, 0xd6, 0x23, 0x13, 0x6c, 0xad, 0x82, 0x4c, 0xad, 0x43,
		0x42, 0x57, 0x99, 0xe7, 0x4b, 0x81, 0xa1, 0x64, 0x76, 0x0c, 0xc8, 0x50, 0xc6, 0x99, 0x07, 0x93,
		0xdc, 0x41, 0x20, 0xec, 0xd7, 0x16, 0x86, 0x15, 0xde, 0x51, 0x90, 0x8e, 0x6b, 0x61, 0x35, 0x5b,
		0xc8, 0x42, 0x66, 0xa7, 0x4a, 0x70, 0xa7, 0x41, 0x59, 0x53, 0x25, 0x7f, 0xa8, 0x69, 0xa9, 0xb3,
		0xb7, 0x57, 0x8d, 0x51, 0x5a, 0x1b, 0xf5, 0xd2, 0xc6, 0x79, 0x1c, 0x59, 0xb7, 0x55, 0x4a, 0x5e,
		0xc7, 0x5e, 0x04, 0x2c, 0x1c, 0x09, 0xcb, 0x28, 0x59, 0x6b, 0x23, 0xa7, 0x30, 0xfb, 0x41, 0xfd,
		0x4b, 0xd8, 0x73, 0xda, 0xfa, 0xc7, 0xdf, 0xaf, 0xe4, 0x01, 0x8b, 0x43, 0x43, 0xd5, 0xa1, 0xea,
		0x50, 0x75, 0xa8, 0x3a, 0x54, 0x1d, 0xaa, 0x0e, 0x55, 0x87, 0xaa, 0x57, 0x93, 0xaa, 0x6f, 0x8a,
		0x87, 0xb5, 0xfd, 0xc8, 0x75, 0xc2, 0xb6, 0x2c, 0x03, 0x4b, 0x07, 0x85, 0x7b, 0xc1, 0xbd, 0xe0,
		0x5e, 0x70, 0x2f, 0xb8, 0x17, 0xdc, 0x0b, 0xee, 0x05, 0xf7, 0x82, 0x7b, 0x65, 0xb9, 0x97, 0x17,
		0x86, 0xbd, 0x50, 0x96, 0x79, 0x25, 0x43, 0xc2, 0xbb, 0xe0, 0x5d, 0xf0, 0x2e, 0x78, 0x17, 0xbc,
		0x0b, 0xde, 0x05, 0xef, 0x82, 0x77, 0xc1, 0xbb, 0xb2, 0xbc, 0xeb, 0xde, 0x8d, 0x6c, 0x70, 0xaf,
		0xcc, 0xb0, 0xf0, 0x2f, 0xf8, 0x17, 0xfc, 0x0b, 0xfe, 0x05, 0xff, 0x82, 0x7f, 0xc1, 0xbf, 0xe0,
		0x5f, 0xf0, 0xaf, 0x2c, 0xff, 0xea, 0x0e, 0x3a, 0xb1, 0x6f, 0x67, 0xef, 0xd7, 0xdc, 0xd0, 0xf0,
		0x30, 0x78, 0x18, 0x3c, 0x0c, 0x1e, 0x06, 0x0f, 0x83, 0x87, 0xc1, 0xc3, 0xe0, 0x61, 0xf0, 0xb0,
		0x2c, 0x0f, 0xeb, 0xb9, 0xb1, 0x27, 0xcc, 0xbf, 0x92, 0x21, 0xe1, 0x5d, 0xf0, 0x2e, 0x78, 0x17,
		0xbc, 0x0b, 0xde, 0x05, 0xef, 0x82, 0x77, 0xc1, 0xbb, 0xe0, 0x5d, 0x59, 0xde, 0x25, 0x9e, 0xf5,
		0x22, 0xd7, 0x05, 0xe7, 0x82, 0x73, 0xc1, 0xb9, 0xe0, 0x5c, 0x70, 0x2e, 0x38, 0x17, 0x9c, 0x0b,
		0xce, 0xb5, 0xc0, 0xb9, 0x06, 0x81, 0xa5, 0x15, 0xc7, 0x99, 0x81, 0xe1, 0x60, 0x70, 0x30, 0x38,
		0x18, 0x1c, 0x0c, 0x0e, 0x06, 0x07, 0x83, 0x83, 0xc1, 0xc1, 0xe0, 0x60, 0xb3, 0x1c, 0xec, 0x7b,
		0xd0, 0xfb, 0x2b, 0xa8, 0xf7, 0xc3, 0x5e, 0xdc, 0x93, 0x66, 0x61, 0x33, 0x43, 0xc3, 0xc3, 0xe0,
		0x61, 0xf0, 0x30, 0x78, 0x18, 0x3c, 0x0c, 0x1e, 0x06, 0x0f, 0x83, 0x87, 0xc1, 0xc3, 0xd2, 0x69,
		0xe9, 0x38, 0x51, 0x5c, 0x77, 0x3b, 0x9e, 0x13, 0xca, 0x11, 0xb0, 0xcc, 0x98, 0x30, 0x2f, 0x98,
		0x17, 0xcc, 0xab, 0x42, 0xcc, 0x2b, 0xf6, 0xbb, 0x5e, 0xec, 0xbb, 0xdf, 0xa3, 0xca, 0x71, 0xaf,
		0xdf, 0x82, 0x31, 0x2e, 0xd4, 0x02, 0x27, 0xe8, 0x45, 0x9e, 0xdb, 0x0b, 0x8c, 0x3b, 0x06, 0xc2,
		0xe9, 0xe0, 0x74, 0x70, 0x3a, 0x38, 0xdd, 0xe6, 0x38, 0x1d, 0x47, 0x2e, 0x48, 0xd1, 0x04, 0x8e,
		0x5c, 0x90, 0xa4, 0xfd, 0xbd, 0x41, 0x6c, 0xed, 0xcc, 0x85, 0x25, 0x63, 0x13, 0x06, 0x10, 0x06,
		0x10, 0x06, 0x54, 0x28, 0x0c, 0x20, 0x01, 0x0b, 0x59, 0x87, 0xac, 0x43, 0xd6, 0x21, 0xeb, 0x12,
		0xf7, 0x37, 0x65, 0x62, 0xf2, 0xa7, 0x2e, 0xcc, 0x8c, 0x0a, 0xfb, 0x82, 0x7d, 0xc1, 0xbe, 0x60,
		0x5f, 0xb0, 0x2f, 0xd8, 0x17, 0xec, 0x0b, 0xf6, 0x05, 0xfb, 0x9a, 0x61, 0x5f, 0xd2, 0xbd, 0x7f,
		0x33, 0x63, 0xc2, 0xbc, 0x60, 0x5e, 0x30, 0x2f, 0x98, 0x17, 0xcc, 0x0b, 0xe6, 0x05, 0xf3, 0x82,
		0x79, 0xc1, 0xbc, 0x66, 0x98, 0x97, 0xad, 0xce, 0xbf, 0x4b, 0xc6, 0x86, 0x89, 0xc1, 0xc4, 0x60,
		0x62, 0x30, 0x31, 0x98, 0x18, 0x4c, 0x0c, 0x26, 0x06, 0x13, 0x83, 0x89, 0xcd, 0x30, 0x31, 0xe9,
		0xde, 0xbf, 0x99, 0x31, 0x61, 0x5e, 0x30, 0x2f, 0x98, 0x17, 0xcc, 0x0b, 0xe6, 0x05, 0xf3, 0x82,
		0x79, 0xc1, 0xbc, 0x60, 0x5e, 0x33, 0xcc, 0x4b, 0x3e, 0xf3, 0x45, 0xbe, 0x0b, 0xd6, 0x05, 0xeb,
		0x82, 0x75, 0xc1, 0xba, 0x60, 0x5d, 0xb0, 0x2e, 0x58, 0x17, 0xac, 0x6b, 0x91, 0x75, 0xd9, 0xe9,
		0xff, 0xbb, 0x30, 0x32, 0x2c, 0x0c, 0x16, 0x06, 0x0b, 0x83, 0x85, 0xc1, 0xc2, 0x60, 0x61, 0xb0,
		0x30, 0x58, 0xd8, 0xae, 0xb1, 0xb0, 0xbd, 0x12, 0x75, 0xde, 0xbc, 0x19, 0x8a, 0x21, 0xcb, 0x5b,
		0x6c, 0x7e, 0xd2, 0xeb, 0x7b, 0xa1, 0x33, 0xd4, 0x2d, 0xa7, 0x63, 0x4a, 0xf5, 0xc4, 0x9b, 0x9d,
		0x08, 0x35, 0x39, 0x31, 0x70, 0x50, 0x88, 0xbb, 0x2c, 0x8b, 0x6a, 0x69, 0x5a, 0xd4, 0x45, 0x10,
		0xf4, 0xe2, 0x91, 0x44, 0x8d, 0x80, 0xa3, 0x16, 0xb9, 0xdf, 0xbc, 0xae, 0xd3, 0x77, 0xe2, 0x6f,
		0xc3, 0xb7, 0x3f, 0xe8, 0xf5, 0xbd, 0xc0, 0x1d, 0xc5, 0x1c, 0x75, 0x7f, 0xc8, 0xb6, 0xee, 0x1d,
		0xd7, 0x8b, 0x0e, 0x96, 0xfd, 0x78, 0x10, 0x0d, 0xbe, 0x64, 0x3e, 0xcf, 0xfe, 0xeb, 0x20, 0x8a,
		0x9d, 0xd8, 0x3b, 0x48, 0x08, 0x9b, 0x49, 0x28, 0x55, 0x8b, 0xe2, 0x70, 0xe0, 0xc6, 0x41, 0x42,
		0x01, 0xaf, 0x27, 0x77, 0xb8, 0xfb, 0x98, 0xb9, 0xdd, 0xdd, 0xe5, 0xe4, 0x46, 0x7b, 0xe5, 0xcc,
		0x9b, 0x86, 0x61, 0xd5, 0xda, 0x5e, 0xe4, 0x86, 0x7e, 0xdf, 0x68, 0xc2, 0x52, 0x2a, 0x9c, 0x1d,
		0x4c, 0x53, 0x7f, 0xcc, 0xc8, 0x81, 0x71, 0x5c, 0x2a, 0x11, 0x8f, 0x8a, 0xc5, 0xa1, 0x52, 0xf1,
		0xa7, 0x78, 0xdc, 0x29, 0x1e, 0x6f, 0x4a, 0xc6, 0x99, 0xe5, 0x32, 0x08, 0xe3, 0x78, 0x32, 0xd5,
		0x96, 0x28, 0x0e, 0xfd, 0xe0, 0xab, 0x89, 0xba, 0x24, 0xb6, 0x73, 0xf4, 0xb2, 0xc2, 0xfe, 0xc6,
		0x0b, 0x9c, 0x2f, 0x1d, 0xaf, 0x6d, 0xee, 0x6b, 0x26, 0x03, 0x69, 0xce, 0xdb, 0x6b, 0xef, 0xde,
		0x19, 0x74, 0x46, 0xfa, 0x36, 0x54, 0x5f, 0xdc, 0x15, 0xee, 0x0a, 0x77, 0xa5, 0xa2, 0x2d, 0x5f,
		0x7a, 0xbd, 0x8e, 0xe7, 0x04, 0x12, 0xfe, 0xea, 0xa8, 0xc2, 0xfe, 0xca, 0xbf, 0xf7, 0x83, 0xb6,
		0xf7, 0xc3, 0xdc, 0x5f, 0x4d, 0x06, 0xc2, 0xd1, 0xe0, 0x68, 0x70, 0x34, 0x0a, 0xda, 0x32, 0xf0,
		0x83, 0xf8, 0xb8, 0x21, 0xe0, 0x67, 0xce, 0x0c, 0x86, 0x90, 0x49, 0xa6, 0x0b, 0xac, 0x3a, 0x48,
		0x26, 0xcf, 0x85, 0x33, 0xb1, 0xd2, 0xc9, 0x72, 0x1b, 0x69, 0x56, 0x81, 0xe4, 0xb8, 0x68, 0x52,
		0xdc, 0xd6, 0x14, 0x34, 0x1b, 0xe7, 0xcd, 0xf3, 0xd3, 0xb3, 0xc6, 0xf9, 0x49, 0x85, 0xe7, 0x62,
		0x43, 0x29, 0xe6, 0xd6, 0x13, 0x4f, 0x31, 0xcb, 0xf7, 0xd7, 0x26, 0xd5, 0x5c, 0x40, 0xec, 0x64,
		0xf6, 0x11, 0xb7, 0xb0, 0xb8, 0xf7, 0xca, 0x71, 0x7f, 0x5a, 0x71, 0x93, 0x50, 0xd4, 0x64, 0x12,
		0x33, 0x65, 0x72, 0x3c, 0x87, 0xc4, 0x5d, 0xc4, 0x5d, 0xc4, 0x5d, 0xc4, 0x5d, 0xc4, 0x5d, 0xc4,
		0x5d, 0xc4, 0x5d, 0xdb, 0x14, 0x77, 0x95, 0x42, 0x57, 0xc6, 0xe7, 0x4b, 0x7e, 0x4b, 0xbc, 0x8d,
		0x21, 0x69, 0xc9, 0x0e, 0x06, 0xed, 0x80, 0x76, 0x40, 0x3b, 0x14, 0xb4, 0x45, 0xe6, 0x34, 0x49,
		0x81, 0x8d, 0xd4, 0xd2, 0xa7, 0x47, 0xc2, 0x65, 0xe0, 0x32, 0x5b, 0xc5, 0x65, 0xec, 0x6d, 0xa4,
		0x86, 0xd5, 0x90, 0x4d, 0xde, 0xc6, 0x7c, 0x1b, 0xe9, 0x4d, 0xc4, 0x4d, 0x36, 0xd9, 0xd0, 0xfd,
		0x69, 0x85, 0x67, 0xbd, 0xaf, 0xbe, 0xeb, 0x74, 0x04, 0x42, 0xb3, 0x64, 0x20, 0xc2, 0x32, 0xc2,
		0x32, 0xc2, 0x32, 0x05, 0x6d, 0xd9, 0xfc, 0x76, 0x3f, 0x18, 0x13, 0x10, 0x0e, 0x84, 0x23, 0x6e,
		0x18, 0x53, 0x91, 0x37, 0x4c, 0x4a, 0xd3, 0x0c, 0xe9, 0xd2, 0x68, 0x14, 0xb8, 0x12, 0x5c, 0x09,
		0xae, 0xa4, 0xa0, 0x2d, 0x1b, 0xaf, 0xe4, 0x82, 0x2a, 0x81, 0xdd, 0x60, 0xf7, 0xd6, 0x62, 0xf7,
		0x50, 0xfc, 0xf5, 0x28, 0x76, 0xe2, 0x41, 0x64, 0x0e, 0xe1, 0xd9, 0xc1, 0x40, 0x72, 0x90, 0x1c,
		0x24, 0x57, 0xd0, 0x16, 0x2f, 0x18, 0x74, 0x13, 0x57, 0x28, 0x01, 0xe7, 0x4d, 0x83, 0x31, 0xae,
		0x82, 0x41, 0x77, 0xf8, 0x52, 0x8f, 0x50, 0x02, 0x28, 0x01, 0x94, 0x00, 0x71, 0xc3, 0xc0, 0x6c,
		0xdc, 0x47, 0x51, 0x09, 0x4c, 0xfb, 0x1d, 0x59, 0xec, 0x73, 0xa4, 0x36, 0x33, 0xc5, 0xa5, 0x54,
		0xec, 0x9b, 0x05, 0xe5, 0x38, 0x54, 0x7d, 0xd5, 0x3a, 0x8f, 0xda, 0x5b, 0x3f, 0x8a, 0x2f, 0xe2,
		0x38, 0x54, 0x92, 0x78, 0xed, 0x9d, 0x1f, 0x5c, 0x0d, 0xa1, 0x23, 0x18, 0x21, 0x5a, 0x30, 0xe8,
		0x74, 0x9e, 0x2b, 0x5c, 0xec, 0xfc, 0xd0, 0xbf, 0xf8, 0x43, 0xd8, 0xf6, 0x42, 0xaf, 0xfd, 0xf3,
		0x43, 0x72, 0xa9, 0xa8, 0x00, 0x35, 0x15, 0xd0, 0x8a, 0xe2, 0x29, 0xb8, 0xaa, 0x42, 0x1d, 0xb4,
		0x8a, 0xa9, 0x70, 0xbe, 0x42, 0xae, 0xff, 0x46, 0x8e, 0xa4, 0x55, 0x25, 0x2c, 0x25, 0xd9, 0xf5,
		0x2f, 0xbf, 0xfa, 0x95, 0x96, 0xff, 0x66, 0xc5, 0x4b, 0x4e, 0xec, 0x6f, 0x4d, 0xa2, 0xb7, 0x98,
		0xb9, 0x29, 0x99, 0x97, 0x92, 0x39, 0x15, 0x33, 0x9f, 0x55, 0xef, 0x57, 0x70, 0xf2, 0xf4, 0x27,
		0x6d, 0x8d, 0xce, 0xaf, 0xd2, 0xf1, 0xe5, 0x33, 0xbb, 0x38, 0x6f, 0xb3, 0x9f, 0xcc, 0xbd, 0x61,
		0xde, 0x9b, 0xa9, 0xbe, 0xd1, 0xec, 0x43, 0x4d, 0x6f, 0x3d, 0xfe, 0x29, 0xb9, 0xf9, 0xaa, 0x9b,
		0xd6, 0xfc, 0xe8, 0xb2, 0xd7, 0xed, 0x87, 0x5e, 0x14, 0x79, 0xed, 0x8f, 0xa3, 0x1b, 0x2f, 0xc4,
		0xa0, 0x35, 0x3f, 0xfa, 0xc5, 0xf9, 0xee, 0xdd, 0xf6, 0x7a, 0x93, 0xf8, 0x74, 0x3c, 0xf2, 0xde,
		0xe3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xce, 0xda, 0xf8, 0xd9,
		0xb5, 0x97, 0x06, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_FORWARDING_ACTION)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_LOG_ACTION)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_ETHERTYPE)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port": []reflect.Type{
		reflect.TypeOf((E_Transport_DestinationPort)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port": []reflect.Type{
		reflect.TypeOf((E_Transport_SourcePort)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/tcp-flags": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_TCP_FLAGS)(0)),
	},
	"/acl/acl-sets/acl-set/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/state/counter-capability": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_COUNTER_CAPABILITY)(0)),
	},
	"/interfaces/interface/config/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
}

